(window.webpackJsonp=window.webpackJsonp||[]).push([[646],{920:function(e,t,r){"use strict";r.r(t);var o=r(14),_=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"对比-dfs-和-bfs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对比-dfs-和-bfs"}},[e._v("#")]),e._v(" 对比 DFS 和 BFS")]),e._v(" "),t("p",[e._v("BFS")]),e._v(" "),t("ul",[t("li",[e._v("空间是指数级别的，大")]),e._v(" "),t("li",[e._v("不会有爆栈风险")]),e._v(" "),t("li",[e._v("可以求最短，最小")])]),e._v(" "),t("p",[e._v("DFS")]),e._v(" "),t("ul",[t("li",[e._v("空间和深度成正比，小！")]),e._v(" "),t("li",[e._v("有爆栈的风险，比如深度最坏可能有 1e5 层，会爆栈（C++一般 4M）；层信息都放在栈空间里")]),e._v(" "),t("li",[e._v("不能搜最短、最小")])]),e._v(" "),t("h1",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[e._v("#")]),e._v(" 注意事项")]),e._v(" "),t("ul",[t("li",[e._v("判断当前节点、层是否已得到最终解")]),e._v(" "),t("li",[e._v("判断是否可以剪枝")]),e._v(" "),t("li",[e._v("防止循环遍历问题（比如存在环路，要退出）")]),e._v(" "),t("li",[e._v("遍历顺序如何选择（比如是弧头到弧尾还是弧尾到弧头）")])]),e._v(" "),t("h1",{attrs:{id:"习题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#习题"}},[e._v("#")]),e._v(" 习题")]),e._v(" "),t("p",[e._v("DFS")]),e._v(" "),t("p",[t("strong",[e._v("星期一")]),e._v(" "),t("strong",[e._v("LeetCode 111. Minimum Depth of Binary Tree")]),e._v(" "),t("strong",[e._v("星期二")]),e._v(" "),t("strong",[e._v("LeetCode 279. Perfect Squares")]),e._v(" "),t("strong",[e._v("星期三")]),e._v("\n**LeetCode 733. Flood Fill **\n"),t("strong",[e._v("星期四")]),e._v(" "),t("strong",[e._v("LeetCode 200. Number of Islands")]),e._v(" "),t("strong",[e._v("星期五")]),e._v(" "),t("strong",[e._v("LeetCode 130. Surrounded Regions179 人打卡")]),e._v(" "),t("strong",[e._v("LeetCode 543. Diameter of Binary Tree178 人打卡")]),e._v("\n星期六\nLeetCode 127. Word Ladder 149 人打卡\nLeetCode 542. 01 Matrix149 人打卡\n星期天\nLeetCode 207. Course Schedule137 人打卡\nLeetCode 210. Course Schedule II132")]),e._v(" "),t("p",[e._v("BFS")]),e._v(" "),t("p",[e._v("走迷宫")]),e._v(" "),t("p",[e._v("八数码")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/111.minimum-depth-of-binary-tree.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode 111. Minimum Depth of Binary Tree (easy)"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/201-300/279.perfect-squares.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode 279. Perfect Squares (medium)"),t("OutboundLink")],1)])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/130.surrounded-regions.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode 130. Surrounded Regions (medium)"),t("OutboundLink")],1)])])])])}),[],!1,null,null,null);t.default=_.exports}}]);