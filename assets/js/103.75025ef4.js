(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{376:function(v,_,e){"use strict";e.r(_);var t=e(14),a=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"本地栈式提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地栈式提交"}},[v._v("#")]),v._v(" 本地栈式提交")]),v._v(" "),_("p",[v._v("来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。")]),v._v(" "),_("p",[v._v("这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！")]),v._v(" "),_("p",[v._v("最后就差把 "),_("code",[v._v("bugFix")]),v._v(" 分支里的工作合并回 "),_("code",[v._v("main")]),v._v(" 分支了。你可以选择通过 fast-forward 快速合并到 "),_("code",[v._v("main")]),v._v(" 分支上，但这样的话 "),_("code",[v._v("main")]),v._v(" 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式……")]),v._v(" "),_("p",[v._v("实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("git rebase -i")])]),v._v(" "),_("li",[_("code",[v._v("git cherry-pick")]),v._v("\n来达到目的。")])]),v._v(" "),_("h1",{attrs:{id:"修改历史提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#修改历史提交"}},[v._v("#")]),v._v(" 修改历史提交")]),v._v(" "),_("h2",{attrs:{id:"提交的技巧-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交的技巧-1"}},[v._v("#")]),v._v(" 提交的技巧 #1")]),v._v(" "),_("p",[v._v("接下来这种情况也是很常见的：你之前在 "),_("code",[v._v("newImage")]),v._v(" 分支上进行了一次提交，然后又基于它创建了 "),_("code",[v._v("caption")]),v._v(" 分支，然后又提交了一次。")]),v._v(" "),_("p",[v._v("此时你想对某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 "),_("code",[v._v("newImage")]),v._v(" 中图片的分辨率，尽管那个提交记录并不是最新的了。")]),v._v(" "),_("p",[v._v("思考一下我们该怎么做？")]),v._v(" "),_("p",[v._v("我们可以通过下面的方法来克服困难：")]),v._v(" "),_("ul",[_("li",[v._v("先用 "),_("code",[v._v("git rebase -i")]),v._v(" 将提交重新排序，然后把我们想要修改的提交记录挪到最前")]),v._v(" "),_("li",[v._v("然后用 "),_("code",[v._v("git commit --amend")]),v._v(" 来进行一些小修改")]),v._v(" "),_("li",[v._v("接着再用 "),_("code",[v._v("git rebase -i")]),v._v(" 来将他们调回原来的顺序")]),v._v(" "),_("li",[v._v("最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！\n当然完成这个任务的方法不止上面提到的一种（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。 最后有必要说明一下目标状态中的那几个"),_("code",[v._v("'")]),v._v(" —— 我们把这个提交移动了两次，每移动一次会产生一个 "),_("code",[v._v("'")]),v._v("；而 C2 上多出来的那个是我们在使用了 amend 参数提交时产生的，所以最终结果就是这样了。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);