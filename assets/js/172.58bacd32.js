(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{446:function(a,s,t){"use strict";t.r(s);var l=t(14),_=Object(l.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"类加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[a._v("#")]),a._v(" 类加载机制")]),a._v(" "),s("h4",{attrs:{id:"_1-自己写的-java-文件-要想运行-必须经过-编译-加载两个步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-自己写的-java-文件-要想运行-必须经过-编译-加载两个步骤"}},[a._v("#")]),a._v(" 1. 自己写的 java 文件 要想运行 必须经过 编译 - 加载两个步骤")]),a._v(" "),s("ol",[s("li",[a._v("编译过程，首先，通过 java 编译器 编译成 .class 文件")]),a._v(" "),s("li",[a._v("加载过程，把 .class 文件加载到 JVM 内存中")]),a._v(" "),s("li",[a._v("装载完成后 得到一个 class 对象，可以使用 new 关键字实例化对象")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/muyids/20220928121319.png",alt:"image-20220928121318304"}})]),a._v(" "),s("h4",{attrs:{id:"_2-类加载过程-需要类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-类加载过程-需要类加载器"}},[a._v("#")]),a._v(" 2. 类加载过程 需要类加载器")]),a._v(" "),s("p",[a._v("JVM 在运行时会产生三个类加载器（有层级关系，分别去加载不同 scope（作用范围）的 jar 包）：")]),a._v(" "),s("ul",[s("li",[a._v("启动类加载器（Bootstrap）: 加载 java 核心类库，也就是 ${JDK_HOME}/lib 下的 rt.jar 和 resources.jar")]),a._v(" "),s("li",[a._v("扩展类加载器（Extension）: 加载 ${JDK_HOME}/lib/ext 下的 jar 包 和 class 文件")]),a._v(" "),s("li",[a._v("应用类加载器（Application）: 加载 当前应用 classpath 下的所有 jar 包 和 类文件")]),a._v(" "),s("li",[a._v("除了系统 JVM 提供的类加载器，还可以实现 ClassLoader 来自定义加载器\n"),s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/muyids/20220928121816.png",alt:"image-20220928121815544"}})])]),a._v(" "),s("h4",{attrs:{id:"_3-父委托模型-双亲委派"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-父委托模型-双亲委派"}},[a._v("#")]),a._v(" 3. 父委托模型（双亲委派）")]),a._v(" "),s("p",[a._v("按照类加载器的层级关系，逐层进行委派；")]),a._v(" "),s("ul",[s("li",[a._v("比如要加载一个 test.class 文件的时候，首先会把这个 class 文件的查询和加载委派给父加载器去执行")]),a._v(" "),s("li",[a._v("如果父加载器无法加载，再尝试自己来加载\n这样设计的好处：")])]),a._v(" "),s("ol",[s("li",[a._v("安全性：\n"),s("ol",[s("li",[a._v("层级关系实际上代表的是优先级，所有类加载优先给到 Bootstrap ClassLoader")]),a._v(" "),s("li",[a._v("核心类库中的一些类就无法被破坏")]),a._v(" "),s("li",[a._v("比如自己写一个 java.lang.String，最终还是会交给 Bootstrap ClassLoader，再加上 每个类加载器本身的作用范围，自己写的 java.lang.String 不会覆盖核心类库中的 类")])])]),a._v(" "),s("li",[a._v("避免重复加载\n"),s("ol",[s("li",[a._v("父加载器已经加载过了，子加载器就没必要再加载了")])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);