(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{337:function(v,_,t){"use strict";t.r(_);var o=t(14),p=Object(o.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h4",{attrs:{id:"负载均衡算法、类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡算法、类型"}},[v._v("#")]),v._v(" "),_("strong",[v._v("负载均衡算法、类型")])]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("轮询法")])]),v._v(" "),_("blockquote",[_("p",[v._v("将请求按顺序轮流地分配到后端服务器上")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("随机法")])]),v._v(" "),_("blockquote",[_("p",[v._v("通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统")]),v._v(" "),_("p",[v._v("计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("源地址哈希法")])]),v._v(" "),_("blockquote",[_("p",[v._v("源地址哈希的思想是根据获取客户端的 IP 地址，通过哈希函数计算得到的一个数值，用该数值对服务器")]),v._v(" "),_("p",[v._v("列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。")]),v._v(" "),_("p",[v._v("采用源地址哈希法进行负载均衡，同一 IP 地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("加权轮询法")])]),v._v(" "),_("blockquote",[_("p",[v._v("不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置")]),v._v(" "),_("p",[v._v("高、负载低的机器配置更高的权重，让其处理更多的请求；而配置低、负载高的机器，给其分配较低的权")]),v._v(" "),_("p",[v._v("重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("加权随机法")])]),v._v(" "),_("blockquote",[_("p",[v._v("与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是")]),v._v(" "),_("p",[v._v("按照权重随机请求后端服务器，而非顺序。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("最小连接数法")])]),v._v(" "),_("blockquote",[_("p",[v._v("最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负载合理地分流到每一台服务器。")])])])]),v._v(" "),_("p",[v._v("类型：")]),v._v(" "),_("p",[v._v("DNS 方式实现负载均衡")])])}),[],!1,null,null,null);_.default=p.exports}}]);