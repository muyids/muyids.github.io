(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{424:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_00-谈谈对面向对象思想的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_00-谈谈对面向对象思想的理解"}},[t._v("#")]),t._v(" 00.谈谈对面向对象思想的理解")]),t._v(" "),s("ol",[s("li",[t._v("首先，谈谈面向过程 vs 面向对象有什么区别")])]),t._v(" "),s("p",[t._v("两者是思考角度的差异，面向过程更多以 "),s("strong",[t._v("“执行者”")]),t._v(" 角度思考问题，面向对象以 "),s("strong",[t._v("“组织者”")]),t._v(" 角度思考问题")]),t._v(" "),s("p",[t._v("面向过程编程，想的是实现函数方法，来一步一步执行，得到最终结果；")]),t._v(" "),s("p",[t._v("面向对象编程，思考的是 谁来帮助我做这件事，思考的是选择合适的工具，组织到一起干一件事")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("面向对象的思想")])]),t._v(" "),s("p",[t._v("封装、继承、多态")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("p",[t._v("封装：baseService 抽取到父类，把基础的功能实现；\n继承：子类继承父类，实现自己的方法即可；\n多态：方法名一样，参数不一样，处理不一样")]),t._v(" "),s("h2",{attrs:{id:"_01-jdk-jre-jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-jdk-jre-jvm"}},[t._v("#")]),t._v(" 01.JDK&JRE&JVM")]),t._v(" "),s("p",[t._v("JDK："),s("code",[t._v("Java Development Kit")]),t._v("，Java 开发工具包，提供了 Java 的开发环境和运行环境。")]),t._v(" "),s("p",[t._v("包含了编译 Java 源文件的编译器 Javac，还有调试和分析的工具。")]),t._v(" "),s("p",[t._v("JRE："),s("code",[t._v("Java Runtime Environment")]),t._v("，Java 运行环境，包含 Java 虚拟机及一些基础类库")]),t._v(" "),s("p",[t._v("JVM："),s("code",[t._v("Java Virtual Machine")]),t._v("，Java 虚拟机，提供执行字节码文件的能力")]),t._v(" "),s("p",[t._v("所以，如果只是运行 Java 程序，只需要安装 JRE 即可。")]),t._v(" "),s("p",[t._v("另外注意，JVM 是实现 Java 跨平台的核心，但 JVM 本身并不是跨平台的，")]),t._v(" "),s("p",[t._v("不同的平台需要安装不同的 JVM")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/20201014080521.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_02-java-基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-java-基本数据类型"}},[t._v("#")]),t._v(" 02.java 基本数据类型")]),t._v(" "),s("p",[t._v("boolean,char,byte,short,int,long,float,double")]),t._v(" "),s("p",[t._v("注意：String 是引用类型")]),t._v(" "),s("h2",{attrs:{id:"_03-和-equals-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-和-equals-的区别"}},[t._v("#")]),t._v(" 03.==和 equals 的区别")]),t._v(" "),s("p",[t._v("== 比较的是值")]),t._v(" "),s("ul",[s("li",[t._v("比较基本的数据类型，比较的是数值")]),t._v(" "),s("li",[t._v("比较引用类型：比较引用指向的值（地址）\nequals")])]),t._v(" "),s("p",[t._v("默认比较也是地址，因为这个方法的最初定义在 Object 上，默认的实现就是比较地址")]),t._v(" "),s("p",[t._v("自定义的类，如果需要比较的是内容，那么就要学 String，重写 equals 方法")]),t._v(" "),s("h2",{attrs:{id:"_04-final-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-final-的作用"}},[t._v("#")]),t._v(" 04.final 的作用")]),t._v(" "),s("p",[t._v("final 修饰类，表示类不可变，不可继承")]),t._v(" "),s("p",[t._v("比如，String，不可变性")]),t._v(" "),s("p",[t._v("final 修饰方法，表示该方法不可重写")]),t._v(" "),s("p",[t._v("比如模板方法，可以固定我们的算法")]),t._v(" "),s("p",[t._v("final 修饰变量，这个变量就是常量")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("p",[t._v("修饰的是基本数据类型，这个值本身不能修改")]),t._v(" "),s("p",[t._v("修饰的是引用类型，引用的指向不能修改")]),t._v(" "),s("p",[t._v("比如下面的代码是可以的")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Andy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstudent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAge")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意，这个是可以的！")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"_05-string-s-java-与-string-s-new-string-java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-string-s-java-与-string-s-new-string-java"}},[t._v("#")]),t._v(' 05.String s = "java"与 String s = new String("java")')]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("这两者的内存分配方式是不一样的。")]),t._v(" "),s("p",[t._v("第一种方式，JVM 会将其分配到常量池，而第二种方式是分配到堆内存")]),t._v(" "),s("h2",{attrs:{id:"_06-string-stringbuffer-stringbuilder-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-string-stringbuffer-stringbuilder-区别"}},[t._v("#")]),t._v(" 06.String，StringBuffer，StringBuilder 区别")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v(" 跟其他两个类的区别是")]),t._v(" "),s("blockquote",[s("p",[t._v("String 是 final 类型，每次声明的都是不可变的对象，\n所以每次操作都会产生新的 String 对象，然后将指针指向新的 String 对象。\n"),s("code",[t._v("StringBuffer，StringBuilder")]),t._v("都是在原有对象上进行操作")])]),t._v(" "),s("blockquote",[s("p",[t._v("所以，如果需要经常改变字符串内容，则建议采用这两者。")])]),t._v(" "),s("p",[t._v("StringBuffer vs StringBuilder")]),t._v(" "),s("blockquote",[s("p",[t._v("前者是线程安全的，后者是线程不安全的。\n线程不安全性能更高，所以在开发中，优先采用 StringBuilder.\nStringBuilder > StringBuffer > String")])]),t._v(" "),s("h2",{attrs:{id:"_07-接口和抽象类的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_07-接口和抽象类的区别"}},[t._v("#")]),t._v(" 07.接口和抽象类的区别")]),t._v(" "),s("p",[t._v("这个问题，要分 JDK 版本来区分回答：")]),t._v(" "),s("p",[t._v("JDK1.8 之前：")]),t._v(" "),s("ul",[s("li",[t._v("语法：\n"),s("ul",[s("li",[t._v("抽象类：方法可以有抽象的，也可以有非抽象, 有构造器")]),t._v(" "),s("li",[t._v("接口：方法都是抽象，属性都是常量，默认有"),s("code",[t._v("public static final")]),t._v("修饰")])])]),t._v(" "),s("li",[t._v("设计：\n"),s("ul",[s("li",[t._v("抽象类：同一类事物的抽取，比如针对 Dao 层操作的封装，如，"),s("code",[t._v("BaseDao，BaseServiceImpl")])]),t._v(" "),s("li",[t._v("接口：通常更像是一种标准的制定，定制系统之间对接的标准")]),t._v(" "),s("li",[t._v("例子： - 1，单体项目，分层开发，interface 作为各层之间的纽带，在 controller 中注入 IUserService，在 Service 注入 IUserDao - 2，分布式项目，面向服务的开发，抽取服务 service，这个时候，就会产生服务的提供者和服务的消费者两个角色 - 这两个角色之间的纽带，依然是接口\nJDK1.8 之后：")])])]),t._v(" "),s("li",[t._v("接口里面可以有实现的方法，注意要在方法的声明上加上 default 或者 static")])]),t._v(" "),s("p",[t._v("最后区分几个概念：")]),t._v(" "),s("ul",[s("li",[t._v("多继承，多重继承，多实现")]),t._v(" "),s("li",[t._v("多重继承：A->B->C（爷孙三代的关系）")]),t._v(" "),s("li",[t._v("多实现："),s("code",[t._v("Person implements IRunable,IEatable（符合多项国际化标准）")])]),t._v(" "),s("li",[t._v("多继承：接口可以多继承，类只支持单继承")])]),t._v(" "),s("h2",{attrs:{id:"_08-算法题-求-n-的阶乘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_08-算法题-求-n-的阶乘"}},[t._v("#")]),t._v(" 08.算法题-求 N 的阶乘")]),t._v(" "),s("ol",[s("li",[t._v("递归")]),t._v(" "),s("li",[t._v("打表或递推")])]),t._v(" "),s("h2",{attrs:{id:"_09-算法题-求解斐波那切数列的第-n-个数是几"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_09-算法题-求解斐波那切数列的第-n-个数是几"}},[t._v("#")]),t._v(" 09.算法题-求解斐波那切数列的第 N 个数是几？")]),t._v(" "),s("p",[t._v("同上")]),t._v(" "),s("h2",{attrs:{id:"_10-什么是向上转型-什么是向下转型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-什么是向上转型-什么是向下转型"}},[t._v("#")]),t._v(" 10.什么是向上转型？什么是向下转型？")]),t._v(" "),s("p",[t._v("这道题目一般出现在（笔试-选择题）")]),t._v(" "),s("p",[t._v("举例说明即可：")]),t._v(" "),s("ul",[s("li",[t._v("向上转型："),s("code",[t._v("Person person = new Student()")]),t._v("; 安全的")]),t._v(" "),s("li",[t._v("向下转型："),s("code",[t._v("Teacher teacher = (Teacher)person")]),t._v("; 不安全的")])]),t._v(" "),s("h2",{attrs:{id:"_11-int-和-integer-的区别-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-int-和-integer-的区别-重点"}},[t._v("#")]),t._v(" 11.Int 和 Integer 的区别（重点）")]),t._v(" "),s("p",[t._v("来，先来一道考题，你看做对了吗？")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i5 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("126")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i6 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i7 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i8 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i6 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i7"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i6 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" i8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("以上这些输出的答案是什么？true or false？ why？")]),t._v(" "),s("p",[t._v("你可以自己先思考，再看后面的答案分析。")]),t._v(" "),s("p",[t._v("答案揭晓")]),t._v(" "),s("p",[t._v("分情况来比较")]),t._v(" "),s("ol",[s("li",[t._v("都定义为 Integer 的比较：")])]),t._v(" "),s("blockquote",[s("p",[t._v("new：一旦 new，就是开辟一块新内存，结果肯定是 false"),s("br"),t._v("\n不 new："),s("br"),t._v("\n看范围"),s("br"),t._v("\nInteger 做了缓存，-128 至 127，当你取值在这个范围的时候，会采用缓存的对象，所以会相等"),s("br"),t._v("\n当不在这个范围，内部创建新的对象，此时不相等"),s("br")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Integer 和 int 的比较：")])]),t._v(" "),s("blockquote",[s("p",[t._v("实际比较的是数值，Integer 会做"),s("code",[t._v("拆箱")]),t._v("的动作，来跟基本数据类型做比较"),s("br"),t._v("\n此时跟是否在缓存范围内或是否 new 都没关系 3. 源码分析：\n当我们写"),s("code",[t._v("Integer i = 126")]),t._v("，实际上做了自动装箱："),s("code",[t._v("Integer i = Integer.valueOf(126)")]),t._v(";")])]),t._v(" "),s("p",[t._v("分析这段源码")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("low"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//IntegerCache是Integer的内部类")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntegerCache")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" low "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" high"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" cache"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// high value may be configured by property")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("​​\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h2",{attrs:{id:"_12-方法的重写和重载的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-方法的重写和重载的区别"}},[t._v("#")]),t._v(" 12.方法的重写和重载的区别")]),t._v(" "),s("p",[t._v("一般出现在（笔试题-选择题），下面我们说下重点")]),t._v(" "),s("ol",[s("li",[t._v("重载：发生在一个类里面，方法名相同，参数列表不同（混淆点：跟返回类型没关系）")])]),t._v(" "),s("blockquote",[s("p",[t._v("以下不构成重载 "),s("br"),t._v("\npublic double add(int a,int b) "),s("br"),t._v("\npublic int add(int a,int b) "),s("br")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("重写：发生在父类子类之间的，方法名相同，参数列表相同")])]),t._v(" "),s("h2",{attrs:{id:"_13-list-和-set-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-list-和-set-的区别"}},[t._v("#")]),t._v(" 13.List 和 Set 的区别")]),t._v(" "),s("p",[t._v("这简直是一道送分题，简单到我都不好意思写出来，但居然有人会搞错，汗！")]),t._v(" "),s("ol",[s("li",[t._v("List（有序，可重复）")]),t._v(" "),s("li",[t._v("Set（无序，不可重复）")])]),t._v(" "),s("h2",{attrs:{id:"_14-谈谈-arraylist-和-linkedlist-的区别-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-谈谈-arraylist-和-linkedlist-的区别-重点"}},[t._v("#")]),t._v(" 14.谈谈 ArrayList 和 LinkedList 的区别（重点）")]),t._v(" "),s("ol",[s("li",[t._v("底层数据结构的差异")])]),t._v(" "),s("ul",[s("li",[t._v("ArrayList，数组，连续一块内存空间")]),t._v(" "),s("li",[t._v("LinkedList，双向链表，不是连续的内存空间")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("简单描述")])]),t._v(" "),s("ul",[s("li",[t._v("ArrayList，查找快，因为是连续的内存空间，方便寻址，但删除，插入慢，因为需要发生数据迁移")]),t._v(" "),s("li",[t._v("LinkedList，查找慢，因为需要通过指针一个个寻找，但删除，插入块，因为只要改变前后节点的指针指向即可。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("ArrayList 细节分析")])]),t._v(" "),s("ul",[s("li",[t._v("增加\n"),s("ul",[s("li",[t._v("添加到末尾，如果需要扩容\n"),s("ul",[s("li",[t._v("数组初始化容量多大？10，当你知道需要存储多少数据时，建议在创建的时候，直接设置初始化大小")])])]),t._v(" "),s("li",[t._v("怎么扩容？\n"),s("ul",[s("li",[t._v("当发现容量不够之后，就进行扩容")]),t._v(" "),s("li",[t._v("按原先数组容量的 1.5 倍进行扩容，位运算，下面是关键的源码")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elementData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCapacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("再将原先数组的元素复制到新数组，Arrays")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("elementData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("添加到其他位置，这个时候需要做整体的搬迁")])])])])]),t._v(" "),s("li",[t._v("删除\n"),s("ul",[s("li",[t._v("删除末尾，并不需要迁移")]),t._v(" "),s("li",[t._v("删除其他的位置，这个时候也需要搬迁")])])]),t._v(" "),s("li",[t._v("修改\n"),s("ul",[s("li",[t._v("修改之前，必须先定位")]),t._v(" "),s("li",[t._v("定位-查找-ArrayList（数组是一段连续的内存空间，定位会特别快）")])])]),t._v(" "),s("li",[t._v("查找\n"),s("ul",[s("li",[t._v("如上所述")])])])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("LinkedList 细节分析")])]),t._v(" "),s("ul",[s("li",[t._v("提供了的两个引用（first，last）")]),t._v(" "),s("li",[t._v("增加\n"),s("ul",[s("li",[t._v("添加到末尾，创建一个新的节点，将之前的 last 节点设置为新节点的 pre，新节点设置为 last")]),t._v(" "),s("li",[t._v("添加到其他位置，这个时候，就需要调整前后节点的引用指向")])])]),t._v(" "),s("li",[t._v("修改\n"),s("ul",[s("li",[t._v("修改最后一个节点或者第一个节点，那么就很快（first，last）")]),t._v(" "),s("li",[t._v("修改其他位置，如果是按坐标来定位节点，则会按照二分查找法，源码如下：")])])])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("一个思考题，假如我们可以确定要存储 1000 个元素，那么采用 ArrayList 和 LinkedList，哪个更耗内存，为什么？")]),t._v(" "),s("li",[t._v("LinkedList，要实现在 A 和 B 之间插入 C，该如何实现，编写伪代码即可")])]),t._v(" "),s("h2",{attrs:{id:"_15-如何实现一个-ioc-容器-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-如何实现一个-ioc-容器-todo"}},[t._v("#")]),t._v(" 15.如何实现一个 IOC 容器（TODO)")]),t._v(" "),s("h2",{attrs:{id:"_16-谈谈-hashset-的存储原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-谈谈-hashset-的存储原理"}},[t._v("#")]),t._v(" 16.谈谈 HashSet 的存储原理")]),t._v(" "),s("p",[t._v("HashSet 的存储原理或者工作原理，主要是从如何保证唯一性来说起")]),t._v(" "),s("p",[t._v("这里面主要有 3 个问题，需要回答？")]),t._v(" "),s("ul",[s("li",[t._v("第一，为什么要采用 Hash 算法？有什么优势，解决了什么问题？")]),t._v(" "),s("li",[t._v("第二，所谓哈希表是一张什么表？")]),t._v(" "),s("li",[t._v("第三，HashSet 如何保证保存对象的唯一性？会经历一个什么样的运算过程？")])]),t._v(" "),s("p",[t._v("大家可以先思考，晚些再补充答案！")]),t._v(" "),s("p",[t._v("首先，我们要明确一点，HashSet 底层采用的是 HashMap 来实现存储，其值作为 HashMap 的 key")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PRESENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("第一，为什么要采用 Hash 算法？有什么优势，解决了什么问题？")]),t._v(" "),s("p",[t._v("解决的问题是唯一性")]),t._v(" "),s("p",[t._v("存储数据，底层采用的是"),s("strong",[t._v("数组")])]),t._v(" "),s("p",[t._v("当我们往数组放数据的时候，你如何判断是否唯一？")]),t._v(" "),s("p",[t._v("采用 hash 算法，通过计算存储对象的"),s("code",[t._v("hashcode")]),t._v("，然后再跟"),s("code",[t._v("数组长度-1")]),t._v("做位"),s("code",[t._v("与&运算")]),t._v("，得到我们要存储在数组的哪个下标下，如果此时计算的位置没有其他元素，直接存储，不用比较。")]),t._v(" "),s("p",[t._v("此处，我们只会用到"),s("code",[t._v("hashCode")])]),t._v(" "),s("p",[t._v("但是随着元素的不断添加，就可能出现“哈希冲突”，不同的对象计算出来的 hash 值是相同的，这个时候，我们就需要比较，才需要用到"),s("code",[t._v("equals")]),t._v("方法")]),t._v(" "),s("p",[t._v("如果"),s("code",[t._v("equals")]),t._v("相同，则不插入，不相等，则形成链表("),s("code",[t._v("链地址法")]),t._v("，还有一种"),s("code",[t._v("开放定址算法")]),t._v(")")]),t._v(" "),s("p",[t._v("第二，所谓哈希表是一张什么表？")]),t._v(" "),s("p",[t._v("本质是一个数组，而且数组的元素是链表")]),t._v(" "),s("p",[t._v("JDK1.7 的版本实现")]),t._v(" "),s("p",[t._v("JDK1.8 做了优化")]),t._v(" "),s("p",[t._v("随着元素不断添加，链表可能会越来越长，会优化成"),s("strong",[t._v("红黑树")])]),t._v(" "),s("h2",{attrs:{id:"_17-谈谈-linkedhashmap-和-hashmap-的区别-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-谈谈-linkedhashmap-和-hashmap-的区别-重点"}},[t._v("#")]),t._v(" 17.谈谈 LinkedHashMap 和 HashMap 的区别（重点）")]),t._v(" "),s("p",[t._v("好好谈谈 HashMap")]),t._v(" "),s("p",[t._v("主要关注几个点：")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("初始化大小是 16，如果事先知道数据量的大小，建议修改默认初始化大小。减少扩容次数，提高性能，这是我一直会强调的点 "),s("br")]),t._v(" "),s("li",[t._v("最大的装载因子默认是 0.75，当 HashMap 中元素个数达到容量的 0.75 时，就会扩容。容量是原先的两倍"),s("br")]),t._v(" "),s("li",[t._v("HashMap 底层采用链表法来解决冲突。 但是存在一个问题，就是链表也可能会过长，影响性能"),s("br"),t._v("\n于是 JDK1.8,对 HashMap 做了进一步的优化，引入了红黑树。"),s("br"),t._v("\n当链表长度超过 8，且数组容量大于 64 时，链表就会转换为红黑树。"),s("br"),t._v("\n当红黑树的节点数量小于 6 时，会将红黑树转换为链表。"),s("br"),t._v("\n因为在数据量较小的情况下，红黑树要维护自身平衡，比链表性能没有优势。"),s("br"),t._v("\n这 3 点非常重要！\n其次，"),s("code",[t._v("LinkedHashMap")]),t._v("就是"),s("code",[t._v("链表+散列表")]),t._v("的结构，其底层采用了"),s("code",[t._v("Linked双向链表")]),t._v("来保存节点的访问顺序，所以保证了有序性。")])])]),t._v(" "),s("h2",{attrs:{id:"_18-谈谈-concurrenthashmap-hashmap-hashtable-的区别-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-谈谈-concurrenthashmap-hashmap-hashtable-的区别-重点"}},[t._v("#")]),t._v(" 18.谈谈 ConcurrentHashMap，HashMap，Hashtable 的区别(重点)")]),t._v(" "),s("ol",[s("li",[t._v("首先，来看看其他几个相关的类")])]),t._v(" "),s("blockquote",[s("p",[t._v("Hashtable 是线程安全的，但效率低(hashtable 基本没人用了，内部有上锁的控制 synchronized)"),s("br"),t._v("\nHashMap 是线程不安全的，但效率高"),s("br"),t._v("\n实验：")])]),t._v(" "),s("p",[t._v("启动多个线程同时操作 同一个 hashmap，不断往里面 put -> 死锁 （TODO）")]),t._v(" "),s("blockquote",[s("p",[t._v("Collections.synchronizedMap()，工具类提供了同步包装器的方法，来返回具有线程安全的集合对象"),s("br"),t._v("\n性能依然有问题"),s("br")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在这个类的内部方法实现上，也只是单纯加上了锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mutex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("为解决这样的矛盾问题，所以 JDK 提供了并发包，来平衡这样的问题"),s("code",[t._v("（java.util.concurrent）")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("ConcurrentHashMap（重点）")])]),t._v(" "),s("p",[t._v("分段锁: 将锁的粒度变小；兼顾线程安全和性能呢")]),t._v(" "),s("ul",[s("li",[t._v("兼顾了线程安全和效率的问题")])]),t._v(" "),s("blockquote",[s("p",[t._v("分析：HashTable 锁了整段数据（用户操作是不同的数据段，依然需要等待）"),s("br"),t._v("\n解决方案：把数据分段，执行分段锁（分离锁），核心把锁的范围变小，这样出现并发冲突的概率就变小"),s("br"),t._v("\n在保存的时候，计算所存储的数据是属于哪一段，只锁当前这一段"),s("br")])]),t._v(" "),s("p",[s("strong",[t._v("注意：分段锁（分离锁）是 JDK1.8 之前的一种的方案，JDK1.8 之后做了优化。")])]),t._v(" "),s("p",[t._v("JDK1.7 跟 JDK1.8 在 ConcurrentHashMap 的实现上存在以下区别：")]),t._v(" "),s("ol",[s("li",[t._v("数据结构")])]),t._v(" "),s("p",[t._v("JDK1.7 采用链表的方式，而 JDK1.8 则采用"),s("code",[t._v("链表+红黑树")]),t._v("的方式")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("发生 hash 碰撞之后")])]),t._v(" "),s("p",[t._v("JDK1.7 发生碰撞之后，会采用"),s("code",[t._v("链表")]),t._v("的方式来解决")]),t._v(" "),s("p",[t._v("JDK1.8 发生碰撞之后，默认采用链表，但当链表的长度超过 8，且数组容量超过 64 时，会转换为红黑树存储")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("保证并发安全")])]),t._v(" "),s("p",[t._v("JDK1.7 采用"),s("strong",[t._v("分段锁")]),t._v("的方式，而 JDK1.8 采用"),s("strong",[t._v("CAS 和 synchronized")]),t._v("的组合模式")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("查询复杂度")])]),t._v(" "),s("p",[t._v("JDK1.7 采用"),s("code",[t._v("链表")]),t._v("的方式，时间复杂度为"),s("code",[t._v("O(n)")]),t._v("，而 JDK1.8 在采用"),s("code",[t._v("红黑树")]),t._v("的方式时，时间复杂度为"),s("code",[t._v("O(log(n))")])]),t._v(" "),s("p",[t._v("题外话：")]),t._v(" "),s("p",[t._v("不过红黑树其实是一种兜底方案，因为当链表数量达到 8 个的时候，其发生的概率是千万分之几，所以作者考虑到这种极端情况下，需要用红黑树的方式来优化")]),t._v(" "),s("p",[t._v("三者在开发中如何选择？")]),t._v(" "),s("ol",[s("li",[t._v("优先选择 hashmap")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果不是多个线程访问同一个资源的情况下，优先选择 HashMap"),s("br"),t._v("\n局部变量，不是全局变量 "),s("br"),t._v(" 2. 选择"),s("code",[t._v("ConcurrentHashMap")]),t._v("，是全局变量，多个线程共享访问")])]),t._v(" "),s("h2",{attrs:{id:"_19-arraylist-vs-vector"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-arraylist-vs-vector"}},[t._v("#")]),t._v(" 19.ArrayList vs Vector")]),t._v(" "),s("p",[t._v("说句实话，对这种古老的 Vector，之所以你在笔试题会遇到，我感觉是面试官偷懒了。")]),t._v(" "),s("p",[t._v("来吧，我们看看")]),t._v(" "),s("blockquote",[s("p",[t._v("ArrayList：线程不安全，效率高，常用 "),s("br"),t._v("\nVector：线程安全的，效率低"),s("br"),t._v("\n我们看 Vector 的源码：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/v2-64837bba450a2a0cdcda96ae50bae445_r.jpg",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_20-谈谈-io-流的分类及选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-谈谈-io-流的分类及选择"}},[t._v("#")]),t._v(" 20.谈谈 IO 流的分类及选择")]),t._v(" "),s("ol",[s("li",[t._v("分类")])]),t._v(" "),s("p",[t._v("按方向分：输入流，输出流")]),t._v(" "),s("blockquote",[s("p",[t._v("（注意，是站在程序的角度来看方向），输入流用于读文件，输出流用于写文件")])]),t._v(" "),s("p",[t._v("按读取的单位分：字节流，字符流")]),t._v(" "),s("p",[t._v("按处理的方式分：节点流，处理流")]),t._v(" "),s("blockquote",[s("p",[t._v("比如，"),s("code",[t._v("FileInputStream")]),t._v("和"),s("code",[t._v("BufferedInputStream")]),t._v("(后者带有缓存区功能-byte[])")])]),t._v(" "),s("p",[t._v("IO 流的 4 大基类："),s("code",[t._v("InputStream，OutputStream，Reader，Writer")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("选择")])]),t._v(" "),s("blockquote",[s("p",[t._v("字节流可以读取任何文件"),s("br"),t._v("\n读取文本文件的时候：选择字符流（假如有解析文件的内容的需求，比如逐行处理，则采用字符流，比如 txt 文件）"),s("br"),t._v("\n读取二进制文件的时候，选择字节流（视频，音频，doc，ppt）"),s("br")])]),t._v(" "),s("h2",{attrs:{id:"_21-serialversionuid-的作用是什么-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-serialversionuid-的作用是什么-todo"}},[t._v("#")]),t._v(" 21.serialVersionUID 的作用是什么（TODO）")]),t._v(" "),s("p",[t._v("当执行序列化时，我们写对象到磁盘中，会根据当前这个类的结构生成一个版本号 ID")]),t._v(" "),s("p",[t._v("当反序列化时，程序会比较磁盘中的序列化版本号 ID 跟当前的类结构生成的版本号 ID 是否一致，如果一致则反序列化成功，否则，反序列化失败")]),t._v(" "),s("p",[t._v("加上版本号，有助于当我们的类结构发生了变化，依然可以将之前已经序列化的对象反序列化成功")]),t._v(" "),s("h2",{attrs:{id:"_22-请描述下-java-的异常体系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-请描述下-java-的异常体系"}},[t._v("#")]),t._v(" 22.请描述下 Java 的异常体系")]),t._v(" "),s("p",[t._v("异常体系如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/v2-36ae97b8f5cfda5820465fc54c3530e9_1440w.jpg",alt:""}})]),t._v(" "),s("p",[t._v("Error 是虚拟机内部错误")]),t._v(" "),s("blockquote",[s("p",[t._v("栈内存溢出错误：StackOverflowError(递归，递归层次太多或递归没有结束) "),s("br"),t._v("\n堆内存溢出错误：OutOfMemoryError(堆创建了很多对象) "),s("br"),t._v("\nException 是我们编写的程序错误")])]),t._v(" "),s("blockquote",[s("p",[t._v("RuntimeException：也称为 LogicException "),s("br"),t._v("\n为什么编译器不会要求你去 try catch 处理？"),s("br"),t._v("\n本质是逻辑错误，比如空指针异常，这种问题是编程逻辑不严谨造成的"),s("br"),t._v("\n应该通过完善我们的代码编程逻辑，来解决问题"),s("br"),t._v("\n非 RuntimeException：")])]),t._v(" "),s("blockquote",[s("p",[t._v("编译器会要求我们 try catch 或者 throws 处理"),s("br"),t._v("\n本质是客观因素造成的问题，比如 FileNotFoundException"),s("br"),t._v("\n写了一个程序，自动阅卷，需要读取答案的路径（用户录入），用户可能录入是一个错误的路径，所以我们要提前预案，写好发生异常之后的处理方式，这也是 java 程序健壮性的一种体现"),s("br")])]),t._v(" "),s("h2",{attrs:{id:"_23-罗列常见的-5-个运行时异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-罗列常见的-5-个运行时异常"}},[t._v("#")]),t._v(" 23.罗列常见的 5 个运行时异常")]),t._v(" "),s("p",[t._v("此类异常，编译时没有提示做异常处理，因此通常此类异常的正确理解应该是“逻辑错误”")]),t._v(" "),s("ul",[s("li",[t._v("算数异常")]),t._v(" "),s("li",[t._v("空指针")]),t._v(" "),s("li",[t._v("类型转换异常")]),t._v(" "),s("li",[t._v("数组越界")]),t._v(" "),s("li",[t._v("NumberFormateException（数字格式异常，转换失败，比如“a12”就会转换失败）")])]),t._v(" "),s("h2",{attrs:{id:"_24-罗列常见的-5-个非运行时异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-罗列常见的-5-个非运行时异常"}},[t._v("#")]),t._v(" 24.罗列常见的 5 个非运行时异常")]),t._v(" "),s("ul",[s("li",[t._v("IOException，")]),t._v(" "),s("li",[t._v("SQLException，")]),t._v(" "),s("li",[t._v("FileNotFoundException,")]),t._v(" "),s("li",[t._v("NoSuchFileException，")]),t._v(" "),s("li",[t._v("NoSuchMethodException")])]),t._v(" "),s("h2",{attrs:{id:"_25-throw-跟-throws-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-throw-跟-throws-的区别"}},[t._v("#")]),t._v(" 25.throw 跟 throws 的区别")]),t._v(" "),s("blockquote",[s("p",[t._v("throw，作用于方法内，用于主动抛出异常"),s("br"),t._v("\nthrows, 作用于方法声明上，声明该方法有可能会抛些某些异常"),s("br"),t._v("\n针对项目中，异常的处理方式，我们一般采用层层往上抛，最终通过异常处理机制统一处理（展示异常页面，或返回统一的 json 信息），自定义 异常一般继承 RunntimeException，我们去看看 Hibernate 等框架，他们的异常体系都是最终继承自 RunntimeException")])]),t._v(" "),s("h2",{attrs:{id:"_26-创建线程的方式-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-创建线程的方式-重要"}},[t._v("#")]),t._v(" 26.创建线程的方式（重要）")]),t._v(" "),s("p",[t._v("我们常说的方式有以下三种：")]),t._v(" "),s("ol",[s("li",[t._v("继承 Thread")]),t._v(" "),s("li",[t._v("实现 Runable 接口")]),t._v(" "),s("li",[t._v("实现 Callable 接口（可以获取线程执行之后的返回值）")])]),t._v(" "),s("p",[t._v("但实际后两种，更准确的理解是创建了一个可执行的任务，要采用多线程的方式执行，")]),t._v(" "),s("p",[t._v("还需要通过创建 Thread 对象来执行，比如"),s("code",[t._v("new Thread(new Runnable(){}).start();")]),t._v("这样的方式来执行。")]),t._v(" "),s("p",[t._v("在实际开发中，我们通常采用线程池的方式来完成 Thread 的创建，更好管理线程资源。")]),t._v(" "),s("p",[t._v("案例：如何正确启动线程")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"：running....."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正确启动线程的方式")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//thread.run();//调用方法并非开启新线程")]),t._v("\n        thread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("案例：实现"),s("code",[t._v("runnable")]),t._v("只是创建了一个可执行任务，并不是一个线程")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTask")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":running...."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTask")]),t._v(" task "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//task.start(); //并不能直接以线程的方式来启动")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//它表达的是一个任务，需要启动一个线程来执行")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("案例三：runnable vs callable")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTask2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("明确一点：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("本质上来说创建线程的方式就是继承 Thread")]),t._v("，就是线程池，内部也是创建好线程对象来执行任务。")]),t._v(" "),s("li",[t._v("实现"),s("code",[t._v("Runnable、callable")]),t._v("接口，本质上都是创建一个任务，还要交给 Thread 执行")])]),t._v(" "),s("h2",{attrs:{id:"_27-一个普通-main-方法的执行-是单线程模式还是多线程模式-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-一个普通-main-方法的执行-是单线程模式还是多线程模式-为什么"}},[t._v("#")]),t._v(" 27.一个普通 main 方法的执行，是单线程模式还是多线程模式？为什么？")]),t._v(" "),s("p",[t._v("因为 java 有个重要的特性，叫垃圾自动回收机制，所以答案是多线程，这里面有两部分，主线程（用户线程），垃圾回收线程 GC（守护线程）同时存在。")]),t._v(" "),s("h2",{attrs:{id:"_28-请描述线程的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-请描述线程的生命周期"}},[t._v("#")]),t._v(" 28.请描述线程的生命周期")]),t._v(" "),s("p",[t._v("一图胜千言！")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/v2-3640b7f86a072bc188199aa8bb76c271_r.jpg",alt:""}})]),t._v(" "),s("p",[t._v("上述的图有些简略，下面详细说明下，线程共有 6 种状态：")]),t._v(" "),s("p",[t._v("new，runnable，blocked，waiting，timed waiting，terminated")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当进入 synchronized 同步代码块或同步方法时，且没有获取到锁，线程就进入了 blocked 状态，直到锁被释放，重新进入 runnable 状态")])]),t._v(" "),s("li",[s("p",[t._v("当线程调用 wait()或者 join 时，线程都会进入到 waiting 状态，当调用 notify 或 notifyAll 时，或者 join 的线程执行结束后，会进入 runnable 状态")])]),t._v(" "),s("li",[s("p",[t._v("当线程调用 sleep(time)，或者 wait(time)时，进入 timed waiting 状态，")])])]),t._v(" "),s("p",[t._v("当休眠时间结束后，或者调用 notify 或 notifyAll 时会重新 runnable 状态。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("程序执行结束，线程进入 terminated 状态")])]),t._v(" "),s("h2",{attrs:{id:"_29-谈谈-sleep-和-wait-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-谈谈-sleep-和-wait-的区别"}},[t._v("#")]),t._v(" 29.谈谈 Sleep 和 wait 的区别")]),t._v(" "),s("ol",[s("li",[t._v("所属的类不同")])]),t._v(" "),s("blockquote",[s("p",[t._v("sleep 方法是定义在 Thread 上")])]),t._v(" "),s("blockquote",[s("p",[t._v("wait 方法是定义在 Object 上")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("对于锁资源的处理方式不同")])]),t._v(" "),s("blockquote",[s("p",[t._v("sleep 不会释放锁")])]),t._v(" "),s("blockquote",[s("p",[t._v("wait 会释放锁")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("使用范围")])]),t._v(" "),s("blockquote",[s("p",[t._v("sleep 可以使用在任何代码块")])]),t._v(" "),s("blockquote",[s("p",[t._v("wait 必须在同步方法或同步代码块执行")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("与 wait 配套使用的方法")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("void notify()")]),t._v(" "),s("blockquote",[s("p",[t._v("Wakes up a single thread that is waiting on this object’s monitor.\n译：唤醒在此对象监视器上等待的单个线程")])])]),t._v(" "),s("li",[s("p",[t._v("void notifyAll()")]),t._v(" "),s("blockquote",[s("p",[t._v("Wakes up all threads that are waiting on this object’s monitor.")])]),t._v(" "),s("blockquote",[s("p",[t._v("译：唤醒在此对象监视器上等待的所有线程")])])]),t._v(" "),s("li",[s("p",[t._v("void wait()")]),t._v(" "),s("blockquote",[s("p",[t._v("Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.")])]),t._v(" "),s("blockquote",[s("p",[t._v("译：导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法")])])])]),t._v(" "),s("p",[t._v("生命周期")]),t._v(" "),s("ol",[s("li",[t._v("当线程调用 wait()或者 join 时，线程都会进入到 waiting 状态，当调用 notify 或 notifyAll 时，或者 join 的线程执行结束后，会进入 runnable 状态")]),t._v(" "),s("li",[t._v("当线程调用 sleep(time)，或者 wait(time)时，进入 timed waiting 状态，\n"),s("strong",[t._v("最后，留下一个思考题，为什么 wait 要定义在 Object 中，而不定义在 Thread 中？")])])]),t._v(" "),s("p",[t._v("来解释下，我们回想下，在同步代码块中，我们说需要一个对象锁来实现多线程的互斥效果，也就是说，Java 的锁是对象级别的，而不是线程级别的。")]),t._v(" "),s("p",[s("strong",[t._v("为什么 wait 必须写在同步代码块中？")])]),t._v(" "),s("p",[t._v("原因是避免 CPU 切换到其他线程，而其他线程又提前执行了 notify 方法，那这样就达不到我们的预期（先 wait 再由其他线程来唤醒），所以需要一个同步锁来保护")]),t._v(" "),s("h2",{attrs:{id:"_30-jdk-提供的线程池有哪些-实际开发我们该怎么使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-jdk-提供的线程池有哪些-实际开发我们该怎么使用"}},[t._v("#")]),t._v(" 30. JDK 提供的线程池有哪些？实际开发我们该怎么使用？")]),t._v(" "),s("ol",[s("li",[t._v("JDK 通过接口"),s("code",[t._v("ExecutorService")]),t._v("来表示线程池，通过工具类"),s("code",[t._v("Executors")]),t._v("来创建多种线程池对象")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/v2-3cbac22f151aa728936a36a1e0ac8ca4_r.jpg",alt:""}})]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("各种线程池的特点如下：")])]),t._v(" "),s("blockquote",[s("p",[t._v("newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。")])]),t._v(" "),s("blockquote",[s("p",[t._v("newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。")])]),t._v(" "),s("blockquote",[s("p",[t._v("newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。")])]),t._v(" "),s("blockquote",[s("p",[t._v("newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("在实际开发中，我们是怎么使用的？（重点）")])]),t._v(" "),s("p",[s("strong",[t._v("实际开发中，线程资源必须通过线程池提供，不允许在应用中自行显式创建线程")])]),t._v(" "),s("blockquote",[s("p",[t._v("使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题")])]),t._v(" "),s("p",[s("strong",[t._v("实际开发中，线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式")])]),t._v(" "),s("blockquote",[s("p",[t._v("FixedThreadPool 和 SingleThreadPool，允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。")])]),t._v(" "),s("blockquote",[s("p",[t._v("CachedThreadPool 和 ScheduledThreadPool，允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM")])]),t._v(" "),s("p",[t._v("所以，综上所述，我们都会采用底层的方式来创建线程池，大家自己查阅各种线程池的源代码就可以看到他们都是采用了同一个类来创建。")]),t._v(" "),s("p",[t._v("自己查看，印象更深刻。")]),t._v(" "),s("h2",{attrs:{id:"_31-谈谈你对线程安全的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-谈谈你对线程安全的理解"}},[t._v("#")]),t._v(" 31.谈谈你对线程安全的理解？")]),t._v(" "),s("p",[s("strong",[t._v("如果这个是面试官直接问你的问题，你会怎么回答？")])])])}),[],!1,null,null,null);s.default=e.exports}}]);