(window.webpackJsonp=window.webpackJsonp||[]).push([[718],{991:function(t,s,v){"use strict";v.r(s);var a=v(14),_=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"简述-osi-七层模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述-osi-七层模型"}},[t._v("#")]),t._v(" 简述 OSI 七层模型")]),t._v(" "),s("p",[t._v("OSI 七层网络模型,自底向上描述（最好说明每个层干什么，举例网络协议，都在哪个层）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/osi-seven-level.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("物理层: 建立、维护、断开物理连接")]),t._v(" "),s("li",[t._v("数据链路层: 将二进制流 组合成 "),s("em",[t._v("帧")]),t._v("; "),s("em",[t._v("帧编码")]),t._v("和"),s("em",[t._v("误差纠正控制")])]),t._v(" "),s("li",[t._v("网络层: 提供主机间的逻辑通信；路由选择、路由及逻辑寻址;负责根据网络地址传送数据包；协议：IP, ARP, RARP, ICMP")]),t._v(" "),s("li",[t._v("传输层: 提供应用进程间的逻辑通信。负责将数据"),s("em",[t._v("可靠地")]),t._v("传送到相应的"),s("em",[t._v("端口")]),t._v("。协议：TCP，UDP")]),t._v(" "),s("li",[t._v("表示层：数据的表示、安全、压缩。")]),t._v(" "),s("li",[t._v("会话层：建立、管理、中止会话。")]),t._v(" "),s("li",[t._v("应用层: 为"),s("strong",[t._v("操作系统或网络应用程序")]),t._v("提供访问网络服务的接口。协议：FTP,HTTP,DNS")])]),t._v(" "),s("h3",{attrs:{id:"物理层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#物理层"}},[t._v("#")]),t._v(" 物理层")]),t._v(" "),s("p",[t._v("建立、维护、断开物理连接")]),t._v(" "),s("ul",[s("li",[t._v("物理接口信号线的规格；包括：形状和尺寸、引线数目和排列、固定和锁定装置等;")]),t._v(" "),s("li",[t._v("传输二进制位流的标准；包括：传输二进制位流时线路上信号电压高低、阻抗匹配情况、传输速率和距离的限制等。\n传输数据单位：比特流，二进制流 也就是所谓电流")])]),t._v(" "),s("h3",{attrs:{id:"数据链路层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据链路层"}},[t._v("#")]),t._v(" 数据链路层")]),t._v(" "),s("p",[t._v("将二进制流 组合成 "),s("em",[t._v("帧")])]),t._v(" "),s("p",[t._v("数据链路层主要有两个功能 ："),s("em",[t._v("帧编码")]),t._v(" 和"),s("em",[t._v("误差纠正控制")])]),t._v(" "),s("p",[t._v("数据链路层的主要协议有：")]),t._v(" "),s("ul",[s("li",[t._v("帧中继（Frame Relay)")]),t._v(" "),s("li",[t._v("点对点协议（Point-to-Point Protocol)")]),t._v(" "),s("li",[t._v("以太网（Ethernet)")]),t._v(" "),s("li",[t._v("高级数据链路协议(High-Level Data Link Protocol)")]),t._v(" "),s("li",[t._v("异步传输模式(Asynchronous Transfer Mode)")])]),t._v(" "),s("h3",{attrs:{id:"网络层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),s("p",[t._v("网络层：实现端端节点到端节点间的通信")]),t._v(" "),s("p",[t._v("功能：路由选择、路由及逻辑寻址")]),t._v(" "),s("p",[t._v("网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。")]),t._v(" "),s("p",[t._v("协议：")]),t._v(" "),s("ul",[s("li",[t._v("IP（IPV4 IPV6）通过 IP 地址进行路由选择")]),t._v(" "),s("li",[t._v("ARP“AddressResolutionProtocol”（地址解析协议）将 IP 地址转换为 MAC 地址")]),t._v(" "),s("li",[t._v("RARP 逆地址解析")]),t._v(" "),s("li",[t._v("ICMP 差错报告和查询\n由于 IP 协议的两个缺陷：没有差错控制和查询机制，因此产生了 ICMP。ICMP 主要是为了提高 IP 数据报成功交付的机会，在 IP 数据报传输的过程中进行差错报告和查询，比如目的主机或网络不可到达，报文被丢弃，路由阻塞，查询目的网络是否可以到达等等。")])]),t._v(" "),s("h3",{attrs:{id:"传输层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),s("p",[t._v("网络层负责根据"),s("strong",[t._v("网络地址")]),t._v("传送数据包")]),t._v(" "),s("p",[t._v("传输层负责将数据"),s("strong",[t._v("可靠地")]),t._v("传送到相应的"),s("strong",[t._v("端口")]),t._v("。")]),t._v(" "),s("p",[t._v("传输层的服务一般要经历传输连接建立阶段，数据传送阶段，传输连接释放阶段 3 个阶段才算完成一个完整的服务过程")]),t._v(" "),s("p",[t._v("在这一层，信息传送的协议数据单元称为"),s("em",[t._v("数据段")]),t._v(" 或"),s("em",[t._v("报文")])]),t._v(" "),s("p",[s("strong",[t._v("传输层")]),t._v("提供了主机应用程序进程之间的端到端的服务，基本功能如下：")]),t._v(" "),s("ul",[s("li",[t._v("分割与重组数据 （网络层发送的数据包可能是黏在一起的）")]),t._v(" "),s("li",[t._v("端口号寻址 （我要知道发送给主机的哪个端口）")]),t._v(" "),s("li",[t._v("连接管理 （建立 tcp 或 udp 连接）")]),t._v(" "),s("li",[t._v("差错控制和流量控制、纠错 （保证传输质量；拥塞控制）\n传输层要向会话层提供通信服务的可靠性，避免报文的出错、丢失、延迟时间紊乱、重复、乱序等差错。")])]),t._v(" "),s("p",[t._v("传输层既是 OSI 层模型中负责数据通信的最高层，并向高层用户屏蔽通信子网的细节。")]),t._v(" "),s("p",[t._v("协议：")]),t._v(" "),s("ul",[s("li",[t._v("传输控制协议 TCP（Transmission Control Protocol）")]),t._v(" "),s("li",[t._v("用户数据报协议 UDP（User Datagram Protocol）\n"),s("strong",[t._v("TCP 在不可靠的 IP 网络层上提供了一个可靠的传输层")])])]),t._v(" "),s("h3",{attrs:{id:"会话层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会话层"}},[t._v("#")]),t._v(" 会话层")]),t._v(" "),s("p",[t._v("建立、管理、终止会话。（在五层模型里面已经合并到了应用层）")]),t._v(" "),s("p",[t._v("对应主机进程，指本地主机与远程主机正在进行的会话")]),t._v(" "),s("p",[t._v("运输服务质量参数(QOS)等会话的属性在这一层设置(MQTT 协议中 0:最多一次，1：最少 1 次，2：只一次)")]),t._v(" "),s("h3",{attrs:{id:"表示层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表示层"}},[t._v("#")]),t._v(" 表示层")]),t._v(" "),s("p",[t._v("数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）")]),t._v(" "),s("p",[t._v("格式有，JPEG、ASCll、DECOIC、加密格式等")]),t._v(" "),s("h3",{attrs:{id:"应用层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[t._v("#")]),t._v(" 应用层")]),t._v(" "),s("p",[t._v("网络服务与最终用户的一个接口。")]),t._v(" "),s("p",[t._v("应用层为"),s("strong",[t._v("操作系统或网络应用程序")]),t._v("提供访问网络服务的接口。")]),t._v(" "),s("p",[t._v("应用层协议的代表包括：Telnet、FTP、HTTP、DNS（Domain Name System：域名系统）等。")]),t._v(" "),s("p",[t._v("简化后四层模型：物理层，网络层，传输层，应用层")]),t._v(" "),s("h2",{attrs:{id:"描述从在浏览器地址栏输入-url-到浏览器加载-中间发生了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#描述从在浏览器地址栏输入-url-到浏览器加载-中间发生了什么"}},[t._v("#")]),t._v(" 描述从在浏览器地址栏输入 URL 到浏览器加载，中间发生了什么")]),t._v(" "),s("ul",[s("li",[t._v("用户输入请求地址")]),t._v(" "),s("li",[t._v("根据请求地址获取主机地址 HOST, DNS 解析返回 IP 地址\n"),s("ul",[s("li",[t._v("先查本地缓存，本地缓存没有，依次请求根域名、顶级、二级、三级...DNS 服务器，直到找到 IP 地址")]),t._v(" "),s("li",[t._v("本地域名服务器缓存 DNS 信息，留着下次用")])])]),t._v(" "),s("li",[t._v("浏览器拿到 IP 后，就向服务器发送 http 连接请求，TCP 三次握手")]),t._v(" "),s("li",[t._v("防火墙将外网 IP 转换到内网 IP，此步骤是通过"),s("code",[t._v("NAT地址转换")])]),t._v(" "),s("li",[t._v("请求到达 LVS 服务")]),t._v(" "),s("li",[t._v("LVS 反向代理到业务服务器，服务器返回数据，流量从防火墙出去")]),t._v(" "),s("li",[t._v("浏览器接收到请求，进行处理，\n"),s("ul",[s("li",[t._v("解析请求是 2XX,正常显示；3XX，进行转发，4XX 或 5XX，显示错误")])])]),t._v(" "),s("li",[t._v("断开连接, TCP 四次挥手")])]),t._v(" "),s("h2",{attrs:{id:"ip-分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip-分类"}},[t._v("#")]),t._v(" IP 分类")]),t._v(" "),s("p",[t._v("四个级别，分别为 A 类、B 类、C 类和 D 类。分类的依据是 IP 地址的前四位：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("A 类 IP 地址是第一位为“0”的地址。A 类 IP 地址的前 8 位是网络标识，用十进制标识的话 0.0.0.0-127.0.0.0 是 A 类 IP 地址的理论范围。另外我们还可以得知，A 类 IP 地址最多只有 128 个(实际上是 126 个，下文不赘述)，每个网段内主机上限为 2 的 24 次方，也就是 16，777，214 个。")])]),t._v(" "),s("li",[s("p",[t._v("B 类 IP 地址是前两位为“10“的地址。B 类 IP 地址的前 16 位是网络标识，用十进制标识的话"),s("code",[t._v("128.0.0.0-191.255.0.0")]),t._v("是 B 类 IP 地址的范围。B 类 IP 地址的主机标记长度为 16 位，因此一个网段内可容纳主机地址上限为 65534 个。")])]),t._v(" "),s("li",[s("p",[t._v("C 类 IP 地址是前三位为“110”的地址。C 类 IP 地址的前 24 位是网络标识，用十进制标识的话"),s("code",[t._v("192.0.0.0-223.255.255.0")]),t._v("是 C 类 IP 地址的范围。C 类地址的后 8 位是主机标识，共容纳 254 个主机地址。")])]),t._v(" "),s("li",[s("p",[t._v("D 类 IP 地址是前四位为“1110”的地址。D 类 IP 地址的网络标识长 32 位，没有主机标识，因此常用于多播。")])])]),t._v(" "),s("h2",{attrs:{id:"nat-网络地址转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nat-网络地址转换"}},[t._v("#")]),t._v(" NAT 网络地址转换")]),t._v(" "),s("p",[t._v("NAT 英文全称是“Network Address Translation”，中文意思是“网络地址转换”")]),t._v(" "),s("p",[s("em",[t._v("解决公网地址不足的问题")])]),t._v(" "),s("p",[t._v("把内部私有网络地址（IP 地址）翻译成合法网络 IP 地址的技术。")]),t._v(" "),s("p",[t._v("NAT 名字很准确，网络地址转换，就是替换 IP 报文头部的地址信息")]),t._v(" "),s("p",[t._v("网络被分为私网和公网两个部分，NAT 网关设置在私网到公网的路由出口位置，双向流量必须都要经过 NAT 网关")]),t._v(" "),s("h2",{attrs:{id:"tcp-和-udp-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[t._v("#")]),t._v(" TCP 和 UDP 的区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("协议")]),t._v(" "),s("th",[t._v("连接性")]),t._v(" "),s("th",[t._v("双工性")]),t._v(" "),s("th",[t._v("可靠性")]),t._v(" "),s("th",[t._v("有序性")]),t._v(" "),s("th",[t._v("有界性")]),t._v(" "),s("th",[t._v("拥塞控制")]),t._v(" "),s("th",[t._v("传输速度")]),t._v(" "),s("th",[t._v("量级")]),t._v(" "),s("th",[t._v("头部大小")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("TCP")]),t._v(" "),s("td",[t._v("面向连接(Connection oriented)")]),t._v(" "),s("td",[t._v("全双工(1:1)")]),t._v(" "),s("td",[t._v("可靠(重传机制)")]),t._v(" "),s("td",[t._v("有序(通过 SYN 排序)")]),t._v(" "),s("td",[t._v("无边界")]),t._v(" "),s("td",[t._v("有粘包情况")]),t._v(" "),s("td",[t._v("有拥塞控制")]),t._v(" "),s("td",[t._v("传输速度慢")]),t._v(" "),s("td",[t._v("量级低")])]),t._v(" "),s("tr",[s("td",[t._v("UDP")]),t._v(" "),s("td",[t._v("无连接(Connection less)")]),t._v(" "),s("td",[t._v("n:m")]),t._v(" "),s("td",[t._v("不可靠(丢包后数据丢失)")]),t._v(" "),s("td",[t._v("无序")]),t._v(" "),s("td",[t._v("有消息边界")]),t._v(" "),s("td",[t._v("无粘包")]),t._v(" "),s("td",[t._v("无拥塞控制")]),t._v(" "),s("td",[t._v("传输速度快")]),t._v(" "),s("td",[t._v("量级高")])])])]),t._v(" "),s("p",[t._v("TCP 应用场景："),s("code",[t._v("将传输的文件分段")]),t._v("，"),s("code",[t._v("传输时需要建立会话")]),t._v("，"),s("code",[t._v("可靠传输")]),t._v("，"),s("code",[t._v("流量控制")]),t._v("；比如：下载一部电影")]),t._v(" "),s("p",[t._v("UDP 应用场景："),s("code",[t._v("一个数据包就能完成数据通信")]),t._v("，"),s("code",[t._v("不分段")]),t._v("，"),s("code",[t._v("不建立会话")]),t._v("，"),s("code",[t._v("不需要流量控制")]),t._v("，"),s("code",[t._v("不可靠传输")]),t._v("；比如：DNS 域名解析，QQ 聊天，讲课时屏幕广播（多播，广播）")]),t._v(" "),s("p",[t._v("TCP 与 UDP 最大的不同是："),s("code",[t._v("传输数据的质量")])]),t._v(" "),s("p",[s("a",{attrs:{href:"#tcp%E6%9C%89%E5%93%AA%E4%BA%9B%E6%89%8B%E6%AE%B5%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E4%BA%A4%E4%BB%98"}},[t._v("TCP 如何保证传输数据的质量？")])]),t._v(" "),s("p",[t._v("答：序列号、检验和、ACK 确认机制，流量控制，拥塞控制")]),t._v(" "),s("h2",{attrs:{id:"udp-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp-特点"}},[t._v("#")]),t._v(" UDP 特点")]),t._v(" "),s("ul",[s("li",[t._v("无连接的")]),t._v(" "),s("li",[t._v("尽最大努力交付，不可靠，不进行拥塞控制")]),t._v(" "),s("li",[t._v("面向报文的，没有拥塞控制，适合多媒体通信的要求")]),t._v(" "),s("li",[t._v("支持一对一，一对多，多对一，多对多通信")]),t._v(" "),s("li",[t._v("首部开销小，只有 8 个字节")])]),t._v(" "),s("h2",{attrs:{id:"tcp-特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-特点"}},[t._v("#")]),t._v(" TCP 特点")]),t._v(" "),s("p",[t._v("传输控制协议")]),t._v(" "),s("ul",[s("li",[t._v("面向连接的传输层协议")]),t._v(" "),s("li",[t._v("只能是点对点的")]),t._v(" "),s("li",[t._v("提供可靠交付；拥塞控制")]),t._v(" "),s("li",[t._v("提供全双工通信")]),t._v(" "),s("li",[t._v("面向字节流")])]),t._v(" "),s("h2",{attrs:{id:"tcp-有哪些手段保证可靠交付"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-有哪些手段保证可靠交付"}},[t._v("#")]),t._v(" TCP 有哪些手段保证可靠交付")]),t._v(" "),s("p",[t._v("TCP 通过"),s("code",[t._v("拆包、序列号、检验和、确认机制、重发控制、连接管理、流量控制、拥塞控制")]),t._v("实现可靠性。")]),t._v(" "),s("ol",[s("li",[t._v("拆包；应用数据被分割成 TCP 认为最适合发送的数据块。")]),t._v(" "),s("li",[t._v("序列号；TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。")]),t._v(" "),s("li",[t._v("校验和；TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。")]),t._v(" "),s("li",[t._v("去重：TCP 的接收端会丢弃重复的数据。")]),t._v(" "),s("li",[t._v("流量控制：TCP 利用"),s("strong",[t._v("可变大小的滑动窗口协议")]),t._v("实现流量控制")]),t._v(" "),s("li",[t._v("拥塞控制：当网络拥塞时，减少数据的发送。")]),t._v(" "),s("li",[t._v("超时重发机制：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")])]),t._v(" "),s("h2",{attrs:{id:"tcp-流量控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制"}},[t._v("#")]),t._v(" TCP 流量控制")]),t._v(" "),s("p",[t._v("TCP 利用"),s("strong",[t._v("可变大小的滑动窗口协议")]),t._v("实现流量控制")]),t._v(" "),s("ul",[s("li",[t._v("TCP 连接的"),s("code",[t._v("发送方")]),t._v("和"),s("code",[t._v("接收方")]),t._v("都有固定大小的缓冲空间")]),t._v(" "),s("li",[t._v("TCP 的"),s("strong",[t._v("接收端只允许发送端发送接收端缓冲区能接纳的数据")])]),t._v(" "),s("li",[t._v("当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失")])]),t._v(" "),s("h3",{attrs:{id:"具体解释滑动窗口协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体解释滑动窗口协议"}},[t._v("#")]),t._v(" 具体解释滑动窗口协议")]),t._v(" "),s("p",[t._v("发送窗口中有四个概念：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("已发送并收到确认的数据（不在发送窗口和发送缓冲区之内）")])]),t._v(" "),s("li",[s("p",[t._v("已发送但未收到确认的数据（位于发送窗口之内）")])]),t._v(" "),s("li",[s("p",[t._v("允许发送但尚未发送的数据（位于发送窗口之内）")])]),t._v(" "),s("li",[s("p",[t._v("发送窗口之外的缓冲区内暂时不允许发送的数据\n接收窗口中也有四个概念：")])]),t._v(" "),s("li",[s("p",[t._v("已发送确认并交付主机的数据（不在接收窗口和接收缓冲区之内）")])]),t._v(" "),s("li",[s("p",[t._v("未按序收到的数据（位于接收窗口之内）")])]),t._v(" "),s("li",[s("p",[t._v("允许接收的数据（位于接收窗口之内）")])]),t._v(" "),s("li",[s("p",[t._v("不允许接收的数据（位于发送窗口之内）\n"),s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/tcp-slide-window.png",alt:"滑动窗口协议"}})])])]),t._v(" "),s("p",[s("strong",[t._v("接收方通过报文告知发送方还可以发送多少数据")]),t._v("，从而保证接收方能够来得及接收数据，防止出现接收方带宽已满，但是发送方还一直发送数据的情况。")]),t._v(" "),s("h2",{attrs:{id:"tcp-拥塞控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制"}},[t._v("#")]),t._v(" TCP 拥塞控制")]),t._v(" "),s("p",[t._v("一个门限：慢启动门限 ssthresh")]),t._v(" "),s("p",[t._v("三个窗口：")]),t._v(" "),s("ul",[s("li",[t._v("接收窗口 rwnd (receive window)")]),t._v(" "),s("li",[t._v("发送窗口 swnd(send window)")]),t._v(" "),s("li",[t._v("拥塞窗口 cwnd(congestion window)")])]),t._v(" "),s("p",[t._v("出现拥塞时，网络吞吐量会随输入负荷的增大而下降，因此要进行拥塞控制。")]),t._v(" "),s("p",[t._v("TCP 拥塞控制算法（TCP congestion control algorithm），主要包括 4 个步骤：")]),t._v(" "),s("ol",[s("li",[t._v("慢启动；指数增长")]),t._v(" "),s("li",[t._v("拥塞避免；线性增长")]),t._v(" "),s("li",[t._v("拥塞发生；拥塞发生时")]),t._v(" "),s("li",[t._v("快重传和快恢复；拥塞发生后的恢复过程\n"),s("ol",[s("li",[t._v("快重传：TCP 认为这种情况太糟糕，ssthresh = cwnd /2；cwnd = 1，重新进入慢启动")]),t._v(" "),s("li",[t._v("快恢复：拥塞没那么糟糕；ssthresh = cwnd /2；cwnd = cwnd / 2，重新进入拥塞避免\n"),s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/tcp-congestion-control-algorithm.png",alt:"TCP拥塞控制算法"}})])])])]),t._v(" "),s("p",[s("strong",[t._v("慢启动（slow-start）算法原理")])]),t._v(" "),s("p",[t._v("开始发送一个报文段，收到确认后拥塞窗口翻倍。然后传输 2 个报文段，收到 2 个确认后增加拥塞窗口变成了 4 个 MSS。\n这样没经过一个 RTT，发送速率就会翻番。于是，TCP 发送的起始速率慢，但是在慢启动阶段会以指数增长。\n"),s("strong",[t._v("拥塞避免")])]),t._v(" "),s("p",[t._v("进入拥塞状态后，TCP 的 cwnd 增加速率就比较缓慢，一个 RTT 将 cwnd 的值增加一个 MSS，线性增长。")]),t._v(" "),s("p",[s("strong",[t._v("快速恢复")])]),t._v(" "),s("p",[t._v("在快速恢复中，对于引起 TCP 进入快速恢复状态的缺失报文段，对收到的每个冗余的 ACK，cwnd 的值都增加一个 MSS。\n最终，当对丢失报文段的一个 ACK 到达时，TCP 在降低 cwnd 后进入拥塞避免状态。\n当 TCP 通信开始后, 网络吞吐量会逐渐上升; 随着网络发生拥堵, 吞吐量会立刻下降;")]),t._v(" "),s("p",[s("strong",[t._v("拥塞控制")]),t._v(", 归根结底是 TCP 协议想尽可能快的把数据传输给对方, 但是又要避免给网络造成太大压力的折中方案.")]),t._v(" "),s("h2",{attrs:{id:"三次握手和四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手和四次挥手"}},[t._v("#")]),t._v(" 三次握手和四次挥手")]),t._v(" "),s("h3",{attrs:{id:"三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/tcp-three-hand-shake.png",alt:"三次握手"}})]),t._v(" "),s("ol",[s("li",[t._v("第一次握手：建立连接时，客户端发送 syn 包（syn=x）到服务器，并进入 SYN_SENT 状态，等待服务器确认")]),t._v(" "),s("li",[t._v("第二次握手：服务器收到 syn 包，必须确认客户的 SYN（ack=x+1），同时自己也发送一个 SYN 包（syn=y），即 SYN+ACK 包，此时服务器进入 SYN_RECEIVED 状态；")]),t._v(" "),s("li",[t._v("第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK(ack=y+1），客户端进入 ESTABLISHED（TCP 连接成功）状态，服务端收到客户端发来的 ACK 后，进入 ESTABLISHED 状态，完成三次握手。")])]),t._v(" "),s("h3",{attrs:{id:"为什么要三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手"}},[t._v("#")]),t._v(" 为什么要三次握手")]),t._v(" "),s("p",[t._v("不要第三次握手行不行？为什么不能用两次握手进行连接？")]),t._v(" "),s("ol",[s("li",[t._v("原因 1：没有第三次握手，服务端不知道客户端是否成功拿到了自己发送的 SYN，即不能确定客户端能收到服务端发送的消息")]),t._v(" "),s("li",[t._v("原因 2：如果使用两次握手，服务端接收客户端 SYN 后，进入 ESTABLISHED 状态；假设存在场景，客户端发起第一次连接超时，然后客户端发起第二次连接正常并传送数据断开，此时第一次连接到达服务端，这时服务端以为客户端又要建立第二次连接，进入 ESTABLISHED 状态，造成资源浪费；")])]),t._v(" "),s("h3",{attrs:{id:"四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/tcp-four-shake-hand.png",alt:"四次挥手"}})]),t._v(" "),s("ol",[s("li",[t._v("第一次挥手: 客户端数据发送完成，向服务端发送释放连接的请求。客户端进入 FIN_WAIT_1 状态。")]),t._v(" "),s("li",[t._v("第二次挥手：服务端接收到客户端的连接释放请求，会告诉应用层要释放 TCP 连接。然后发送 ACK 到客户端，然后进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不会接受来自客户端的数据了，但是由于 TCP 是全双工。所以此时服务端还可以向客户端发送数据。")]),t._v(" "),s("li",[t._v("第三次挥手：服务端如果在此时数据还没有发送完成，会继续发送，在数据发送完毕之后。服务端会向客户端发送连接释放的请求。然后服务端进入 LAST_ACK 状态。")]),t._v(" "),s("li",[t._v("第四次挥手：客户端在接受到服务端的释放请求。会向服务端在发送一个确认请求。此时客户端进入 TIME_WAIT 状态\n该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 服务端的重发请求的话，就进入 CLOSED 状态。当 客户端收到确认应答后，也便进入 CLOSED 状态。")])]),t._v(" "),s("h3",{attrs:{id:"为什么要四次挥手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要四次挥手"}},[t._v("#")]),t._v(" 为什么要四次挥手")]),t._v(" "),s("p",[s("strong",[t._v("双方数据发送完毕，都认为可以断开")])]),t._v(" "),s("ul",[s("li",[t._v('当 Server 端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉 Client 端，"你发的 FIN 报文我收到了"。')]),t._v(" "),s("li",[t._v("只有等到"),s("strong",[t._v("Server 端所有的报文都发送完")]),t._v("了，我才能发送 FIN 报文，因此不能一起发送。故需要四步握手。")])]),t._v(" "),s("h2",{attrs:{id:"客户端断连怎么处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端断连怎么处理"}},[t._v("#")]),t._v(" 客户端断连怎么处理")]),t._v(" "),s("p",[t._v("如果已经建立了连接，但是客户端突然出现故障了怎么办？")]),t._v(" "),s("p",[t._v("TCP 设有一个"),s("strong",[t._v("保活计时器")]),t._v("，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为 2 小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔 75 秒钟发送一次。若一连发送 10 个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。")]),t._v(" "),s("h2",{attrs:{id:"传输层和应用层之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输层和应用层之间的关系"}},[t._v("#")]),t._v(" 传输层和应用层之间的关系")]),t._v(" "),s("p",[t._v("传输层的协议 TCP 或 UDP 加上端口就可以标识一个应用层协议")]),t._v(" "),s("p",[s("strong",[t._v("应用层 = 传输层 + 端口")])]),t._v(" "),s("p",[t._v("常见应用层协议")]),t._v(" "),s("ul",[s("li",[t._v("http = tcp + 80")]),t._v(" "),s("li",[t._v("https = tcp + 443")]),t._v(" "),s("li",[t._v("RDP = tcp + 3389 # 远程桌面")]),t._v(" "),s("li",[t._v("ftp = tcp + 21")]),t._v(" "),s("li",[t._v("共享文件夹 = tcp+445")]),t._v(" "),s("li",[t._v("SMTP = tcp + 25 # 发邮件")]),t._v(" "),s("li",[t._v("pop3 = tcp + 110 # 收邮件")]),t._v(" "),s("li",[t._v("telnet = tcp + 23")]),t._v(" "),s("li",[t._v("dns = tcp + 53")])]),t._v(" "),s("h2",{attrs:{id:"简述-dns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述-dns"}},[t._v("#")]),t._v(" 简述 DNS")]),t._v(" "),s("p",[t._v("DNS（Domain Name System）: 域名系统")]),t._v(" "),s("p",[t._v("是"),s("em",[t._v("域名解析服务器")]),t._v("组成的"),s("em",[t._v("服务系统")])]),t._v(" "),s("h3",{attrs:{id:"dns-解析的详细过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-解析的详细过程"}},[t._v("#")]),t._v(" DNS 解析的详细过程")]),t._v(" "),s("ul",[s("li",[t._v("客户机提出域名解析请求，并将该请求发送给本地的域名服务器。")]),t._v(" "),s("li",[t._v("当本地的域名服务器收到请求后，就先查询本地的缓存，如果有该纪录项，则本地的域名服务器就直接把查询的结果返回。")]),t._v(" "),s("li",[t._v("若没有查到，则将请求发给根域 DNS 服务器，并依序从根域查找顶级域，由顶级查找二级域，二级域查找三级，直至找到要解析的地址或名字，即向客户机所在网络的 DNS 服务器发出应答信息，DNS 服务器收到应答后先在缓存中存储，然后，将解析结果发给客户机。若没有找到，则返回错误信息。")]),t._v(" "),s("li",[t._v("本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时还将结果返回给客户机。")])]),t._v(" "),s("h3",{attrs:{id:"dns-优化原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-优化原理"}},[t._v("#")]),t._v(" DNS 优化原理")]),t._v(" "),s("ul",[s("li",[t._v("DNS 缓存")]),t._v(" "),s("li",[t._v("DNS 负载均衡\n"),s("ul",[s("li",[t._v("在 DNS 服务器中为同一个主机名配置多个 IP 地址,在应答 DNS 查询时,DNS 服务器对每个查询将以 DNS 文件中主机记录的 IP 地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。")])])])]),t._v(" "),s("h3",{attrs:{id:"dns-缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns-缓存"}},[t._v("#")]),t._v(" DNS 缓存")]),t._v(" "),s("p",[t._v("我们有时会遇到一种情况：ip 可以访问，域名地址访问失败，这是怎么回事呢？")]),t._v(" "),s("p",[t._v("原因：域名解析失败，往往是因为 DNS 缓存的问题。")]),t._v(" "),s("p",[t._v("DNS 存在着多级缓存，从离浏览器的距离排序的话，有以下几种:")]),t._v(" "),s("p",[t._v("浏览器缓存，系统缓存，路由器缓存，ISP（电信运营商）缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。")]),t._v(" "),s("p",[s("em",[t._v("多级 DNS 服务器，每一级 DNS 服务器如何去缓存，缓存刷新时长?")])]),t._v(" "),s("p",[t._v("浏览器缓存")]),t._v(" "),s("p",[t._v("chrome://net-internals/#dns 这里可以看各域名的 DNS 缓存时间。Chrome 对每个域名会默认缓存 60s。")]),t._v(" "),s("p",[t._v("ISP（电信运营商）缓存")]),t._v(" "),s("p",[t._v("有些不靠谱，有些缓存服务器（不多）会忽略网站 DNS 提供的 TTL，自己设置一个较长的 TTL，\n导致顶级 DNS 更新时不能及时拿到新的 IP 地址\n"),s("em",[t._v("缓存是双刃剑，提高了获取 DNS 的速度，也会影响 DNS 在 IP 变更时不能及时更新到最新。")])]),t._v(" "),s("h2",{attrs:{id:"简述-http-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述-http-协议"}},[t._v("#")]),t._v(" 简述 http 协议")]),t._v(" "),s("p",[t._v("http 协议是在 tcp/ip 协议之上的应用层规范")]),t._v(" "),s("p",[t._v("http 请求分为 4 部分：状态行，请求头，空行，消息体")]),t._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[t._v("<method> <request-URL> <version>\n<headers>\n\n<entity-body>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("常用的四种方法：GET，POST，PUT，DELETE 用来 查，增，改，删四种操作")]),t._v(" "),s("h2",{attrs:{id:"常见请求头字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见请求头字段"}},[t._v("#")]),t._v(" 常见请求头字段")]),t._v(" "),s("ul",[s("li",[t._v("Accept ： 规定可接受的 response 的 Media type(s) 类型。 Accept: text/html")]),t._v(" "),s("li",[t._v("Authorization ： HTTP 认证的凭据（最基本的格式：该凭据是用户名+密码）。是最简单的资源访问限制的实现方法。 ；Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")]),t._v(" "),s("li",[t._v("Cache-Control ：Cache-Control 是 no-cache，是浏览器通知服务器：本地没有缓存数据; Cache-Control:max-age=259200 是通知浏览器：259200 秒之内别来烦我，自己从缓冲区中刷新")]),t._v(" "),s("li",[t._v("Content-Type ：请求体的类型 ；Content-Type: application/x-www-form-urlencoded")]),t._v(" "),s("li",[t._v("Cookie ：该字段的值会同时被存储到浏览器端；Cookie: $Version=1; Skin=new;")]),t._v(" "),s("li",[t._v('Etag:特定版本资源的标识符，通常是消息摘要。ETag: "737060cd8c284d8af7ad3082f209582d"')])]),t._v(" "),s("h2",{attrs:{id:"get-和-post-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-的区别"}},[t._v("#")]),t._v(" GET 和 POST 的区别")]),t._v(" "),s("h4",{attrs:{id:"使用上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用上"}},[t._v("#")]),t._v(" 使用上")]),t._v(" "),s("p",[t._v("GET 是安全的和幂等的")]),t._v(" "),s("div",{staticClass:"language-http get line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token request-line"}},[s("span",{pre:!0,attrs:{class:"token method property"}},[t._v("GET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token request-target url"}},[t._v("/books/?sex=man&name=Professional")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("www.example.com")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("User-Agent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Keep-Alive")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("POST 用于改变服务器上的资源")]),t._v(" "),s("div",{staticClass:"language-http post line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token request-line"}},[s("span",{pre:!0,attrs:{class:"token method property"}},[t._v("POST")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token request-target url"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token http-version property"}},[t._v("HTTP/1.1")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("www.example.com")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("User-Agent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("application/x-www-form-urlencoded")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Content-Length")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("40")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[t._v("Keep-Alive")])]),t._v("\n\nsex=man&name=Professional\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h4",{attrs:{id:"原理上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理上"}},[t._v("#")]),t._v(" 原理上")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("GET 和 POST 是 HTTP 定义的两种不同方法，本质上都是 TCP 链接，并无差别")])]),t._v(" "),s("li",[s("p",[t._v("有一个重大差别是，"),s("strong",[t._v("GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包")])]),t._v(" "),s("ul",[s("li",[t._v("对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）；")]),t._v(" "),s("li",[t._v("而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。")])])]),t._v(" "),s("li",[s("p",[t._v("但是由于 HTTP 的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。")]),t._v(" "),s("ul",[s("li",[t._v("GET 用来获取资源，POST 用来上传资源")]),t._v(" "),s("li",[t._v("GET 参数通过 URL 传递，POST 放在 URL 和 body 中")]),t._v(" "),s("li",[t._v("GET 只能有 ASCII 码的编码方式提交请求，POST 的数据编码格式没有规定")]),t._v(" "),s("li",[t._v("GET 可提交的数据量受 URL 长度限制（浏览器规定 url 长度<2k,服务器一般只处理 64k 以下的数据），POST 一般不受限制")]),t._v(" "),s("li",[t._v("GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。")]),t._v(" "),s("li",[t._v("GET 在浏览器"),s("strong",[t._v("回退时")]),t._v("是无害的，而 POST 会再次提交请求。")])])])]),t._v(" "),s("h2",{attrs:{id:"http-状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[t._v("#")]),t._v(" HTTP 状态码")]),t._v(" "),s("p",[t._v("状态码系列：")]),t._v(" "),s("ul",[s("li",[t._v("1XX：通知")]),t._v(" "),s("li",[t._v("2XX: 成功")]),t._v(" "),s("li",[t._v("3XX 重定向")]),t._v(" "),s("li",[t._v("4XX：客户端错误")]),t._v(" "),s("li",[t._v("5XX 服务端错误")])]),t._v(" "),s("p",[t._v("基本响应代码：")]),t._v(" "),s("ul",[s("li",[t._v('200("OK")\n'),s("ul",[s("li",[t._v("一切正常。实体主体中的文档（若存在的话）是某资源的表示")])])]),t._v(" "),s("li",[t._v('400("Bad Request")\n'),s("ul",[s("li",[t._v("客户端方面的问题。实体主题中的文档（若存在的话）是一个错误消息。希望客户端能够理解此错误消息，并改正问题。")])])]),t._v(" "),s("li",[t._v('500("Internal Server Error")\n'),s("ul",[s("li",[t._v("服务期方面的问题。实体主体中的文档（如果存在的话）是一个错误消息。该错误消息通常无济于事，因为客户端无法修复服务器方面的问题。")])])]),t._v(" "),s("li",[t._v('301("Moved Permanently")\n'),s("ul",[s("li",[t._v("当客户端触发的动作引起了资源 URI 的变化时发送此响应代码。另外，当客户端向一个资源的旧 URI 发送请求时，也发送此响应代码。")])])]),t._v(" "),s("li",[t._v('404("Not Found") 和 410("Gone")\n'),s("ul",[s("li",[t._v("当客户端所请求的 URI 不对应于任何资源时，发送此响应代码。404 用于服务器端不知道客户端要请求哪个资源的情况；410 用于服务器端知道客户端所请求的资源曾经存在，但现在已经不存在了的情况。")])])]),t._v(" "),s("li",[t._v('409("Conflict")\n'),s("ul",[s("li",[t._v('当客户端试图执行一个”会导致一个或多个资源处于不一致状态“的操作时，发送此响应代码。\nSOAP Web 服务只使用响应代码 200("OK")和 500("Internal Server Error")。无论是你发给 SOAP 服务器的数据有问题，还是服务器在处理数据的过程中出现问题，或者 SOAP 服务器出现内部问题，SOAP 服务器均发送 500("Internal Server Error")。')])])])]),t._v(" "),s("h2",{attrs:{id:"http-各个版本之间的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http-各个版本之间的区别"}},[t._v("#")]),t._v(" HTTP 各个版本之间的区别")]),t._v(" "),s("h3",{attrs:{id:"http0-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http0-9"}},[t._v("#")]),t._v(" http0.9")]),t._v(" "),s("p",[t._v("最初的 http 版本，"),s("strong",[t._v("仅支持 get 方法，只能传输纯文本内容")])]),t._v(" "),s("p",[t._v("请求结束服务后会给客户端返回一个 HTML 格式的字符串，然后由浏览器自己渲染。")]),t._v(" "),s("p",[t._v("http0.9 是典型的无状态连接")]),t._v(" "),s("h3",{attrs:{id:"http1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" http1.0")]),t._v(" "),s("ul",[s("li",[t._v("本质上支持长连接，但是"),s("strong",[t._v("默认还是短连接")]),t._v("，增加了"),s("strong",[t._v("keep-alive")]),t._v("关键字来由短链接变成长连接。")]),t._v(" "),s("li",[t._v("HTTP 的请求和回应格式也发生了变化，除了要传输的数据之外，每次通信都包含头信息，用来描述一些信息。")]),t._v(" "),s("li",[t._v("还增加了状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等")])]),t._v(" "),s("h3",{attrs:{id:"http1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" http1.1")]),t._v(" "),s("ul",[s("li",[t._v("HTTP1.1 最大的变化就是引入了长链接，也就是"),s("strong",[t._v("TCP 链接默认是不关闭的")]),t._v("可以"),s("strong",[t._v("被多个请求复用")]),t._v("。")]),t._v(" "),s("li",[t._v("客户端或者服务器如果长时间发现对方没有活动就会"),s("strong",[t._v("关闭链接")]),t._v("，但是规范的做法是客户端在最后一个请求的时候要求服务器关闭链接。")]),t._v(" "),s("li",[s("strong",[t._v("节约带宽")]),t._v("，HTTP1.1 支持"),s("strong",[t._v("只发送 header 头")]),t._v("信息不带任何 body 信息，如果服务器认为客户端有权限请求指定数据那就返回 100，没有就返回 401，当客户端收到 100 的时候可以才把要请求的信息发给服务器")]),t._v(" "),s("li",[t._v("并且 1.1 还支持了"),s("strong",[t._v("请求部分内容")]),t._v("，如果当前客户端已经有一部分资源了，只需要向服务器请求另外的部分资源即可，这也是支持文件"),s("strong",[t._v("断点续传")]),t._v("的基础。")])]),t._v(" "),s("h3",{attrs:{id:"http2-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("多路复用")]),t._v("：在一个连接里面并发处理请求，不像 http1.1 在一个 tcp 连接中各个请求是串行的。花销很大")]),t._v(" "),s("li",[t._v("在 1.0 版本后增加了 header 头信息，2.0 版本通过算法把"),s("strong",[t._v("header 进行了压缩")]),t._v("这样数据体积就更小，在网络上传输就更快。")]),t._v(" "),s("li",[s("strong",[t._v("服务端有了推送功能")]),t._v("，将客户端感兴趣的东西推给客户端，当客户端请求这些时，直接去缓存中取就行。")])]),t._v(" "),s("h2",{attrs:{id:"websocket-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket-协议"}},[t._v("#")]),t._v(" WebSocket 协议")]),t._v(" "),s("h3",{attrs:{id:"底层原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层原理"}},[t._v("#")]),t._v(" 底层原理")]),t._v(" "),s("ul",[s("li",[t._v("基于 TCP 传输协议，并复用 HTTP 的握手通道")])]),t._v(" "),s("h3",{attrs:{id:"有哪些优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些优点"}},[t._v("#")]),t._v(" 有哪些优点")]),t._v(" "),s("p",[t._v("对比参照物是 HTTP 协议，概括地说就是：支持双向通信，更灵活，更高效，可扩展性更好。")]),t._v(" "),s("ul",[s("li",[t._v("支持双向通信，实时性更强。")]),t._v(" "),s("li",[t._v("更好的二进制支持。")]),t._v(" "),s("li",[t._v("较少的控制开销。连接创建后，ws 客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有 2~10 字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的 4 字节的掩码。而 HTTP 协议每次通信都需要携带完整的头部。")]),t._v(" "),s("li",[t._v("支持扩展。ws 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）")])]),t._v(" "),s("h3",{attrs:{id:"连接建立过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接建立过程"}},[t._v("#")]),t._v(" 连接建立过程")]),t._v(" "),s("ol",[s("li",[t._v("首先，WebSocket 复用了 HTTP 的握手通道")]),t._v(" "),s("li",[t._v("具体是指：客户端通过 HTTP 请求与 WebSocket 服务端协商升级协议。协议升级完成后，后续的数据交换则遵照 WebSocket 的协议。")])]),t._v(" "),s("h4",{attrs:{id:"客户端-申请协议升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端-申请协议升级"}},[t._v("#")]),t._v(" 客户端：申请协议升级")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("GET / HTTP/1.1\nHost: localhost:8080\nOrigin: http://127.0.0.1:3000\nConnection: Upgrade\nUpgrade: websocket\nSec-WebSocket-Version: 13\nSec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("ul",[s("li",[t._v("Connection: Upgrade：表示要升级协议")]),t._v(" "),s("li",[t._v("Upgrade: websocket：表示要升级到 websocket 协议。")]),t._v(" "),s("li",[t._v("Sec-WebSocket-Version: 13：表示 websocket 的版本。如果服务端不支持该版本，需要返回一个 Sec-WebSocket-Versionheader，里面包含服务端支持的版本号。")]),t._v(" "),s("li",[t._v("Sec-WebSocket-Key：与后面服务端响应首部的 Sec-WebSocket-Accept 是配套的，提供基本的防护，比如恶意的连接，或者无意的连接")])]),t._v(" "),s("h4",{attrs:{id:"服务端-响应协议升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端-响应协议升级"}},[t._v("#")]),t._v(" 服务端：响应协议升级")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("HTTP/1.1 101 Switching Protocols\nConnection:Upgrade\nUpgrade: websocket\nSec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("状态代码 101 表示协议切换，后续的数据交互都按照新的协议来。")]),t._v(" "),s("h4",{attrs:{id:"具体步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体步骤"}},[t._v("#")]),t._v(" 具体步骤")]),t._v(" "),s("p",[t._v("服务器端：")]),t._v(" "),s("ol",[s("li",[t._v("创建 socket，绑定端口")]),t._v(" "),s("li",[t._v("开始监听（listen）")]),t._v(" "),s("li",[t._v("等待并接受客户端连接请求，返回新的 socket（accept）")]),t._v(" "),s("li",[t._v("由新 socket 与客户端进行 io 交互。")]),t._v(" "),s("li",[t._v("关闭连接（可能主动，也可能被动）")])]),t._v(" "),s("p",[t._v("客户端：")]),t._v(" "),s("ol",[s("li",[t._v("创建 socket；先三次握手，然后发起"),s("strong",[t._v("申请协议升级请求")])]),t._v(" "),s("li",[t._v("连接服务器（connect） 与服务器进行 io 交互")]),t._v(" "),s("li",[t._v("关闭连接（可能主动，也可能被动） 以上是基于 tcp 协议的过程，udp 更简单。")])]),t._v(" "),s("h3",{attrs:{id:"数据帧格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据帧格式"}},[t._v("#")]),t._v(" 数据帧格式")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n +-+-+-+-+-------+-+-------------+-------------------------------+\n |F|R|R|R| opcode|M| Payload len |    Extended payload length    |\n |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |\n |N|V|V|V|       |S|             |   (if payload len==126/127)   |\n | |1|2|3|       |K|             |                               |\n +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +\n |     Extended payload length continued, if payload len == 127  |\n + - - - - - - - - - - - - - - - +-------------------------------+\n |                               |Masking-key, if MASK set to 1  |\n +-------------------------------+-------------------------------+\n | Masking-key (continued)       |          Payload Data         |\n +-------------------------------- - - - - - - - - - - - - - - - +\n :                     Payload Data continued ...                :\n + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n |                     Payload Data continued ...                |\n +---------------------------------------------------------------+\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("ul",[s("li",[t._v("FIN：1 个比特。1，表示这是消息（message）的最后一个分片（fragment），0，表示不是是消息（message）的最后一个分片（fragment）。")]),t._v(" "),s("li",[t._v("Opcode: 4 个比特。操作代码\n"),s("ul",[s("li",[t._v("%x0：表示一个延续帧。当 Opcode 为 0 时，表示本次数据传输采用了数据分片，当前收到的数据帧为其中一个数据分片。")]),t._v(" "),s("li",[t._v("%x1：表示这是一个文本帧（frame）")]),t._v(" "),s("li",[t._v("%x2：表示这是一个二进制帧（frame）")]),t._v(" "),s("li",[t._v("%x8：表示连接断开。")]),t._v(" "),s("li",[t._v("%x9：表示这是一个 ping 操作。")]),t._v(" "),s("li",[t._v("%xA：表示这是一个 pong 操作。")])])])]),t._v(" "),s("h3",{attrs:{id:"连接保持和心跳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接保持和心跳"}},[t._v("#")]),t._v(" 连接保持和心跳")]),t._v(" "),s("ul",[s("li",[t._v("发送方->接收方：ping")]),t._v(" "),s("li",[t._v("接收方->发送方：pong\nping、pong 的操作，对应的是 WebSocket 的两个控制帧，opcode 分别是 0x9、0xA。")])]),t._v(" "),s("h3",{attrs:{id:"安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),s("h4",{attrs:{id:"sec-websocket-key-sec-websocket-accept"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sec-websocket-key-sec-websocket-accept"}},[t._v("#")]),t._v(" Sec-WebSocket-Key/Sec-WebSocket-Accept")]),t._v(" "),s("p",[t._v("Sec-WebSocket-Accept 根据客户端请求首部的 Sec-WebSocket-Key 计算出来。\n计算公式为：")]),t._v(" "),s("ol",[s("li",[t._v("将 Sec-WebSocket-Key 跟 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 拼接。")]),t._v(" "),s("li",[t._v("通过 SHA1 计算出摘要，并转成 base64 字符串。\n"),s("strong",[t._v("Sec-WebSocket-Key/Sec-WebSocket-Accept")]),t._v("主要作用在于"),s("strong",[t._v("提供基础的防护，减少恶意连接、意外连接")]),t._v("。")])]),t._v(" "),s("h4",{attrs:{id:"数据掩码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据掩码"}},[t._v("#")]),t._v(" 数据掩码")]),t._v(" "),s("p",[t._v("增强协议的安全性, 但并不是为了防止数据泄密，而是为了防止"),s("strong",[t._v("早期版本的协议")]),t._v("中存在的代理缓存污染攻击（proxy cache poisoning attacks）等问题。")]),t._v(" "),s("h5",{attrs:{id:"代理缓存污染攻击-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理缓存污染攻击-todo"}},[t._v("#")]),t._v(" 代理缓存污染攻击(TODO)")]),t._v(" "),s("h4",{attrs:{id:"鉴权授权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鉴权授权"}},[t._v("#")]),t._v(" 鉴权授权")]),t._v(" "),s("p",[t._v("在 HTTP 切换到 Socket 之前，没有什么好的机会进行鉴权，因为在这个时间节点，报文（或者说请求的 Headers）必须遵守协议规范。但这不妨碍我们在协议切换完成后，进行鉴权授权：")]),t._v(" "),s("h4",{attrs:{id:"鉴权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#鉴权"}},[t._v("#")]),t._v(" 鉴权")]),t._v(" "),s("ul",[s("li",[t._v("在连接建立时，检查连接的 HTTP 请求头信息（比如 cookies 中关于用户的身份信息）")]),t._v(" "),s("li",[t._v("在每次接收到消息时，检查连接是否已授权过，及授权是否过期")]),t._v(" "),s("li",[t._v("以上两点，只要答案为否，则服务端主动关闭 socket 连接")])]),t._v(" "),s("h4",{attrs:{id:"授权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#授权"}},[t._v("#")]),t._v(" 授权")]),t._v(" "),s("p",[t._v("服务端在连接建立时，颁发一个 ticket 给 peer 端，这个 ticket 可以包含但不限于：")]),t._v(" "),s("ul",[s("li",[t._v("peer 端的 uniqueId（可以是 ip，userid，deviceid…任一种具备唯一性的键）")]),t._v(" "),s("li",[t._v("过期时间的 timestamp")]),t._v(" "),s("li",[t._v("token：由以上信息生成的哈希值，最好能加盐")])]),t._v(" "),s("h2",{attrs:{id:"cdn-的作用和原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cdn-的作用和原理"}},[t._v("#")]),t._v(" CDN 的作用和原理")]),t._v(" "),s("p",[t._v("CDN(Content Delivery Network):内容分发网络")]),t._v(" "),s("p",[t._v("CDN 是利用"),s("strong",[t._v("DNS 的重定向技术")]),t._v("，DNS 服务器会返回一个"),s("strong",[t._v("跟用户最接近的点")]),t._v("的 IP 地址给用户，CDN 节点的服务器负责响应用户的请求，提供所需的内容。")]),t._v(" "),s("h2",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" cookie")]),t._v(" "),s("p",[t._v("三种 web 存储：localStorage、sessionStorage、cookie")]),t._v(" "),s("p",[t._v("cookie 定义：http 是无状态协议，cookie 就产生了，来标识会话，维护状态")]),t._v(" "),s("p",[t._v("cookie 就是一种浏览器管理状态的一个文件，其实就是一个小数据库的表结构，包括：name、value、Domain、path、expires, size 等等属性")]),t._v(" "),s("h3",{attrs:{id:"cookie-不可跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-不可跨域"}},[t._v("#")]),t._v(" cookie 不可跨域")]),t._v(" "),s("p",[t._v("不可跨域性，就是不能在不同的域名下用，每个 cookie 都会绑定单一的域名")]),t._v(" "),s("h3",{attrs:{id:"cookie-的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的属性"}},[t._v("#")]),t._v(" cookie 的属性")]),t._v(" "),s("ul",[s("li",[t._v("name")]),t._v(" "),s("li",[t._v("value: 必须被 URL 编码")]),t._v(" "),s("li",[t._v("domain\n"),s("ul",[s("li",[t._v("cookie 绑定的域名，如果没有设置，就会自动绑定到执行语句的当前域")]),t._v(" "),s("li",[t._v("统一个域名下的二级域名也是不可以交换使用 cookie 的，比如，你设置www.baidu.com和image.baidu.com,依旧是不能公用的")])])]),t._v(" "),s("li",[t._v("path: 默认是'/'，这个值匹配的是 web 的路由;当你路径设置成/blog 的时候，其实它会给/blog、/blogabc 等等的绑定 cookie")]),t._v(" "),s("li",[t._v("Expires/max-age\n"),s("ul",[s("li",[t._v("Max-Age，是以秒为单位的，Max-Age 为正数时，cookie 会在 Max-Age 秒之后，被删除")]),t._v(" "),s("li",[t._v("当 Max-Age 为负数时，表示的是临时储存，不会生出 cookie 文件，只会存在浏览器内存中，且只会在打开的浏览器窗口或者子窗口有效，一旦浏览器关闭，cookie 就会消失")]),t._v(" "),s("li",[t._v("当 Max-Age 为 0 时，又会发生什么呢，删除 cookie，因为 cookie 机制本身没有设置删除 cookie，失效的 cookie 会被浏览器自动从内存中删除，所以，它实现的就是让 cookie 失效。")])])]),t._v(" "),s("li",[t._v("secure: 当这个属性设置为 true 时，此 cookie 只会在 https 和 ssl 等安全协议下传输")]),t._v(" "),s("li",[t._v("HttpOnly(重要): 如果这个属性设置为 true，就不能通过 js 脚本来获取 cookie 的值，能有效的防止 xss 攻击,")])]),t._v(" "),s("h3",{attrs:{id:"服务端设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务端设置"}},[t._v("#")]),t._v(" 服务端设置")]),t._v(" "),s("p",[t._v("通过 Set-Cookie 用键值对形式设置请求头")]),t._v(" "),s("h2",{attrs:{id:"oauth2-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-0"}},[t._v("#")]),t._v(" OAuth2.0")]),t._v(" "),s("p",[t._v("OAuth 授权所需信息：")]),t._v(" "),s("ol",[s("li",[t._v("应用名称")]),t._v(" "),s("li",[t._v("应用网站")]),t._v(" "),s("li",[t._v("重定向 URI 或回调 URL（redirect_uri)")]),t._v(" "),s("li",[t._v("客户端标识 client_id")]),t._v(" "),s("li",[t._v("客户端密钥 client_secret")])]),t._v(" "),s("p",[t._v("授权成功后，服务器 回调请求 redirect_uri，客户端通过下发的 code 和自己的 secret 请求服务器得到 access_token")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1zt41127hX",target:"_blank",rel:"noopener noreferrer"}},[t._v("B 站课程"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),s("p",[t._v("跨域是针对浏览器来说的，浏览器的同源策略 (地址里面的"),s("strong",[t._v("协议、域名和端口号")]),t._v("均相同)")]),t._v(" "),s("p",[s("strong",[t._v("浏览器的同源策略")]),t._v(": 一个请求在浏览器端发送出去后，是会收到返回值响应的，只不过浏览器在解析这个请求的响应之后，发现不属于浏览器的同源策略(地址里面的协议、域名和端口号均相同)，会进行拦截。如果是在"),s("code",[t._v("curl")]),t._v("里面发送一个请求，都是没有跨域这样一个概念的")]),t._v(" "),s("h3",{attrs:{id:"基于-http-协议层面的几种解决办法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-http-协议层面的几种解决办法"}},[t._v("#")]),t._v(" 基于 http 协议层面的几种解决办法")]),t._v(" "),s("ul",[s("li",[t._v("设置"),s("code",[t._v("Access-Control-Allow-Origin")])]),t._v(" "),s("li",[t._v("jsonp")]),t._v(" "),s("li",[t._v("CORS 预请求")])]),t._v(" "),s("h4",{attrs:{id:"设置-access-control-allow-origin-headers-methods-请求头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置-access-control-allow-origin-headers-methods-请求头"}},[t._v("#")]),t._v(" 设置 Access-Control-Allow-Origin\\Headers\\Methods 请求头")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Headers"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nres"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Methods"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET, POST, PUT, OPTIONS"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("设置为"),s("code",[t._v("*")]),t._v("表示，可以接收任意域名的访问；")]),t._v(" "),s("li",[t._v("也可以设置为特定域名访问")]),t._v(" "),s("li",[t._v("如果有"),s("code",[t._v("多个域名")]),t._v("访问可以在服务端动态设置")])]),t._v(" "),s("h4",{attrs:{id:"jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" jsonp")]),t._v(" "),s("p",[t._v("浏览器是允许像 link、img、script 标签在路径上加载一些内容进行请求，是允许跨域的，\n那么 jsonp 的实现原理就是在 script 标签里面加载了一个链接，去访问服务器的某个请求，返回内容。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://127.0.0.1:3011/xxx"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"cors-预请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors-预请求"}},[t._v("#")]),t._v(" CORS 预请求")]),t._v(" "),s("p",[t._v("“需预检的请求”要求必须首先使用"),s("code",[t._v("OPTIONS")]),t._v('方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。')]),t._v(" "),s("h2",{attrs:{id:"ssl-加密的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssl-加密的过程"}},[t._v("#")]),t._v(" ssl 加密的过程")]),t._v(" "),s("p",[t._v("https 是 http + ssl 或 tls")]),t._v(" "),s("p",[t._v("HTTPS 的加密解密方式是"),s("strong",[t._v("非对称加密与对称加密的结合")])]),t._v(" "),s("p",[t._v("SSL 全名为"),s("code",[t._v("Secure Sockets Layer")]),t._v("; TLS(Transport Layer Security); 传输层安全协议。")]),t._v(" "),s("p",[t._v("两种加密方式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对称加密(共享密钥加密): 加密和解密同用一个密钥。加密时就必须将密钥传送给对方。")])]),t._v(" "),s("li",[s("p",[t._v("非对称密钥加密: 使用一对非对称的密钥。一把叫做私有密钥，一把叫做公开密钥。私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。\n非对称加密过程：")])]),t._v(" "),s("li",[s("p",[t._v("A：B，你好，我想向你发一段消息，请你把你的公钥给我")])]),t._v(" "),s("li",[s("p",[t._v("B：好的，我的公钥是：xxxxxxx。")])]),t._v(" "),s("li",[s("p",[t._v("A：好的，我收到了你的公钥，我给你发送的消息经过你的公钥加密后是：yyyyyyy。")])]),t._v(" "),s("li",[s("p",[t._v("B：收到，我现在用我的密钥来解密看看。\n由于"),s("strong",[t._v("非对称加密算法")]),t._v("复杂度和计算量大，"),s("strong",[t._v("对称加密")]),t._v("效率高，SSL 就将这两种加密算法混合着用，这样安全和效率就都能保证了。其中具体的过程如下：")])])]),t._v(" "),s("p",[t._v("SSL 加密过程（非对称加密算法 + 对称加密）：")]),t._v(" "),s("ol",[s("li",[t._v("客户端 A 给出 支持的 SSL 版本+一个随机数+自己支持的加密方式")]),t._v(" "),s("li",[t._v("服务端 B 接收到这些信息后确认加密方式+自己的安全证书+一个随机数发给 A")]),t._v(" "),s("li",[t._v("客户端 A 确认"),s("strong",[t._v("数字证书")]),t._v("（验证服务端身份，防止中间人攻击）有效性，然后生成一个随机数，并将这个随机数用 B 的数字证书公钥加密后发送给 B。")]),t._v(" "),s("li",[t._v("服务端 B 使用自己的私钥解密这个随机数")]),t._v(" "),s("li",[t._v("A 和 B 通过第二步确定的加密方法将前三个随机数生成一个对话密钥（对称加密），用来接下来的通信")])]),t._v(" "),s("h3",{attrs:{id:"如何开启-https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何开启-https"}},[t._v("#")]),t._v(" 如何开启 HTTPS")]),t._v(" "),s("p",[t._v("申请一张 SSL 证书，然后将 SSL 证书部署到服务器端，开启 443 端口，就可以实现 HTTPS 访问了")]),t._v(" "),s("h3",{attrs:{id:"如何验证数字证书的有效性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何验证数字证书的有效性"}},[t._v("#")]),t._v(" 如何验证数字证书的有效性")]),t._v(" "),s("h4",{attrs:{id:"数字证书有效期验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字证书有效期验证"}},[t._v("#")]),t._v(" 数字证书有效期验证")]),t._v(" "),s("p",[t._v("证书的使用时间要在起始时间和结束时间之内")]),t._v(" "),s("h4",{attrs:{id:"根证书验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根证书验证"}},[t._v("#")]),t._v(" 根证书验证")]),t._v(" "),s("p",[t._v("普通的证书一般包括三部分：用户信息，用户公钥，以及 CA 签名")]),t._v(" "),s("p",[t._v("要验证这张证书就需要验证 CA 签名的真伪。那么就需要 CA 公钥。而 CA 公钥存在于另外一张证书（称这张证书是对普通证书签名的证书）中。因此我们又需要验证这另外一张证书的真伪。因此又需要验证另另外证书（称这张证书是对另外一张证书签名的证书）的真伪。依次往下回溯，就得到一条证书链。那么这张证书链从哪里结束呢？就是在根证书结束（即验证到根证书结束）。根证书是个很特别的证书，它是 CA 中心自己给自己签名的证书（即这张证书是用 CA 公钥对这张证书进行签名）。信任这张证书，就代表信任这张证书下的证书链。")]),t._v(" "),s("p",[t._v("所有用户在使用自己的证书之前必须先下载根证书。")]),t._v(" "),s("p",[t._v("所谓根证书验证就是："),s("strong",[t._v("用根证书公钥来验证该证书的颁发者签名")]),t._v("。所以首先必须要有根证书，并且根证书必须在受信任的证书列表（即信任域）。")]),t._v(" "),s("p",[t._v("数字证书的信任是"),s("strong",[t._v("基于对 CA 根证书的信任的")])]),t._v(" "),s("h4",{attrs:{id:"crl-验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crl-验证"}},[t._v("#")]),t._v(" CRL 验证")]),t._v(" "),s("p",[t._v("CRL 是经过 CA 签名的证书作废列表，用于证书冻结和撤销。一般来说证书中有 CRL 地址，供 HTTP 或者 LDAP 方式访问，通过解析可得到 CRL 地址，然后下载 CRL 进行验证。")]),t._v(" "),s("h2",{attrs:{id:"中间人攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),s("p",[t._v("定义："),s("strong",[t._v("中间人攻击是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。")])]),t._v(" "),s("p",[t._v("代理人攻击，在客户端和服务端之间做一层代理，获取两边信任，进行攻击")]),t._v(" "),s("p",[t._v("防范手段：https + 可信任数字证书")]),t._v(" "),s("h2",{attrs:{id:"xss-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击"}},[t._v("#")]),t._v(" XSS 攻击")]),t._v(" "),s("p",[t._v("跨站脚本攻击: 就是攻击者想尽一切办法"),s("strong",[t._v("将可以执行的代码注入到网页")]),t._v("中。")]),t._v(" "),s("p",[t._v("XSS 的全称是 "),s("code",[t._v("Cross Site Scripting")]),t._v(" 也就是跨站脚本，当目标网站目标用户浏览器渲染 HTML 文档的过程中，出现了不被预期的脚本指令并执行时，XSS 就发生了")]),t._v(" "),s("p",[t._v("对于 XSS 攻击来说，通常有两种方式可以用来防御:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("转义字符")])]),t._v(" "),s("li",[s("strong",[t._v("CSP(Content-Security-Policy)建立白名单")])])]),t._v(" "),s("h3",{attrs:{id:"转义字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[t._v("#")]),t._v(" 转义字符")]),t._v(" "),s("p",[t._v("用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义")]),t._v(" "),s("p",[s("code",[t._v("escape('<script>alert(1)<\/script>')")]),t._v(" => "),s("code",[t._v("&lt;script&gt;alert(1)&lt;&#x2F;script&gt;")])]),t._v(" "),s("p",[t._v("对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xss "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xss"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" html "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xss")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\'')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"csp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csp"}},[t._v("#")]),t._v(" CSP")]),t._v(" "),s("p",[t._v("CSP 本质上就是"),s("strong",[t._v("建立白名单")]),t._v("，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。")]),t._v(" "),s("p",[t._v("两种方式来开启 CSP：")]),t._v(" "),s("ol",[s("li",[t._v("设置 HTTP Header 中的 ==Content-Security-Policy==")]),t._v(" "),s("li",[t._v("设置 ==meta== 标签的方式 ====")])]),t._v(" "),s("h4",{attrs:{id:"以设置-http-header-来举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#以设置-http-header-来举例"}},[t._v("#")]),t._v(" 以设置 HTTP Header 来举例")]),t._v(" "),s("ol",[s("li",[t._v("只允许加载本站资源 "),s("code",[t._v("Content-Security-Policy: default-src ‘self’")])]),t._v(" "),s("li",[t._v("只允许加载 HTTPS 协议图片 "),s("code",[t._v("Content-Security-Policy: img-src https://*")])]),t._v(" "),s("li",[t._v("允许加载任何来源框架 "),s("code",[t._v("Content-Security-Policy: child-src 'none'")])])]),t._v(" "),s("h2",{attrs:{id:"csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[t._v("#")]),t._v(" CSRF 攻击")]),t._v(" "),s("p",[s("code",[t._v("CSRF（Cross-site request forgery）")]),t._v("，中文名称："),s("strong",[t._v("跨站请求伪造")]),t._v("，也被称为："),s("code",[t._v("one click attack/session riding")]),t._v("，缩写为：CSRF/XSRF。")]),t._v(" "),s("p",[t._v("本质："),s("strong",[t._v("攻击者盗用了你的身份，以你的名义发送恶意请求")])]),t._v(" "),s("p",[t._v("手段："),s("strong",[t._v("攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑")])]),t._v(" "),s("p",[t._v("CSRF 能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。")]),t._v(" "),s("h3",{attrs:{id:"防御手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御手段"}},[t._v("#")]),t._v(" 防御手段")]),t._v(" "),s("ul",[s("li",[t._v("验证 Referer；（服务端做 Referer 检查，阻止第三方网站请求接口；也不是万无一失的，发请求时我们可以篡改 Referer 的值）")]),t._v(" "),s("li",[t._v("修改数据的敏感的操作应该使用 POST；（攻击者也可以构造 form 提交，仅仅使用 POST 远远不够）")]),t._v(" "),s("li",[t._v("请求时附带验证信息，比如验证码和 token(csrftoken 验证)")]),t._v(" "),s("li",[t._v("csrftoken 验证\n"),s("ul",[s("li",[t._v("在 HTTP 请求中以參数的形式添加一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，假设请求中没有 token 或者 token 内容不对，则觉得可能是 CSRF 攻击而拒绝该请求。")]),t._v(" "),s("li",[t._v("csrftoken 产生的机制：客户端与服务端 指定 token 产生规则，客户端发送请求时带上自己生成的 token；隐患：客户端被破解（反编译等）无法防范；")])])])])])}),[],!1,null,null,null);s.default=_.exports}}]);