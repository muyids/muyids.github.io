(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{287:function(e,r,o){"use strict";o.r(r);var t=o(14),v=Object(t.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("CSRF 概念：CSRF 跨站点请求伪造(Cross—Site Request Forgery)")]),e._v(" "),r("p",[e._v("攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，\n比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。")]),e._v(" "),r("h2",{attrs:{id:"csrf-攻击攻击原理及过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击攻击原理及过程"}},[e._v("#")]),e._v(" CSRF 攻击攻击原理及过程")]),e._v(" "),r("p",[e._v("Web A 为存在 CSRF 漏洞的网站，Web B 为攻击者构建的恶意网站，User C 为 Web A 网站的合法用户。")]),e._v(" "),r("ol",[r("li",[e._v("用户 C 打开浏览器，访问受信任网站 A，输入用户名和密码请求登录网站 A；")]),e._v(" "),r("li",[e._v("在用户信息通过验证后，网站 A 产生 Cookie 信息并返回给浏览器，此时用户登录网站 A 成功，可以正常发送请求到网站 A；")]),e._v(" "),r("li",[e._v("用户未退出网站 A 之前，在同一浏览器中，打开一个 TAB 页访问网站 B；")]),e._v(" "),r("li",[e._v("网站 B 接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点 A；")]),e._v(" "),r("li",[e._v("浏览器在接收到这些攻击性代码后，根据网站 B 的请求，在用户不知情的情况下携带 Cookie 信息，向网站 A 发出请求。\n网站 A 并不知道该请求其实是由 B 发起的，所以会根据用户 C 的 Cookie 信息以 C 的权限处理该请求，导致来自网站 B 的恶意代码被执行。")])]),e._v(" "),r("h2",{attrs:{id:"csrf-攻击实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击实例"}},[e._v("#")]),e._v(" csrf 攻击实例")]),e._v(" "),r("p",[e._v("受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 http://bank.example/withdraw?account=bob&amount=1000000&for=bob2\n可以使 Bob 把 1000000 的存款转到 bob2 的账号下。\n通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。")]),e._v(" "),r("p",[e._v("黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。\nMallory 可以自己发送一个请求给银行：http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory。\n但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。")]),e._v(" "),r("p",[e._v("这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，\n在网站中放入如下代码：src=”http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory”，\n并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，\n而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。\n但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，\n浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，\n钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，\n即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。\n而 Mallory 则可以拿到钱后逍遥法外。")]),e._v(" "),r("h2",{attrs:{id:"csrf-漏洞检测"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-漏洞检测"}},[e._v("#")]),e._v(" CSRF 漏洞检测")]),e._v(" "),r("p",[e._v("检测 CSRF 漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉"),r("strong",[e._v("Referer 字段")]),e._v("后再重新提交，如果该提交还有效，那么基本上可以确定存在 CSRF 漏洞。")]),e._v(" "),r("p",[e._v("随着对 CSRF 漏洞研究的不断深入，不断涌现出一些专门针对 CSRF 漏洞进行检测的工具，如 CSRFTester，CSRF Request Builder 等。")]),e._v(" "),r("p",[e._v("以 CSRFTester 工具为例，CSRF 漏洞检测工具的测试原理如下：\n使用 CSRFTester 进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，\n然后通过在 CSRFTester 中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。\n如果修改后的测试请求成功被网站服务器接受，则说明存在 CSRF 漏洞，当然此款工具也可以被用来进行 CSRF 攻击。")]),e._v(" "),r("h2",{attrs:{id:"防御-csrf-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防御-csrf-攻击"}},[e._v("#")]),e._v(" 防御 CSRF 攻击")]),e._v(" "),r("p",[e._v("目前防御 CSRF 攻击主要有三种策略：")]),e._v(" "),r("ul",[r("li",[e._v("尽量使用 POST，限制 GET")]),e._v(" "),r("li",[e._v("加验证码")]),e._v(" "),r("li",[e._v("验证 HTTP Referer 字段")]),e._v(" "),r("li",[e._v("在请求地址中添加 token 并验证")]),e._v(" "),r("li",[e._v("在 HTTP 头中自定义属性并验证")])]),e._v(" "),r("p",[r("strong",[e._v("尽量使用 POST，限制 GET")])]),e._v(" "),r("p",[e._v("GET 接口太容易被拿来做 CSRF 攻击。接口最好限制为 POST 使用，GET 则无效，降低攻击风险。")]),e._v(" "),r("p",[e._v("当然 POST 并不是万无一失，攻击者只要构造一个 form 就可以，但需要在第三方页面做，这样就增加暴露的可能性。")]),e._v(" "),r("p",[r("strong",[e._v("加验证码")])]),e._v(" "),r("p",[e._v("验证码，强制用户必须与应用进行交互，才能完成最终请求。在通常情况下，验证码能很好遏制 CSRF 攻击。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此验证码只能作为一种辅助手段，不能作为主要解决方案。")]),e._v(" "),r("p",[r("strong",[e._v("验证 HTTP Referer 字段")])]),e._v(" "),r("p",[e._v("根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。\n在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory，\n用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。\n这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。\n而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。\n因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。\n如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。")]),e._v(" "),r("p",[e._v("存在问题")]),e._v(" "),r("ul",[r("li",[e._v("每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。")]),e._v(" "),r("li",[e._v("用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。")])])])}),[],!1,null,null,null);r.default=v.exports}}]);