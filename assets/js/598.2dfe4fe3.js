(window.webpackJsonp=window.webpackJsonp||[]).push([[598],{872:function(t,e,r){"use strict";r.r(e);var a=r(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"road-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#road-map"}},[t._v("#")]),t._v(" Road Map")]),t._v(" "),e("iframe",{attrs:{src:t.$withBase("/binary-search-tree.html"),width:"100%",height:"800",frameborder:"0",scrolling:"No",leftmargin:"0",topmargin:"0"}}),t._v(" "),e("p",[t._v("打怪路线：")]),t._v(" "),e("ul",[e("li",[t._v("构建二叉搜索树：108 -> 1008 -> 449")]),t._v(" "),e("li",[t._v("验证二叉搜索树：96 -> 95 -> 98")]),t._v(" "),e("li",[t._v("二叉搜索树中的节点操作：700 -> 701 -> 450 -> 669")]),t._v(" "),e("li",[t._v("搜索树中的迭代器：173 -> 230")])]),t._v(" "),e("h2",{attrs:{id:"二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),e("h2",{attrs:{id:"二叉搜索树的性质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树的性质"}},[t._v("#")]),t._v(" 二叉搜索树的性质")]),t._v(" "),e("ul",[e("li",[t._v("结点左子树中所含结点的值小于等于当前结点的值")]),t._v(" "),e("li",[t._v("结点右子树中所含结点的值大于等于当前结点的值")]),t._v(" "),e("li",[t._v("左子树和右子树都是二叉搜索树")]),t._v(" "),e("li")]),t._v(" "),e("h2",{attrs:{id:"判断条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断条件"}},[t._v("#")]),t._v(" 判断条件")]),t._v(" "),e("ul",[e("li",[t._v("中序遍历是递增序列的二叉树一定是二叉搜索树，可以利用中序遍历是否有序判断是否二叉搜索树")]),t._v(" "),e("li",[t._v("根节点大于所有左子树节点，如果根节点大于左子树的最大值节点即可，因为左子树的最大值位于左子树最右边的节点，所以只要根节点 > 左子树的最右节点即可；同理，根节点 < 右子树的最左节点；")])]),t._v(" "),e("h2",{attrs:{id:"寻找后继节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#寻找后继节点"}},[t._v("#")]),t._v(" 寻找后继节点")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderSuccessor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderSuccessor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),t._v(" ans "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderSuccessor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" root "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ans"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("ul",[e("li",[t._v("分两种情况，当前节点 跟 p 节点大小比较\n"),e("ul",[e("li",[t._v("当前节点 <= p 时，后继节点在右边")]),t._v(" "),e("li",[t._v("当前节点 > p 时，后继节点是 当前节点最左边的节点")])])])]),t._v(" "),e("h2",{attrs:{id:"寻找左子树的最右节点-寻找右子树的最左节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#寻找左子树的最右节点-寻找右子树的最左节点"}},[t._v("#")]),t._v(" 寻找左子树的最右节点（寻找右子树的最左节点）")]),t._v(" "),e("h2",{attrs:{id:"_700-二叉搜索树中的搜索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_700-二叉搜索树中的搜索"}},[t._v("#")]),t._v(" "),e("strong",[t._v("700.二叉搜索树中的搜索")])]),t._v(" "),e("h2",{attrs:{id:"_98-验证二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_98-验证二叉搜索树"}},[t._v("#")]),t._v(" "),e("strong",[t._v("98.验证二叉搜索树")])]),t._v(" "),e("h2",{attrs:{id:"_530-二叉搜索树的最小绝对差"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_530-二叉搜索树的最小绝对差"}},[t._v("#")]),t._v(" "),e("strong",[t._v("530.二叉搜索树的最小绝对差")])]),t._v(" "),e("h2",{attrs:{id:"_501-二叉搜索树中的众数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_501-二叉搜索树中的众数"}},[t._v("#")]),t._v(" "),e("strong",[t._v("501.二叉搜索树中的众数")])]),t._v(" "),e("h2",{attrs:{id:"_701-二叉搜索树中的插入操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_701-二叉搜索树中的插入操作"}},[t._v("#")]),t._v(" "),e("strong",[t._v("701.二叉搜索树中的插入操作")])]),t._v(" "),e("h2",{attrs:{id:"_450-删除二叉搜索树中的节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_450-删除二叉搜索树中的节点"}},[t._v("#")]),t._v(" "),e("strong",[t._v("450.删除二叉搜索树中的节点")])]),t._v(" "),e("h2",{attrs:{id:"_669-修剪二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_669-修剪二叉搜索树"}},[t._v("#")]),t._v(" "),e("strong",[t._v("669. 修剪二叉搜索树")])]),t._v(" "),e("h2",{attrs:{id:"_108-将有序数组转换为二叉搜索树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_108-将有序数组转换为二叉搜索树"}},[t._v("#")]),t._v(" "),e("strong",[t._v("108.将有序数组转换为二叉搜索树")])]),t._v(" "),e("h2",{attrs:{id:"_538-把二叉搜索树转换为累加树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_538-把二叉搜索树转换为累加树"}},[t._v("#")]),t._v(" "),e("strong",[t._v("538.把二叉搜索树转换为累加树")])]),t._v(" "),e("h4",{attrs:{id:"题目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/401-500/426.convert-binary-search-tree-to-sorted-doubly-linked-list.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 426. Convert Binary Search Tree to Sorted Doubly Linked List (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/501-600/530.minimum-absolute-difference-in-bst.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 530. Minimum Absolute Difference in BST (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/201-300/230.kth-smallest-element-in-a-bst.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 230. Kth Smallest Element in a BST (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/501-600/501.find-mode-in-binary-search-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 501. Find Mode in Binary Search Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("[LeetCode 938. Range Sum of BST (easy)](")])])]),t._v(" "),e("h2",{attrs:{id:"二叉树练习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树练习"}},[t._v("#")]),t._v(" 二叉树练习")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/1-100/94.binary-tree-inorder-traversal.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("94.二叉树的中序遍历"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/1-100/98.validate-binary-search-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 98. Validate Binary Search Tree (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/101.symmetric-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 101. Symmetric Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/104.maximum-depth-of-binary-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 104. Maximum Depth of Binary Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/105.construct-binary-tree-from-preorder-and-inorder-traversal.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/108.convert-sorted-array-to-binary-search-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 108. Convert Sorted Array to Binary Search Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/109.convert-sorted-list-to-binary-search-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 109. Convert Sorted List to Binary Search Tree (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/110.balanced-binary-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 110. Balanced Binary Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/129.sum-root-to-leaf-numbers.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 129. Sum Root to Leaf Numbers (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/101-200/173.binary-search-tree-iterator.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 173. Binary Search Tree Iterator (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/201-300/235.lowest-common-ancestor-of-a-binary-search-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 235. Lowest Common Ancestor of a Binary Search Tree (easy)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/201-300/236.lowest-common-ancestor-of-a-binary-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 236. Lowest Common Ancestor of a Binary Tree (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/501-600/513.find-bottom-left-tree-value.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 513. Find Bottom Left Tree Value (medium)"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://github.com/muyids/leetcode/blob/master/algorithms/501-600/538.convert-bst-to-greater-tree.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 538. Convert BST to Greater Tree (easy)"),e("OutboundLink")],1)])])])])}),[],!1,null,null,null);e.default=s.exports}}]);