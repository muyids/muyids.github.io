(window.webpackJsonp=window.webpackJsonp||[]).push([[601],{876:function(v,_,a){"use strict";a.r(_);var t=a(14),i=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"road-map"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#road-map"}},[v._v("#")]),v._v(" Road Map")]),v._v(" "),_("iframe",{attrs:{src:v.$withBase("/dynamic-programming.html"),width:"100%",height:"800",frameborder:"0",scrolling:"No",leftmargin:"0",topmargin:"0"}}),v._v(" "),_("h1",{attrs:{id:"动态规划"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[v._v("#")]),v._v(" 动态规划")]),v._v(" "),_("p",[v._v("动态规划（Dynamic Programming）是一种分阶段求解策略问题的数学思想。")]),v._v(" "),_("p",[v._v("动态规划中包含三个重要概念：最优子结构、边界、状态转移公式。")]),v._v(" "),_("ul",[_("li",[v._v("最优子结构，求解一个问题时，首先要找出问题的最优子结构；")]),v._v(" "),_("li",[v._v("边界，边界是最简的最优子结构，无需再简化便可得到结果；如果一个问题没有边界，将无法得到有限的结果；")]),v._v(" "),_("li",[v._v("状态转换方程，是阶段与阶段直接的转换关系")])]),v._v(" "),_("p",[v._v("动态规划类似于高中数学的数学归纳法")]),v._v(" "),_("h2",{attrs:{id:"求解过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#求解过程"}},[v._v("#")]),v._v(" 求解过程")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("确定状态")]),v._v(" "),_("p",[v._v("研究最优策略的最后一步，转化为子问题，定义最优子结构")])]),v._v(" "),_("li",[_("p",[v._v("转换方式")]),v._v(" "),_("p",[v._v("根据子问题定义和最后一步求解过程，抽象出状态转换方程")])]),v._v(" "),_("li",[_("p",[v._v("初始条件和边界情况")]),v._v(" "),_("p",[v._v("细心，考虑周全")])]),v._v(" "),_("li",[_("p",[v._v("计算顺序")]),v._v(" "),_("p",[v._v("利用之前的计算结果")])])]),v._v(" "),_("h2",{attrs:{id:"动态规划题目特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态规划题目特点"}},[v._v("#")]),v._v(" 动态规划题目特点")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("求方案数（计数）")]),v._v(" "),_("ul",[_("li",[v._v("有多少种方式走到右下角")]),v._v(" "),_("li",[v._v("有多少种方法选出 k 个数使得和为 sum")])])]),v._v(" "),_("li",[_("p",[v._v("求最值")]),v._v(" "),_("ul",[_("li",[v._v("从左上角走到右下角路径的最大数字和")]),v._v(" "),_("li",[v._v("求最长上升子序列的长度")])])]),v._v(" "),_("li",[_("p",[v._v("求存在性")]),v._v(" "),_("ul",[_("li",[v._v("青蛙过河，能否跳到最后一个位置")]),v._v(" "),_("li",[v._v("取石子游戏，先手是否必胜 - 博弈论")]),v._v(" "),_("li",[v._v("能不能选出 k 个数使得和是 sum")])])])]),v._v(" "),_("h2",{attrs:{id:"dp-分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dp-分类"}},[v._v("#")]),v._v(" DP 分类")]),v._v(" "),_("ul",[_("li",[v._v("记忆化搜索")]),v._v(" "),_("li",[v._v("背包 dp")]),v._v(" "),_("li",[v._v("区间 dp")]),v._v(" "),_("li",[v._v("树形 dp")]),v._v(" "),_("li",[v._v("状压 dp")]),v._v(" "),_("li",[v._v("数位 dp")])]),v._v(" "),_("h2",{attrs:{id:"其他"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),_("ul",[_("li",[v._v("插头 dp")]),v._v(" "),_("li",[v._v("计数 dp")])])])}),[],!1,null,null,null);_.default=i.exports}}]);