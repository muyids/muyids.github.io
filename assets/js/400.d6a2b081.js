(window.webpackJsonp=window.webpackJsonp||[]).push([[400],{674:function(v,_,e){"use strict";e.r(_);var r=e(14),l=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h4",{attrs:{id:"大纲"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大纲"}},[v._v("#")]),v._v(" "),_("strong",[v._v("大纲")])]),v._v(" "),_("ul",[_("li",[v._v("概述")]),v._v(" "),_("li",[v._v("应用场景")]),v._v(" "),_("li",[v._v("特性")]),v._v(" "),_("li",[v._v("集群角色")]),v._v(" "),_("li",[v._v("数据模型")]),v._v(" "),_("li",[v._v("Znode 存储")]),v._v(" "),_("li",[v._v("节点类型")]),v._v(" "),_("li",[v._v("节点属性")]),v._v(" "),_("li",[v._v("watch 机制")]),v._v(" "),_("li",[v._v("选举机制")]),v._v(" "),_("li",[v._v("原子广播机制")])]),v._v(" "),_("hr"),v._v(" "),_("h4",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),_("ul",[_("li",[v._v("高性能"),_("strong",[v._v("分布式应用协调服务")])]),v._v(" "),_("li",[v._v("解决分布式集群中的一致性问题；比如，避免脏读")]),v._v(" "),_("li",[v._v("Zookeeper=文件系统+通知机制：本质是一个分布式的小文件存储系统")])]),v._v(" "),_("h4",{attrs:{id:"应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("统一命名服务（Naming Service）：服务注册与发现")])]),v._v(" "),_("li",[_("p",[v._v("统一配置管理")])]),v._v(" "),_("li",[_("p",[v._v("统一集群管理：集群状态监控、服务器节点动态上下线、集群选主（Leader Election）")])]),v._v(" "),_("li",[_("p",[v._v("分布式协调/通知：watch 机制和临时节点，获取个节点的任务进度，通过修改节点发出通知")])]),v._v(" "),_("li",[_("p",[v._v("分布式锁")])]),v._v(" "),_("li",[_("p",[v._v("分布式队列\n日常工作中哪里用到了 Zookeeper")])]),v._v(" "),_("li",[_("p",[v._v("使用 ZooKeeper 实现分布式锁")])])]),v._v(" "),_("p",[v._v("开源工具中 zookeeper 的应用")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("dubbo 使用 ZooKeeper 作为注册中心")])]),v._v(" "),_("li",[_("p",[v._v("Kafka 中使用 Zookeeper 做集群管理，0.9 之前使用 zk 存储 consumer 的 offset")])])]),v._v(" "),_("h4",{attrs:{id:"特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[v._v("#")]),v._v(" 特性")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("全局数据一致："),_("strong",[v._v("最重要的特征")]),v._v("，每个 server 保存一份相同的数据副本，client 无论连接到哪个 server，数据都是一致的")])]),v._v(" "),_("li",[_("p",[v._v("顺序性：")]),v._v(" "),_("p",[v._v("包括"),_("strong",[v._v("全局有序")]),v._v("和"),_("strong",[v._v("偏序")]),v._v("两种：")]),v._v(" "),_("ul",[_("li",[v._v("全局有序是指如果在一台服务器上消息 a 在消息 b 前发布，则在所有 Server 上消息 a 都将在消息 b 前被发布；")]),v._v(" "),_("li",[v._v("偏序是指如果一个消息 b 在消息 a 后被同一个发送者发布，a 必将排在 b 前面。")])])]),v._v(" "),_("li",[_("p",[v._v("数据更新原子性：一次数据更新要么成功（半数以上节点成功），要么失败，不存在中间状态；")])]),v._v(" "),_("li",[_("p",[v._v("最终一致性：在一定时间范围内，client 能读到最新数据。")])]),v._v(" "),_("li",[_("p",[v._v("可靠性：（可靠性一般由两点保证：冗余+故障转移）")]),v._v(" "),_("p",[v._v("冗余：在每一节点中都有一份数据副本；集群中只要有半数以上节点存活，Zookeeper 集群就能正常服务")]),v._v(" "),_("p",[v._v("故障转移：故障恢复（崩溃选举+数据同步）")])])]),v._v(" "),_("h4",{attrs:{id:"集群角色"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集群角色"}},[v._v("#")]),v._v(" 集群角色")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("Leader")]),v._v("："),_("strong",[v._v("负责进行投票的发起和决议，更新系统状态")])]),v._v(" "),_("p",[v._v("Zookeeper 集群工作的核心\n事务请求（写操作）的唯一调度和处理者，保证集群事务处理的顺序性；\n集群内部各个服务器的调度者。\n对于写操作的请求，统一交给 leader 处理， leader 需要决定编号、执行操作，这个过程称为一个事务 。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("Follower")])]),v._v(" "),_("p",[_("strong",[v._v("处理客户端非事务（读操作）请求，转发事务请求给 Leader；")])]),v._v(" "),_("p",[_("strong",[v._v("参与 Leader 选举投票")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("Observer")]),v._v("（针对访问量比较大的 zookeeper 集群，还可新增"),_("strong",[v._v("观察者")]),v._v("角色）")]),v._v(" "),_("p",[v._v("提升集群的非事务处理能力")])])]),v._v(" "),_("h4",{attrs:{id:"数据模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据模型"}},[v._v("#")]),v._v(" 数据模型")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("树形结构，与标准文件系统相似")])]),v._v(" "),_("li",[_("p",[v._v("每个节点成为 Znode")])]),v._v(" "),_("li",[_("p",[v._v("Znode 兼具文件和目录两种特点")]),v._v(" "),_("p",[v._v("既像文件一样维护着数据、元信息、ACL、时间戳等数据结构")]),v._v(" "),_("p",[v._v("又像目录一样可以作为路径标识的一部分，并可以具有子 Znode")])]),v._v(" "),_("li",[_("p",[v._v("Znode 操作具有原子性")])]),v._v(" "),_("li",[_("p",[v._v("Znode 存储数据大小有限制")]),v._v(" "),_("p",[v._v("每个 Znode 最大 1M，保证高吞吐")])])]),v._v(" "),_("h4",{attrs:{id:"znode-存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#znode-存储"}},[v._v("#")]),v._v(" znode 存储")]),v._v(" "),_("p",[v._v("Znode 数据节点的代码如下")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("public class DataNode implements Record {\n    byte data[];\n    Long acl;\n    public StatPersisted stat;\n    private Set<String> children = null;\n}\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br")])]),_("p",[v._v("Znode 包含了存储数据、访问权限、子节点引用、节点状态信息")]),v._v(" "),_("ul",[_("li",[v._v("data: znode 存储的业务数据信息")]),v._v(" "),_("li",[v._v("ACL: 记录客户端对 znode 节点的访问权限，如 IP 等。")]),v._v(" "),_("li",[v._v("child: 当前节点的子节点引用")]),v._v(" "),_("li",[v._v("stat: 包含 Znode 节点的状态信息，比如事务 id、版本号、时间戳等等。\nQ: 每个节点的数据最大不能超过多少?")])]),v._v(" "),_("blockquote",[_("p",[v._v("为了保证高吞吐和低延迟，以及数据的一致性，znode 只适合存储非常小的数据，不能超过 1M，最好都小于 1K。")])]),v._v(" "),_("h4",{attrs:{id:"节点类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#节点类型"}},[v._v("#")]),v._v(" 节点类型")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("临时节点")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("生命周期跟 session 绑定")])]),v._v(" "),_("li",[_("p",[v._v("只能为子节点")]),v._v(" "),_("p",[v._v("怎么查看当前 sessionId ？TODO")])])])]),v._v(" "),_("li",[_("p",[v._v("持久节点")])]),v._v(" "),_("li",[_("p",[v._v("临时顺序节点")])]),v._v(" "),_("li",[_("p",[v._v("持久顺序节点\n临时顺序节点，node01, node02 ， node01 能先失效吗？")])])]),v._v(" "),_("h4",{attrs:{id:"节点属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#节点属性"}},[v._v("#")]),v._v(" 节点属性")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("cZxid")]),v._v("：当前数据结点创建时的事务 ID——针对于"),_("code",[v._v("zookeeper")]),v._v("数据结点的管理：我们对结点数据的一些写操作都会导致"),_("code",[v._v("zookeeper")]),v._v("自动地为我们去开启一个事务，并且自动地去为每一个事务维护一个事务"),_("code",[v._v("ID")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("ctime")]),v._v("：当前数据结点创建时的时间")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("mZxid")]),v._v("：当前数据结点最后一次更新时的事务 ID")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("mtime")]),v._v("：当前数据结点最后一次更新时的时间")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("pZxid")]),v._v("：当前数据节点最后一次"),_("strong",[v._v("修改其子节点")]),v._v("更改的"),_("code",[v._v("zxid")]),v._v("。修改指(增加子节点、删除子节点)，并不指其子节点的数据发生改变；")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("cversion")]),v._v("：当前数据节点对应"),_("strong",[v._v("子结点")]),v._v("的更改次数")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("dataVersion")]),v._v("：当前结点数据的发生更改的次数")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("aclVersion")]),v._v("：当前结点的 ACL 更改次数——类似"),_("code",[v._v("linux")]),v._v("的权限列表，维护的是当前结点的权限列表被修改的次数")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("ephemeralOwner")]),v._v("：如果结点是临时结点，则表示创建该结点的会话的"),_("code",[v._v("SessionID")]),v._v("；如果是持久结点，该属性值为 0")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("dataLength")]),v._v("：当前节点的数据内容长度")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("numChildren")]),v._v("：当前数据结点的子结点个数")])])]),v._v(" "),_("h4",{attrs:{id:"watch-机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#watch-机制"}},[v._v("#")]),v._v(" watch 机制")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("一次性触发\n事件发生触发监听，一个 watcher event 就会被发送到设置监听的客户端，这种效果是一次性的，后续再次发生同样的事件，不会再次触发。")])]),v._v(" "),_("li",[_("p",[v._v("事件封装")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("ZooKeeper 使用 WatchedEvent 对象来封装服务端事件并传递。")])]),v._v(" "),_("li",[_("p",[v._v("WatchedEvent 包含了每一个事件的三个基本属性： 通知状态（keeperState） ，事件类型（EventType）和节点路径（path）")])])])]),v._v(" "),_("li",[_("p",[v._v("event 异步发送")]),v._v(" "),_("p",[v._v("watcher 的通知事件从服务端发送到客户端是异步的。")])]),v._v(" "),_("li",[_("p",[v._v("先注册再触发\nZookeeper 中的 watch 机制，必须客户端先去服务端注册监听，这样事件发送才会触发监听，通知给客户端。")])])]),v._v(" "),_("h4",{attrs:{id:"选举机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#选举机制"}},[v._v("#")]),v._v(" 选举机制")]),v._v(" "),_("p",[v._v("zookeeper 默认的算法是 "),_("strong",[v._v("FastLeaderElection")]),v._v("，采用投票数大于半数则胜出的逻辑。")]),v._v(" "),_("p",[_("strong",[v._v("概念")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("sid: 服务器 id，编号越大，权重越大")])]),v._v(" "),_("li",[_("p",[v._v("zxId：事务 id，前 32 位 epoch，后 32 位事务提交 ID，值越大说明数据越新，在选举算法中权重越大。")])]),v._v(" "),_("li",[_("p",[v._v("选举状态：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("looking，竞选状态")])]),v._v(" "),_("li",[_("p",[v._v("following，随从状态，同步 leader 状态，参与投票")])]),v._v(" "),_("li",[_("p",[v._v("observing，观察状态，同步 leader 状态，不参与投票")])]),v._v(" "),_("li",[_("p",[v._v("Leading，领导者状态")])])])]),v._v(" "),_("li",[_("p",[v._v("逻辑时钟（任期，epoch，term）: 第几轮投票，同一轮投票时钟值相同\n"),_("strong",[v._v("初始化选举")]),v._v("\n没有历史数据，5 个节点为例")])])]),v._v(" "),_("ol",[_("li",[v._v("都是 looking 状态，假设 server 启动顺序为 1,2,3,4,5")]),v._v(" "),_("li",[v._v("server1 启动，发起竞选请求，其他服务未启动，保持 looking 状态")]),v._v(" "),_("li",[v._v("server2 启动，发起竞选请求，server1 响应，server2 胜出，但未到半数以上，server1 和 2 继续保持 looking")]),v._v(" "),_("li",[v._v("server3 启动，发起竞选请求，server3 胜出，达到半数以上，server3 赢得选举，成为 leader")]),v._v(" "),_("li",[v._v("server4 启动，发起竞选请求，但是 server3 已胜出，切换为 follower")]),v._v(" "),_("li",[v._v("server5 启动，同 server4 一样\n"),_("strong",[v._v("崩溃选举")])])]),v._v(" "),_("ul",[_("li",[v._v("变更状态：leader 故障（或失去了大多数 follower 的支持），follower 进入 looking 状态")]),v._v(" "),_("li",[v._v("投票：先投自己，再广播（zxid, sid）")]),v._v(" "),_("li",[v._v("记票&再投：记录收到的选票，如果自己的（zxid, sid）值较小，修改选票，并重新广播；如果自己较大，不处理")]),v._v(" "),_("li",[v._v("胜出：当自己本地记录的选票超过半数，切换为 leading 并广播")])]),v._v(" "),_("h4",{attrs:{id:"原子广播机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原子广播机制"}},[v._v("#")]),v._v(" "),_("strong",[v._v("原子广播机制")])]),v._v(" "),_("p",[v._v("原子广播是 zookeeper 的"),_("strong",[v._v("核心工作原理")]),v._v("，实现这个机制的协议叫做 "),_("strong",[v._v("Zab 协议")])]),v._v(" "),_("p",[v._v("Zab 协议的两种模式，zab 协议就是在这两种模式间进行切换")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("恢复模式（崩溃恢复）")])]),v._v(" "),_("li",[_("p",[v._v("广播模式（消息广播）\n"),_("strong",[v._v("恢复模式")]),v._v("：做了两件事：leader 选举 + 数据同步")])]),v._v(" "),_("li",[_("p",[v._v("leader 选举：初始化选举+崩溃选举")])]),v._v(" "),_("li",[_("p",[v._v("数据同步")]),v._v(" "),_("p",[v._v("数据同步算法需要满足两个条件：")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("已经被处理的消息")]),v._v("不能丢（Leader 服务器将消息 commit 发出后，立即崩溃）")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("没有确认的消息")]),v._v("不能被 commit（Leader 服务器刚提出 proposal 后，立即崩溃）\n算法设计：")])]),v._v(" "),_("li",[_("p",[v._v("选举出来的新 leader 具有被 commit 过的 proposal 的最大 zxid + 半数机制")])]),v._v(" "),_("li",[_("p",[v._v("每次选举 epoch+1，新选举的 leader 会拒绝旧的 epoch 进行的 commit 提案\n"),_("strong",[v._v("广播模式")]),v._v("：（一种简化的 2PC 提交过程）")])])])])]),v._v(" "),_("p",[v._v("从恢复模式恢复后，zk 就进入了广播模式，此时 zk 进行的就是数据的读写")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/2021-08-23pm4.48.54.png",alt:"2021-08-23pm4.48.54"}})]),v._v(" "),_("p",[_("strong",[v._v("zookeeper 写消息的过程")])]),v._v(" "),_("p",[v._v("（1) Client 通过某个 follower 请求写操作时，该 follower 会把这个请求发给 leader；")]),v._v(" "),_("p",[v._v("（2）leader 再将这个更新（proposal），顺序发送给 follower；")])])}),[],!1,null,null,null);_.default=l.exports}}]);