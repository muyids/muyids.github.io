(window.webpackJsonp=window.webpackJsonp||[]).push([[645],{919:function(s,t,v){"use strict";v.r(t);var _=v(14),n=Object(_.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"基础算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础算法"}},[s._v("#")]),s._v(" 基础算法")]),s._v(" "),t("ol",[t("li",[s._v("双指针、滑动窗口、单调栈 ****")])]),s._v(" "),t("p",[s._v("代码模板 =》 基础数据处理 ，比如字符串、集合维护、栈")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("DFS ****")])]),s._v(" "),t("p",[s._v("二叉树 => 单独去刷，一个专题")]),s._v(" "),t("p",[s._v("DFS + 递归 + 回溯 + 剪枝")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function dfs(){ // 深搜\n    doCounter() // 统计结果\n    doCut() // 剪枝\n    for all router { // 遍历所有路径\n        doSomeThing()   // 搜索处理，保存当前状态等\n        change()    // 当前棋盘变化\n        dfs()       // 递归\n        unchange()  // 回溯棋盘变化（恢复现场）\n        doAnotherThing()\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("本质： 栈")]),s._v(" "),t("p",[s._v("排列、组合、子集")]),s._v(" "),t("p",[s._v("https://leetcode.cn/problems/combinations/\nhttps://leetcode.cn/problems/subsets/\n游戏 八皇后 迷宫 棋盘 密码锁 魔方")]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("BFS")])]),s._v(" "),t("p",[s._v("用 队列 实现")]),s._v(" "),t("p",[s._v("岛屿 => leetcode 200, DFS, BFS, 并查集都去解一下")]),s._v(" "),t("p",[s._v("简单过一下，")]),s._v(" "),t("p",[s._v("一般就是求最短路径、迷宫")]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("二叉树")])]),s._v(" "),t("p",[s._v("面试特别多")]),s._v(" "),t("p",[s._v("二叉树的性质： 二叉搜索树")]),s._v(" "),t("p",[s._v("DFS 前中后 遍历")]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[s._v("前缀和，差分")])]),s._v(" "),t("li",[t("p",[s._v("并查集")])]),s._v(" "),t("li",[t("p",[s._v("排序")])])]),s._v(" "),t("p",[s._v("能手写 冒泡，快排（求第 K 大的数）、归并")]),s._v(" "),t("p",[s._v("知道 堆排序，桶排（基数排序）")]),s._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[s._v("字典树")])]),s._v(" "),t("p",[s._v("理解概念， 知道应用，基本模板代码可以手写")]),s._v(" "),t("p",[s._v("Trie")]),s._v(" "),t("p",[s._v("应用场景： 搜索引擎 索引查询，")]),s._v(" "),t("p",[s._v("与 B+ 树对比")]),s._v(" "),t("h1",{attrs:{id:"动态规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[s._v("#")]),s._v(" 动态规划")]),s._v(" "),t("p",[s._v("线性 DP")]),s._v(" "),t("p",[s._v("背包: 01 和 完全背包必须掌握")]),s._v(" "),t("p",[s._v("最长递增子序列 LIS 最长公共子序列 LCS")]),s._v(" "),t("p",[s._v("编辑距离")]),s._v(" "),t("p",[s._v("打家劫舍")])])}),[],!1,null,null,null);t.default=n.exports}}]);