(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{371:function(t,e,a){"use strict";a.r(e);var s=a(14),i=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[t._v("#")]),t._v(" git branch")]),t._v(" "),e("p",[e("strong",[t._v("branch 只是简单地指向了某个 commit")])]),t._v(" "),e("p",[t._v("Git 的分支也非常轻量。它们只是简单地指向某个提交纪录 —— 仅此而已。所以许多 Git 爱好者传颂：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("早建分支！多用分支！\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("这是因为即使创建再多的分支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。")]),t._v(" "),e("p",[t._v("在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”")]),t._v(" "),e("p",[e("em",[t._v("注意：在 Git 2.23 版本中，引入了一个名为 "),e("code",[t._v("git switch")]),t._v(" 的新命令，最终会取代 "),e("code",[t._v("git checkout")]),t._v("，因为 "),e("code",[t._v("checkout")]),t._v(" 作为单个命令有点超载（它承载了很多独立的功能）。 由于现在很多人还无法使用 "),e("code",[t._v("switch")]),t._v("，本次课程仍然使用 "),e("code",[t._v("checkout")]),t._v(" 而不是 "),e("code",[t._v("switch")]),t._v("， 但是如果你想尝试一下新命令，我们的应用也是支持的！并且你可以从"),e("a",{attrs:{href:"https://git-scm.com/docs/git-switch",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),e("OutboundLink")],1),t._v("学到更多关于新命令的内容。")])]),t._v(" "),e("h2",{attrs:{id:"创建新分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建新分支"}},[t._v("#")]),t._v(" 创建新分支")]),t._v(" "),e("p",[t._v("创建一个名为 "),e("code",[t._v("bugFix")]),t._v(" 的新分支，然后切换过去。")]),t._v(" "),e("p",[t._v("对了，有个更简洁的方式：如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 "),e("code",[t._v("git checkout -b <your-branch-name>")]),t._v(" 来实现。")]),t._v(" "),e("p",[t._v("注意："),e("code",[t._v("git branch")]),t._v(" 和 "),e("code",[t._v("git checkout -b")]),t._v(" 的区别是："),e("code",[t._v("git branch")]),t._v(" 只是创建新分支， "),e("code",[t._v("git checkout -b")]),t._v(" 在创建新分支的同时，还会切换到新分支")]),t._v(" "),e("h2",{attrs:{id:"切换分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),e("p",[t._v("git checkout 和 git switch")]),t._v(" "),e("h1",{attrs:{id:"分支与合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支与合并"}},[t._v("#")]),t._v(" 分支与合并")]),t._v(" "),e("h2",{attrs:{id:"git-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),e("p",[t._v("我们已经知道如何提交以及如何使用分支了。接下来咱们看看如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。")]),t._v(" "),e("p",[t._v("咱们先来看一下第一种方法 —— "),e("code",[t._v("git merge")]),t._v("。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/img/image-20230209113026625.png",alt:"image-20230209113026625"}})]),t._v(" "),e("p",[t._v("首先，"),e("code",[t._v("main")]),t._v(" 现在指向了一个拥有两个父节点的提交记录。假如从 "),e("code",[t._v("main")]),t._v(" 开始沿着箭头向上看，在到达起点的路上会经过所有的提交记录。这意味着 "),e("code",[t._v("main")]),t._v(" 包含了对代码库的所有修改。↓↓↓")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/img/image-20230209113135307.png",alt:"image-20230209113135307"}}),t._v(" "),e("h2",{attrs:{id:"git-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),e("p",[t._v("第二种合并分支的方法是 "),e("code",[t._v("git rebase")]),t._v("。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。")]),t._v(" "),e("p",[t._v("Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。")]),t._v(" "),e("p",[t._v("还是准备了两个分支；注意当前所在的分支是 bugFix（星号标识的是当前分支）")]),t._v(" "),e("p",[t._v("我们想要把 bugFix 分支里的工作直接移到 main 分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。")]),t._v(" "),e("p",[t._v("咱们这次用 "),e("code",[t._v("git rebase")]),t._v(" 实现此目标")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/img/image-20230209134810376.png",alt:"image-20230209134810376"}}),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase main\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"/Users/mac/Library/Application Support/typora-user-images/image-20230209135058587.png",alt:"image-20230209135058587"}}),t._v(" "),e("p",[t._v("现在 bugFix 分支上的工作在 main 的最顶端，同时我们也得到了一个更线性的提交序列。")]),t._v(" "),e("p",[t._v("注意，提交记录 C3 依然存在（树上那个半透明的节点），而 C3' 是我们 Rebase 到 main 分支上的 C3 的副本。")]),t._v(" "),e("p",[t._v("现在唯一的问题就是 main 还没有更新，下面咱们就来更新它吧……")]),t._v(" "),e("p",[t._v("现在我们切换到了 "),e("code",[t._v("main")]),t._v(" 上。把它 rebase 到 "),e("code",[t._v("bugFix")]),t._v(" 分支上……")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase bugFix\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])])])}),[],!1,null,null,null);e.default=i.exports}}]);