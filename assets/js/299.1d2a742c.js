(window.webpackJsonp=window.webpackJsonp||[]).push([[299],{572:function(v,_,t){"use strict";t.r(_);var a=t(14),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"用到分布式事务嘛-为什么用这种方案-有其他方案嘛"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用到分布式事务嘛-为什么用这种方案-有其他方案嘛"}},[v._v("#")]),v._v(" 用到分布式事务嘛?为什么用这种方案,有其他方案嘛?")]),v._v(" "),_("p",[v._v("CAP")]),v._v(" "),_("p",[v._v("BASE")]),v._v(" "),_("p",[v._v("分布式事务的几种解决方案")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("2PC(二阶段提交)方案")]),v._v("，事务的提交分为两个阶段：准备阶段和提交执行方案。")]),v._v(" "),_("li",[_("strong",[v._v("TCC（即 Try、Confirm、Cancel）")]),v._v("，它采用了补偿机制，核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。")]),v._v(" "),_("li",[_("strong",[v._v("本地消息表")]),v._v("，它的核心思想就是将分布式事务拆分成本地事务进行处理。")]),v._v(" "),_("li",[_("strong",[v._v("最大努力通知")]),v._v("，实现最大努力通知，可以采用 MQ 的 ack 机制。")]),v._v(" "),_("li",[_("strong",[v._v("Saga 事务")]),v._v("，它的核心思想是将长事务拆分为多个本地短事务，由 Saga 事务协调器协调，如果正常结束那就正常完成，如果某个步骤失败，则根据相反顺序一次调用补偿操作。")])]),v._v(" "),_("p",[v._v("本地消息表最常用")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("消息发送方")])]),v._v(" "),_("li",[_("p",[v._v("消息消费方")])])]),v._v(" "),_("h2",{attrs:{id:"jdk6、7、8-分别提供了哪些新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk6、7、8-分别提供了哪些新特性"}},[v._v("#")]),v._v(" JDK6、7、8 分别提供了哪些新特性")]),v._v(" "),_("p",[v._v("jdk8")]),v._v(" "),_("ul",[_("li",[v._v("lambada 表达式")]),v._v(" "),_("li",[v._v("函数式接口")]),v._v(" "),_("li",[v._v("Optional")])]),v._v(" "),_("h2",{attrs:{id:""}},[_("a",{staticClass:"header-anchor",attrs:{href:"#"}},[v._v("#")])]),v._v(" "),_("h2",{attrs:{id:"https-原理-工作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-原理-工作流程"}},[v._v("#")]),v._v(" https 原理，工作流程")]),v._v(" "),_("h2",{attrs:{id:"讲讲-java-jmm-volatile-的实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#讲讲-java-jmm-volatile-的实现原理"}},[v._v("#")]),v._v(" 讲讲 java jmm volatile 的实现原理")]),v._v(" "),_("p",[v._v("volatile")]),v._v(" "),_("ul",[_("li",[v._v("Java 虚拟机提供的的"),_("strong",[v._v("最轻量级的同步机制")])]),v._v(" "),_("li",[v._v("保证变量对所有线程可见性")]),v._v(" "),_("li",[v._v("禁止指令重排")]),v._v(" "),_("li",[v._v("不保证原子性")])]),v._v(" "),_("h2",{attrs:{id:"讲一讲-7-层网络模型-tcp-的为什么要三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#讲一讲-7-层网络模型-tcp-的为什么要三次握手"}},[v._v("#")]),v._v(" 讲一讲 7 层网络模型，tcp 的为什么要三次握手")]),v._v(" "),_("h2",{attrs:{id:"说说线程池的工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说线程池的工作原理"}},[v._v("#")]),v._v(" 说说线程池的工作原理")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/b94a9789629847b28c8d001789fc6edb~tplv-k3u1fbpfcp-watermark.awebp",alt:"img"}})]),v._v(" "),_("h2",{attrs:{id:"你们数据库的高可用是怎么实现的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#你们数据库的高可用是怎么实现的"}},[v._v("#")]),v._v(" 你们数据库的高可用是怎么实现的?")]),v._v(" "),_("ul",[_("li",[v._v("主从半同步复制")]),v._v(" "),_("li",[v._v("高可用架构优化\n"),_("ul",[_("li",[v._v("引入 zookeeper 做集群管理")])])]),v._v(" "),_("li",[v._v("共享存储\n"),_("ul",[_("li",[_("strong",[v._v("DRBD 磁盘复制")])])])]),v._v(" "),_("li",[v._v("分布式协议\n"),_("ul",[_("li",[_("strong",[v._v("MySQL cluster")])])])])]),v._v(" "),_("h2",{attrs:{id:"读写分离的场景下-怎么保证从数据库读到最新的数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读写分离的场景下-怎么保证从数据库读到最新的数据"}},[v._v("#")]),v._v(" 读写分离的场景下,怎么保证从数据库读到最新的数据?")]),v._v(" "),_("p",[v._v("在高并发场景或者网络不佳的场景，如果存在较大的主从同步数据延迟，这时候读请求去读从库，就会读到旧数据。")]),v._v(" "),_("p",[v._v("解决方案：")]),v._v(" "),_("ul",[_("li",[v._v("强制读主库")]),v._v(" "),_("li",[v._v("缓存标记法\n"),_("ul",[_("li",[v._v("写请求，设置缓存标记，过期时间为 主从同步延迟时间")]),v._v(" "),_("li",[v._v("读请求，检查缓存标记，存在，走主库；不存在，走从库")])])])]),v._v(" "),_("h2",{attrs:{id:"如何保证-mysql-数据不丢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何保证-mysql-数据不丢"}},[v._v("#")]),v._v(" 如何保证 MySQL 数据不丢？")]),v._v(" "),_("ul",[_("li",[v._v("日志先行策略（Write-Ahead Logging），只要"),_("strong",[v._v("binlog 和 redo log")]),v._v("日志能保证持久化到磁盘，我们就能确保 MySQL 异常重启后，数据不丢失。")]),v._v(" "),_("li",[v._v("binlog 日志，记录数据库执行更改的所有操作")]),v._v(" "),_("li",[v._v("redo log，又称为"),_("strong",[v._v("重做日志文件")]),v._v("，只记录事务对数据页做了哪些修改，它记录的是数据修改之后的值。")])]),v._v(" "),_("h2",{attrs:{id:"高并发下如何设计秒杀系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高并发下如何设计秒杀系统"}},[v._v("#")]),v._v(" 高并发下如何设计秒杀系统？")]),v._v(" "),_("ul",[_("li",[v._v("页面静态化")]),v._v(" "),_("li",[v._v("按钮至灰控制")]),v._v(" "),_("li",[v._v("服务单一职责\n"),_("ul",[_("li",[v._v("比如秒杀的数据库、服务器是单独的")]),v._v(" "),_("li",[v._v("秒杀服务挂了也不影响其他服务")])])]),v._v(" "),_("li",[_("h2",{attrs:{id:"秒杀链接加盐"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#秒杀链接加盐"}},[v._v("#")]),v._v(" 秒杀链接加盐")])]),v._v(" "),_("li",[v._v("限流")]),v._v(" "),_("li",[v._v("分布式锁")])])])}),[],!1,null,null,null);_.default=s.exports}}]);