(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{448:function(a,s,t){"use strict";t.r(s);var e=t(14),r=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1Gf4y1t7X3",target:"_blank",rel:"noopener noreferrer"}},[a._v("来源 IT 老哥;面试自学 Java 的大佬，看看这水平值不值 30K"),s("OutboundLink")],1)]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("多线程")]),a._v(" "),s("h3",{attrs:{id:"java-多线程有几种实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-多线程有几种实现方式"}},[a._v("#")]),a._v(" Java 多线程有几种实现方式？")]),a._v(" "),s("ul",[s("li",[a._v("集成 thread 类")]),a._v(" "),s("li",[a._v("实现 runnable 接口")]),a._v(" "),s("li",[a._v("实现 callable 接口通过 futuretask 包装器来创建 thread 线程")]),a._v(" "),s("li",[a._v("通过线程池创建；使用线程池接口 ExecutorService 结合 Callable、Future 实现有返回结果的多线程")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("        ExecutorService threadPool = Executors.newFixedThreadPool(3); // 一池三个线程\n//        ExecutorService threadPool = Executors.newSingleThreadExecutor(); // 一池1个线程\n//        ExecutorService threadPool = Executors.newCachedThreadPool(); // 一池N个线程\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ExecutorService threadPool = new ThreadPoolExecutor(\n        2,\n        5,\n        60L,\n        TimeUnit.SECONDS,\n        new LinkedBlockingQueue<>(3),\n        Executors.defaultThreadFactory(),\n        new ThreadPoolExecutor.DiscardPolicy()\n);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("h3",{attrs:{id:"禁止直接使用-executors-创建线程池的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#禁止直接使用-executors-创建线程池的原因"}},[a._v("#")]),a._v(" 禁止直接使用 Executors 创建线程池的原因")]),a._v(" "),s("ol",[s("li",[a._v("让我们更加明确线程池的运行规则")]),a._v(" "),s("li",[a._v("规避资源耗尽的风险")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('        /**\n         * 线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式的好处：\n         * 1. 让我们更加明确线程池的运行规则\n         * 2. 规避资源耗尽的风险\n         *\n         * 说明：Executors返回的线程池对象的弊端如下：\n         *\n         * 1）FixedThreadPool和SingleThreadPool:\n         *   允许的请求队列底层为LinkedBlockingQueue<Runnable>(), 长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。\n         * 2）CachedThreadPool和newScheduledThreadPool:\n         *   允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。\n         */\n//        ExecutorService threadPool = Executors.newFixedThreadPool(3); // 一池三个线程\n//        ExecutorService threadPool = Executors.newSingleThreadExecutor(); // 一池1个线程\n//        ExecutorService threadPool = Executors.newCachedThreadPool(); // 一池N个线程\n        ExecutorService threadPool = Executors.newScheduledThreadPool(1);\n        for (int i = 0; i < 10; i++) {\n            threadPool.execute(()->{\n                System.out.println(Thread.currentThread().getName()+ "\\t来办理业务");\n            });\n        }\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br")])]),s("h3",{attrs:{id:"能说一下线程池的参数吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#能说一下线程池的参数吗"}},[a._v("#")]),a._v(" 能说一下线程池的参数吗")]),a._v(" "),s("p",[a._v("7 大参数")]),a._v(" "),s("h3",{attrs:{id:"线程池工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池工作原理"}},[a._v("#")]),a._v(" 线程池工作原理")]),a._v(" "),s("p",[a._v("先核心，核心满了进阻塞队列，阻塞队列满了，开启最大线程数，最大和队列都满了，拒绝策略；")]),a._v(" "),s("p",[a._v("当一个线程空闲超过 keepAliveTime 且当前运行线程数大于 corePoolSize，这个线程被停掉；")]),a._v(" "),s("h3",{attrs:{id:"拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拒绝策略"}},[a._v("#")]),a._v(" 拒绝策略")]),a._v(" "),s("ul",[s("li"),a._v(" "),s("li",[s("p",[a._v("自定义；实现 RejectedExecutionHandler 接口")])])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("锁")]),a._v(" "),s("h3",{attrs:{id:"先说一下-aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先说一下-aqs"}},[a._v("#")]),a._v(" 先说一下 AQS")]),a._v(" "),s("p",[a._v("![2021-07-20 pm2.59.14](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm2.59.14.png)")]),a._v(" "),s("p",[a._v("抽象队列同步器： Abstract Queue Synchr")]),a._v(" "),s("p",[a._v("Volatile + 双向链表")]),a._v(" "),s("p",[a._v("![2021-07-20 pm3.03.34](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm3.03.34.png)")]),a._v(" "),s("h3",{attrs:{id:"aqs-用了什么设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs-用了什么设计模式"}},[a._v("#")]),a._v(" AQS 用了什么设计模式")]),a._v(" "),s("p",[a._v("模板模式")]),a._v(" "),s("h3",{attrs:{id:"读写锁是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读写锁是怎么实现的"}},[a._v("#")]),a._v(" 读写锁是怎么实现的")]),a._v(" "),s("p",[a._v("readLock 和 WriteLock")]),a._v(" "),s("h3",{attrs:{id:"aqs-尾分叉"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs-尾分叉"}},[a._v("#")]),a._v(" AQS 尾分叉")]),a._v(" "),s("p",[a._v("![2021-07-20 pm3.12.36](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm3.12.36.png)")]),a._v(" "),s("h3",{attrs:{id:"说一下-synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-synchronized"}},[a._v("#")]),a._v(" 说一下 synchronized")]),a._v(" "),s("p",[a._v("无锁 -> 偏向锁 -> 轻量级锁 -> 重量级锁")]),a._v(" "),s("h3",{attrs:{id:"为什么引入适应性自旋锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入适应性自旋锁"}},[a._v("#")]),a._v(" 为什么引入适应性自旋锁")]),a._v(" "),s("p",[a._v("为了节约 cpu")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("集合")]),a._v(" "),s("h3",{attrs:{id:"concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[a._v("#")]),a._v(" ConcurrentHashMap")]),a._v(" "),s("p",[a._v("jdk1.7")]),a._v(" "),s("p",[a._v("![2021-07-20 pm3.18.26](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm3.18.26.png)")]),a._v(" "),s("p",[a._v("jdk8")]),a._v(" "),s("p",[a._v("![2021-07-20 pm3.19.45](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm3.19.45.png)")]),a._v(" "),s("p",[a._v("![2021-07-20 pm3.24.44](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm3.24.44.png)")]),a._v(" "),s("h3",{attrs:{id:"说一下-cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-cas"}},[a._v("#")]),a._v(" 说一下 CAS")]),a._v(" "),s("ul",[s("li",[a._v("Compare and swap")]),a._v(" "),s("li",[a._v("乐观锁")]),a._v(" "),s("li",[a._v("CPU 并发原语")])]),a._v(" "),s("p",[a._v("cas 存在的问题")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("ABA 问题")])]),a._v(" "),s("li",[s("p",[a._v("自旋操作对 CPU 有一定消耗\nABA 问题的解决方案：")])]),a._v(" "),s("li",[s("p",[a._v("加版本号")])])]),a._v(" "),s("h3",{attrs:{id:"什么是-longadder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-longadder"}},[a._v("#")]),a._v(" 什么是 LongAdder")]),a._v(" "),s("p",[s("strong",[a._v("在低竞争的并发环境下 "),s("code",[a._v("AtomicInteger")]),a._v(" 的性能是要比 "),s("code",[a._v("LongAdder")]),a._v(" 的性能好，而高竞争环境下 "),s("code",[a._v("LongAdder")]),a._v(" 的性能比 "),s("code",[a._v("AtomicInteger")]),a._v(" 好")])]),a._v(" "),s("p",[a._v("因为 "),s("code",[a._v("AtomicInteger")]),a._v(" 在高并发环境下会有多个线程去竞争一个原子变量，而始终只有一个线程能竞争成功，而其他线程会一直通过 CAS 自旋尝试获取此原子变量，因此会有一定的性能消耗；而 "),s("code",[a._v("LongAdder")]),a._v(" 会将这个原子变量分离成一个 Cell 数组，每个线程通过 Hash 获取到自己数组，这样就减少了乐观锁的重试次数，从而在高竞争下获得优势；而在低竞争下表现的又不是很好，可能是因为自己本身机制的执行时间大于了锁竞争的自旋时间，因此在低竞争下表现性能不如 "),s("code",[a._v("AtomicInteger")]),a._v("。")]),a._v(" "),s("p",[a._v("阿里为什么推荐使用 LongAdder，而不是 volatile？https://zhuanlan.zhihu.com/p/197903344")]),a._v(" "),s("h3",{attrs:{id:"hashmap-加载因子为什么是-0-75"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-加载因子为什么是-0-75"}},[a._v("#")]),a._v(" HashMap 加载因子为什么是 0.75")]),a._v(" "),s("p",[a._v("![2021-07-20 pm4.35.52](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm4.35.52.png)")]),a._v(" "),s("h3",{attrs:{id:"hashmap-多线程操作导致死循环问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-多线程操作导致死循环问题"}},[a._v("#")]),a._v(" HashMap 多线程操作导致死循环问题")]),a._v(" "),s("p",[a._v("![2021-07-20 pm4.39.29](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-20 pm4.39.29.png)")]),a._v(" "),s("h3",{attrs:{id:"快速失败-fail-fast-和安全失败"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速失败-fail-fast-和安全失败"}},[a._v("#")]),a._v(" 快速失败（fail-fast）和安全失败")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("Spring")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("Spring Cloud")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"说一下-zookeeper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-zookeeper"}},[a._v("#")]),a._v(" 说一下 zookeeper")]),a._v(" "),s("h3",{attrs:{id:"zk-的-watch-机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-的-watch-机制"}},[a._v("#")]),a._v(" zk 的 watch 机制")]),a._v(" "),s("h3",{attrs:{id:"zk-实现分布式锁的机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-实现分布式锁的机制"}},[a._v("#")]),a._v(" zk 实现分布式锁的机制")]),a._v(" "),s("p",[a._v("两种方式：")]),a._v(" "),s("ol",[s("li",[a._v("临时节点 + watch")]),a._v(" "),s("li",[a._v("顺序节点，公平的\n临时节点+watch: 一个线程创建节点，别的线程 watch，删除后抢占")])]),a._v(" "),s("p",[a._v("存在性能问题：当节点很多的时候，羊群（惊群）现象")]),a._v(" "),s("h3",{attrs:{id:"zk-的选举机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-的选举机制"}},[a._v("#")]),a._v(" zk 的选举机制")]),a._v(" "),s("p",[a._v("服务启动 + 崩溃选举")]),a._v(" "),s("h3",{attrs:{id:"zk-选举过程中节点的几种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-选举过程中节点的几种状态"}},[a._v("#")]),a._v(" zk 选举过程中节点的几种状态")]),a._v(" "),s("ul",[s("li",[a._v("looking")]),a._v(" "),s("li",[a._v("leading")]),a._v(" "),s("li",[a._v("following")])]),a._v(" "),s("h3",{attrs:{id:"zab-协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zab-协议"}},[a._v("#")]),a._v(" zab 协议")]),a._v(" "),s("h3",{attrs:{id:"zk-一个节点能存多大的数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-一个节点能存多大的数据"}},[a._v("#")]),a._v(" zk 一个节点能存多大的数据")]),a._v(" "),s("h3",{attrs:{id:"zk-集群有哪些角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zk-集群有哪些角色"}},[a._v("#")]),a._v(" zk 集群有哪些角色")]),a._v(" "),s("p",[a._v("![2021-07-21 am8.30.28](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-21 am8.30.28.png)")]),a._v(" "),s("h3",{attrs:{id:"分布式集群中-master-节点的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式集群中-master-节点的作用"}},[a._v("#")]),a._v(" 分布式集群中 Master 节点的作用")]),a._v(" "),s("p",[a._v("![2021-07-21 am8.31.27](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-21 am8.31.27.png)")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("tcp/ip")]),a._v(" "),s("h3",{attrs:{id:"粘包-拆包怎么解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#粘包-拆包怎么解决"}},[a._v("#")]),a._v(" 粘包 ，拆包怎么解决？")]),a._v(" "),s("p",[a._v("![2021-07-21 am8.33.30](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-21 am8.33.30.png)")]),a._v(" "),s("h3",{attrs:{id:"netty-底层是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netty-底层是怎么实现的"}},[a._v("#")]),a._v(" netty 底层是怎么实现的")]),a._v(" "),s("p",[a._v("nio")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("jvm")]),a._v(" "),s("h3",{attrs:{id:"说一下-jvm-有哪几部分组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-jvm-有哪几部分组成"}},[a._v("#")]),a._v(" 说一下 jvm 有哪几部分组成")]),a._v(" "),s("p",[a._v("![2021-07-21 am8.37.58](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-21 am8.37.58.png)")]),a._v(" "),s("h3",{attrs:{id:"一个对象创建到创建完成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个对象创建到创建完成"}},[a._v("#")]),a._v(" 一个对象创建到创建完成")]),a._v(" "),s("h3",{attrs:{id:"常见的垃圾回收算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的垃圾回收算法"}},[a._v("#")]),a._v(" 常见的垃圾回收算法")]),a._v(" "),s("ul",[s("li",[a._v("引用计数")]),a._v(" "),s("li",[a._v("复制")]),a._v(" "),s("li",[a._v("标记清除")]),a._v(" "),s("li",[a._v("标记整理")])]),a._v(" "),s("h3",{attrs:{id:"列举下垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列举下垃圾回收器"}},[a._v("#")]),a._v(" 列举下垃圾回收器")]),a._v(" "),s("h3",{attrs:{id:"cms-用的什么垃圾回收算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms-用的什么垃圾回收算法"}},[a._v("#")]),a._v(" CMS 用的什么垃圾回收算法")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("kafka")]),a._v(" "),s("h3",{attrs:{id:"kafka-如何实现高性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-如何实现高性能"}},[a._v("#")]),a._v(" kafka 如何实现高性能")]),a._v(" "),s("ul",[s("li",[a._v("顺序写")]),a._v(" "),s("li",[a._v("预读")]),a._v(" "),s("li",[a._v("零拷贝")])]),a._v(" "),s("h3",{attrs:{id:"存储原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储原理"}},[a._v("#")]),a._v(" 存储原理")]),a._v(" "),s("h3",{attrs:{id:"丢数据和数据重复的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#丢数据和数据重复的情况"}},[a._v("#")]),a._v(" 丢数据和数据重复的情况")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("redis")]),a._v(" "),s("h3",{attrs:{id:"缓存雪崩-穿透-击穿的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩-穿透-击穿的问题"}},[a._v("#")]),a._v(" 缓存雪崩，穿透，击穿的问题")]),a._v(" "),s("p",[a._v("雪崩：大面积 key 失效")]),a._v(" "),s("p",[a._v("穿透：黑客攻击，故意请求不存在的 key")]),a._v(" "),s("p",[a._v("击穿：热点 key 失效")]),a._v(" "),s("p",[a._v("如何解决")]),a._v(" "),s("h3",{attrs:{id:"redis-字符串的底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-字符串的底层数据结构"}},[a._v("#")]),a._v(" redis 字符串的底层数据结构")]),a._v(" "),s("p",[a._v("简单动态字符串 SDS")]),a._v(" "),s("h3",{attrs:{id:"list-的底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list-的底层数据结构"}},[a._v("#")]),a._v(" list 的底层数据结构")]),a._v(" "),s("ul",[s("li",[a._v("Ziplist: 列表对象所有字符串元素长度都小于 64 字节；元素数量小于 512")]),a._v(" "),s("li",[a._v("双向链表：")])]),a._v(" "),s("h3",{attrs:{id:"hash-的底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-的底层数据结构"}},[a._v("#")]),a._v(" hash 的底层数据结构")]),a._v(" "),s("ul",[s("li",[a._v("ziplist")]),a._v(" "),s("li",[a._v("哈希表")])]),a._v(" "),s("h3",{attrs:{id:"set-的底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-的底层数据结构"}},[a._v("#")]),a._v(" set 的底层数据结构")]),a._v(" "),s("ul",[s("li",[a._v("inset")]),a._v(" "),s("li",[a._v("哈希表")])]),a._v(" "),s("h3",{attrs:{id:"zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[a._v("#")]),a._v(" zset")]),a._v(" "),s("ul",[s("li",[a._v("ziplist")]),a._v(" "),s("li",[a._v("跳表")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("elasticsearch")]),a._v(" "),s("h3",{attrs:{id:"路由算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路由算法"}},[a._v("#")]),a._v(" 路由算法")]),a._v(" "),s("h3",{attrs:{id:"tf-idf-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tf-idf-算法"}},[a._v("#")]),a._v(" TF/IDF 算法")]),a._v(" "),s("p",[a._v("![2021-07-21 pm1.48.38](https://muyids.oss-cn-beijing.aliyuncs.com/2021-07-21 pm1.48.38.png)")]),a._v(" "),s("hr")])}),[],!1,null,null,null);s.default=r.exports}}]);