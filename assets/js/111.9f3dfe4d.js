(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{384:function(e,v,_){"use strict";_.r(v);var a=_(14),s=Object(a.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"合并特性分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#合并特性分支"}},[e._v("#")]),e._v(" 合并特性分支")]),e._v(" "),v("p",[e._v("既然你应该很熟悉 fetch、pull、push 了，现在我们要通过一个新的工作流来测试你的这些技能。")]),e._v(" "),v("p",[e._v("在大型项目中开发人员通常会在（从 "),v("code",[e._v("main")]),e._v(" 上分出来的）特性分支上工作，工作完成后只做一次集成。这跟前面课程的描述很相像（把 side 分支推送到远程仓库），不过本节我们会深入一些.")]),e._v(" "),v("p",[e._v("但是有些开发人员只在 main 上做 push、pull —— 这样的话 main 总是最新的，始终与远程分支 (o/main) 保持一致。")]),e._v(" "),v("p",[e._v("对于接下来这个工作流，我们集成了两个步骤：")]),e._v(" "),v("ul",[v("li",[e._v("将特性分支集成到 "),v("code",[e._v("main")]),e._v(" 上")]),e._v(" "),v("li",[e._v("推送并更新远程分支")])]),e._v(" "),v("h1",{attrs:{id:"为什么不用-merge-呢"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不用-merge-呢"}},[e._v("#")]),e._v(" 为什么不用 merge 呢?")]),e._v(" "),v("p",[e._v("为了 push 新变更到远程仓库，你要做的就是"),v("strong",[e._v("包含")]),e._v("远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 "),v("code",[e._v("o/main")]),e._v("）中的最新变更就可以了，至于具体是用 rebase 还是 merge，并没有限制。")]),e._v(" "),v("p",[e._v("那么既然没有规定限制，为何前面几节都在着重于 rebase 呢？为什么在操作远程分支时不喜欢用 "),v("code",[e._v("merge")]),e._v(" 呢？")]),e._v(" "),v("p",[e._v("在开发社区里，有许多关于 merge 与 rebase 的讨论。以下是关于 rebase 的优缺点：")]),e._v(" "),v("p",[e._v("优点:")]),e._v(" "),v("ul",[v("li",[e._v("Rebase 使你的提交树变得很干净, 所有的提交都在一条线上")])])])}),[],!1,null,null,null);v.default=s.exports}}]);