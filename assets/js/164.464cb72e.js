(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{437:function(a,t,l){"use strict";l.r(t);var v=l(14),e=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"java-并发篇-种子题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-并发篇-种子题目"}},[a._v("#")]),a._v(" JAVA 并发篇 - 种子题目")]),a._v(" "),t("h4",{attrs:{id:"_1-java-如何开启线程-怎么保证线程安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-如何开启线程-怎么保证线程安全"}},[a._v("#")]),a._v(" 1.JAVA 如何开启线程？怎么保证线程安全？")]),a._v(" "),t("p",[a._v("线程和进程的区别：进程操作系统资源分配的最小单元，线程操作系统调度的最小单元，线程属于进程")]),a._v(" "),t("p",[a._v("如何开启线程？")]),a._v(" "),t("ul",[t("li",[a._v("继承 thread 类，重写 run 方法")]),a._v(" "),t("li",[a._v("实现 Runable 接口，实现 run 方法")]),a._v(" "),t("li",[a._v("实现 Callable 接口，实现 call 方法，通过 FutureTask 创建一个线程，获取线程执行 的返回值")]),a._v(" "),t("li",[a._v("通过线程池来开启线程\n怎么保证线程安全？")])]),a._v(" "),t("p",[a._v("(啰嗦几句：线程安全的本质是对资源访问的串行化，实现核心原理是加锁；分布式场景下全局串行化一般通过分布式锁来实现，进程（线程）串行化不同语言实现的机制有所不同)")]),a._v(" "),t("p",[a._v("java 语言线程安全实现：加锁；1.JVM 提供的锁，也就是 Synchronized 关键字；2.JDK 提供的各种 Lock 类")]),a._v(" "),t("h4",{attrs:{id:"_2-volatile-和-synchronized-有什么区别-volatile-能不能保证线程安全-dcl-double-check-lock-为什么要加-volatile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-volatile-和-synchronized-有什么区别-volatile-能不能保证线程安全-dcl-double-check-lock-为什么要加-volatile"}},[a._v("#")]),a._v(" 2.Volatile 和 Synchronized 有什么区别？Volatile 能不能保证线程安全？DCL(Double Check Lock )为什么要加 Volatile?")]),a._v(" "),t("ol",[t("li",[a._v("Synchronized 关键字用来加锁，volatile 只是让变量具有线程可见性")]),a._v(" "),t("li",[a._v("volatile 不能保证线程安全，只能保证线程可见性，不能保证原子性")]),a._v(" "),t("li",[a._v("volatile "),t("strong",[a._v("禁止指令重排序")]),a._v("，在 DCL 中，防止高并发场景下，指令重排序造成的线程安全问题。")])]),a._v(" "),t("h4",{attrs:{id:"_3-java-线程锁机制是怎样的-偏向锁、轻量级锁、重量级锁有什么区别-锁机制是如何升级的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-java-线程锁机制是怎样的-偏向锁、轻量级锁、重量级锁有什么区别-锁机制是如何升级的"}},[a._v("#")]),a._v(" 3.JAVA 线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？")]),a._v(" "),t("h4",{attrs:{id:"_4-谈谈你对-aqs-的理解。aqs-如何实现可重入锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-谈谈你对-aqs-的理解。aqs-如何实现可重入锁"}},[a._v("#")]),a._v(" 4.谈谈你对 AQS 的理解。AQS 如何实现可重入锁？")]),a._v(" "),t("ol",[t("li",[a._v("AQS 抽象队列同步器，是 java 的线程同步框架，是 JDK 中很多锁工具的核心实现框架")]),a._v(" "),t("li",[a._v("AQS 中维护了一个信号量 state 和一个线程组成的双向链表队列")])])])}),[],!1,null,null,null);t.default=e.exports}}]);