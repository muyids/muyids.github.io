(window.webpackJsonp=window.webpackJsonp||[]).push([[697],{970:function(s,t,_){"use strict";_.r(t);var v=_(14),e=Object(v.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[s._v("#")]),s._v(" 背景")]),s._v(" "),t("p",[s._v("互联网应用一般会把"),t("strong",[s._v("用户信息和授权")]),s._v("的逻辑放到一个应用中，而这个应用我们统一称为"),t("strong",[s._v("用户中心")]),s._v("。")]),s._v(" "),t("p",[s._v("用户中心不关心具体的业务逻辑，只处理用户信息相关的管理及授权登录。")]),s._v(" "),t("p",[s._v("当第三方应用需要登录的时候，会把用户的登录请求转发到用户中心处理，处理完毕后，返回给第三方应用，第三方应用根据对应的凭证登录到系统内部。")]),s._v(" "),t("h1",{attrs:{id:"主要功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要功能"}},[s._v("#")]),s._v(" 主要功能")]),s._v(" "),t("p",[s._v("用户中心最重要的两件事：")]),s._v(" "),t("ul",[t("li",[s._v("认证（Authentication）：其实就是登录，验证用户登录信息，下发凭证")]),s._v(" "),t("li",[s._v("授权（Authorization）：判断用户拥有哪些操作权限")])]),s._v(" "),t("h1",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),t("p",[s._v("常见用户登录的方式，一般包括"),t("code",[s._v("手机、邮箱、帐号、三方登录")]),s._v("，三方登录一般会接入"),t("code",[s._v("QQ、微信、微博")]),s._v("这三种方式")]),s._v(" "),t("p",[s._v("不同登录方式，对应不同的验证方式")]),s._v(" "),t("ul",[t("li",[s._v("账号+密码登录\n"),t("ul",[t("li",[s._v("用户在客户端填写 username + password ，然后提交到服务端")]),s._v(" "),t("li",[s._v("服务端拿到用户提交的 username + password 验证")]),s._v(" "),t("li",[s._v("验证通过，服务端下发凭证，客户端使用凭证登录系统")])])]),s._v(" "),t("li",[s._v("手机号+验证码登录\n"),t("ul",[t("li",[s._v("用户发起获取登录验证码请求")]),s._v(" "),t("li",[s._v("服务端生成验证码并保存，同时向用户手机发送验证码")]),s._v(" "),t("li",[s._v("用户发起登录请求（手机号+验证码）")]),s._v(" "),t("li",[s._v("服务端拿到用户提交的"),t("code",[s._v("手机号+验证码")]),s._v("进行验证")]),s._v(" "),t("li",[s._v("验证通过，服务端下发凭证，客户端使用凭证登录系统")])])]),s._v(" "),t("li",[s._v("三方 auth 认证登录\n"),t("ul",[t("li",[s._v("三方 auth 鉴权，获取 accessToken 存储到服务器")]),s._v(" "),t("li",[s._v("服务端拿到用户提交的 accessToken 进行验证")]),s._v(" "),t("li",[s._v("验证通过，服务端下发凭证，客户端使用凭证登录系统\n我们发现，无论何种登录方式，只是前置的验证方式不同，验证成功后，客户端都是使用服务端下发的凭证进入系统")])])])]),s._v(" "),t("h1",{attrs:{id:"单系统应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单系统应用"}},[s._v("#")]),s._v(" 单系统应用")]),s._v(" "),t("ul",[t("li",[s._v("http 是无状态的协议")]),s._v(" "),t("li",[s._v("引入会话机制")])]),s._v(" "),t("h2",{attrs:{id:"session-cookie-方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie-方案"}},[s._v("#")]),s._v(" session+cookie 方案")]),s._v(" "),t("h3",{attrs:{id:"session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),t("p",[s._v("Session 是一种协议，是保持用户状态的协议。")]),s._v(" "),t("h4",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),t("ul",[t("li",[s._v("Web 服务端生成一个 SessionId，存储在浏览器 Cookie 中")]),s._v(" "),t("li",[s._v("Web 服务端将 Session 内容存储在服务器端内存中")]),s._v(" "),t("li",[s._v("在 Response 请求头中通过 set-cookie，返回 SessionId")])]),s._v(" "),t("h4",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("session 中保存的数据的大小要考虑到"),t("strong",[s._v("服务端存储容量")])]),s._v(" "),t("li",[s._v("Session 中不要存储不可恢复的内容")]),s._v(" "),t("li",[s._v("依赖 Session 的关键业务一定要确保客户端开启了 Cookie")]),s._v(" "),t("li",[s._v("Session 丢失，如果是存储在 web 服务器内存，重启后丢失")])]),s._v(" "),t("h3",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),t("h4",{attrs:{id:"工作原理-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理-2"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),t("ul",[t("li",[s._v("在 Request 的时候，浏览器将 Cookie 信息放在"),t("code",[s._v("HTTP-Request Headers")]),s._v("中")]),s._v(" "),t("li",[s._v("在 Response 的时候，浏览器保存"),t("code",[s._v("HTTP-Response Headers")]),s._v("信息中的 Cookie 信息")]),s._v(" "),t("li",[s._v("Cookie 的核心信息包含三个部分：Name、Value、过期时间")]),s._v(" "),t("li",[s._v("Cookie 的保存是覆盖式的，所以 Cookie 的添加、更新、删除对于浏览器来说都是执行设置（set）的动作")])]),s._v(" "),t("h4",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("Cookie 是不能跨域的")]),s._v(" "),t("li",[s._v("Cookie 中的信息很容易被查看，建议加密后存储")]),s._v(" "),t("li",[s._v("Cookie 容易被 XSS 攻击利用，可以设置"),t("code",[s._v("HttpOnly=true")]),s._v("，不允许客户端读写")])]),s._v(" "),t("h1",{attrs:{id:"多系统应用的复杂性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多系统应用的复杂性"}},[s._v("#")]),s._v(" 多系统应用的复杂性")]),s._v(" "),t("p",[s._v("一个大中型 Web 应用往往是由多个系统组成的应用群，不同系统域名可能不同，比如阿里系的淘宝，天猫等")]),s._v(" "),t("p",[s._v("如果使用 session + cookie 的方案，存在以下问题：")]),s._v(" "),t("p",[s._v("session 共享：可以用集中式存储方案解决（Redis 等）")]),s._v(" "),t("p",[s._v("cookie 的跨域限制：")]),s._v(" "),t("p",[s._v("如何解决？")]),s._v(" "),t("ul",[t("li",[s._v("反向代理：不适用于复杂 web")]),s._v(" "),t("li",[s._v("域名一致：现实不允许（taobao.com，tmall.com）")]),s._v(" "),t("li",[s._v("key 值统一：不同 web 框架，不同语言开发，实现成本高")])]),s._v(" "),t("h1",{attrs:{id:"单点登录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单点登录"}},[s._v("#")]),s._v(" 单点登录")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/sso-multi-login.png",alt:"多点登陆vs单点登录"}})]),s._v(" "),t("p",[t("strong",[s._v("多系统应用")]),s._v("："),t("strong",[s._v("系统的复杂性不应该让用户承担")])]),s._v(" "),t("p",[s._v("**SSO 技术：**用户只需要登录一次就可以访问所有相互信任的应用系统")]),s._v(" "),t("h2",{attrs:{id:"单点登录流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单点登录流程"}},[s._v("#")]),s._v(" 单点登录流程")]),s._v(" "),t("ul",[t("li",[s._v("sso 需要一个独立的认证中心")]),s._v(" "),t("li",[s._v("只有认证中心能接受用户的用户名密码等登录信息")]),s._v(" "),t("li",[s._v("其他系统不提供登录入口，只接受认证中心的间接授权")]),s._v(" "),t("li",[s._v("间接授权通过令牌实现\n"),t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/sso-login.jpg",alt:"单点登录原理"}})])]),s._v(" "),t("h2",{attrs:{id:"单点注销流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单点注销流程"}},[s._v("#")]),s._v(" 单点注销流程")]),s._v(" "),t("p",[s._v("单点注销：在一个子系统中注销，所有子系统的会话都将被销毁")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/sso-logout.webp",alt:"单点注销"}})]),s._v(" "),t("h2",{attrs:{id:"session-cookie-的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie-的问题"}},[s._v("#")]),s._v(" session+cookie 的问题")]),s._v(" "),t("ul",[t("li",[s._v("session 共享")]),s._v(" "),t("li",[s._v("cookie 不能跨域")]),s._v(" "),t("li",[s._v("内存存储，存在占用大量服务器内存、Scalability 扩展性问题，用 redis 解决")]),s._v(" "),t("li",[s._v("CSRF:用户很容易受到 CSRF 攻击")])]),s._v(" "),t("h2",{attrs:{id:"缓存-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存-token"}},[s._v("#")]),s._v(" 缓存 token")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("缓存token")]),s._v("的方式跟"),t("code",[s._v("共享Session")]),s._v("的方式异曲同工，都是服务端存储用户信息")]),s._v(" "),t("li",[s._v("站点同步问题，每个不同站点都会跟 SSO 进行同步，站点过多，效率低；可以用做 redis 集群提升效率；")])]),s._v(" "),t("h2",{attrs:{id:"jwt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[s._v("#")]),s._v(" JWT")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://jwt.io/introduction/",target:"_blank",rel:"noopener noreferrer"}},[s._v("jwt 官方介绍"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("JWT 的构成："),t("code",[s._v("header + payload + signature")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/jwt-flow.png",alt:"JWT处理流程"}})]),s._v(" "),t("h3",{attrs:{id:"缺点-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("注销问题、密码重置（签发出去的 Token 没法撤销）")]),s._v(" "),t("li",[s._v("续签问题")])]),s._v(" "),t("h1",{attrs:{id:"安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[s._v("#")]),s._v(" 安全性")]),s._v(" "),t("p",[s._v("在登录流程中，提交的表单中往往会涉及"),t("code",[s._v("密码")]),s._v(" 一类敏感数据，")]),s._v(" "),t("p",[s._v("应怎样防止密码被泄露？对称加密还是非对称加密? 如果是对称加密，客户端被黑客反编译，就能拿到密钥，那么所有用户的密码就会存在非常大的泄露风险？如果是非对称加密，私钥要放在哪里才能保证安全？")]),s._v(" "),t("p",[s._v("通用简单的解决方案: "),t("code",[s._v("Https + MD5 + 随机盐")]),s._v(" ;")]),s._v(" "),t("p",[s._v("客户端端提交 "),t("code",[s._v("MD5(password)")]),s._v(" 密码，服务端通过"),t("code",[s._v("MD5 (Salt + MD5(passowrd))")]),s._v("的逻辑来计算最终密码，同时"),t("code",[s._v("Salt")]),s._v("只会出现在服务端，且每个用户采用不同 "),t("code",[s._v("Salt")]),s._v(" 的方式来生成 ;")]),s._v(" "),t("p",[s._v("这一系列过程中，都没有接触到原始的用户密码，如果出现用户的密码被劫持的话，只会发生在用户在提交密码前截获，可以通过数字证书、密码控件解决")]),s._v(" "),t("p",[t("strong",[s._v("进阶方案：")]),t("a",{attrs:{href:"http://www.muyids.com/posts/rsa-token/",target:"_blank",rel:"noopener noreferrer"}},[s._v("基于两次 RSA 加密的动态 Token 解决方案"),t("OutboundLink")],1)]),s._v(" "),t("h1",{attrs:{id:"业内方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业内方案"}},[s._v("#")]),s._v(" 业内方案")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.passportjs.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("passportjs 生态"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/apache/shiro",target:"_blank",rel:"noopener noreferrer"}},[s._v("Apache Shiro"),t("OutboundLink")],1),s._v(" "),t("ul",[t("li",[s._v("简单易用")])])]),s._v(" "),t("li",[t("a",{attrs:{href:"projects.spring.io"}},[s._v("Spring Security")])]),s._v(" "),t("li",[t("a",{attrs:{href:"https://jwt.io/introduction/",target:"_blank",rel:"noopener noreferrer"}},[s._v("JSON Web Token (JWT)"),t("OutboundLink")],1),s._v(" "),t("ul",[t("li",[s._v("自身跨域")])])]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/casbin/jcasbin",target:"_blank",rel:"noopener noreferrer"}},[s._v("jCasbin"),t("OutboundLink")],1),s._v(" "),t("ul",[t("li",[s._v("jCasbin 采用了元模型的设计思想，支持多种经典的访问控制方案，如 ACL、RBAC、ABAC，还支持对 RESTful API 的控制")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);