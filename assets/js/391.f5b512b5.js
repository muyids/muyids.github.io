(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{664:function(v,a,_){"use strict";_.r(a);var s=_(14),t=Object(s.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[v._v("https://www.bilibili.com/video/BV1LC4y1a786")]),v._v(" "),a("h4",{attrs:{id:"简单介绍一下自己"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单介绍一下自己"}},[v._v("#")]),v._v(" 简单介绍一下自己")]),v._v(" "),a("p",[v._v("我叫 xxx, 某某牛逼大学，计算机相关专业，本科毕业，")]),v._v(" "),a("p",[v._v("7 年工作经验，15 年来北京，首先去了一家智能硬件创业公司做平台开发（前后端+devops+docker 微服务），做了两年 java+nodejs，")]),v._v(" "),a("p",[v._v("然后去了一家互联网媒体公司，做了三年 nodejs，接触了一些高并发的场景（游戏，活动秒杀等）")]),v._v(" "),a("p",[v._v("然后 2020 年初，疫情，来了外研社，做了一年半，一开始接手了一些 nodejs 的项目，后来参与了 java 的一些业务系统开发，主要是 springcloud 技术栈")]),v._v(" "),a("h4",{attrs:{id:"说一下对分布式的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下对分布式的理解"}},[v._v("#")]),v._v(" "),a("strong",[v._v("说一下对分布式的理解")])]),v._v(" "),a("p",[v._v("<1> 首先字面意思，分布式，就是把不同的服务、比如数据库、缓存、业务提供服务部署在不同的服务器上")]),v._v(" "),a("p",[v._v("<2> 好处，有很多，比如可以")]),v._v(" "),a("p",[v._v("通过增加服务节点，增大系统容量；")]),v._v(" "),a("p",[v._v("避免单点故障，加强系统可用性；")]),v._v(" "),a("p",[v._v("进行功能模块化拆分，服务拆解，比如拆解成 不同的 DDD 领域模块 ，高内聚低耦合，并行的进行开发和发布，提高生产效率；")]),v._v(" "),a("p",[v._v("系统扩展性更高；")]),v._v(" "),a("p",[v._v("团队协作流程更加顺畅；")]),v._v(" "),a("p",[v._v("<3> 问题和挑战：")]),v._v(" "),a("p",[v._v("服务间的调度，不同系统间如何互相调用，一般是通过 rpc 请求的方式，但是网络请求随之而来也会产生一些问题，")]),v._v(" "),a("p",[v._v("比如 时序性 Timing ，如何判断不同网络环境下的机器进程中的事件发生的先后顺序")]),v._v(" "),a("p",[v._v("并发性 Concurrency ， 不同网络环境下的机器如何对共同的资源进行访问，互不干扰；比如同时访问数据库")]),v._v(" "),a("p",[v._v("健壮性 Robustness， 高可用， 服务雪崩，熔断，降级")]),v._v(" "),a("p",[v._v("一致性 consistency，无论访问哪个节点，都能获得相同的结果")]),v._v(" "),a("p",[v._v("现在，比较流行的分布式系统架构 通常是 微服务架构，对于不同的服务可以交给不同的团队进行独立的开发，运维，各团队专注于自己的业务，大幅度提高了生产效率")]),v._v(" "),a("h4",{attrs:{id:"springcloud-里面的几个组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-里面的几个组件"}},[v._v("#")]),v._v(" springcloud 里面的几个组件？")]),v._v(" "),a("p",[v._v("服务注册与发现：首先，不同的服务，要统一进行管理，这时候我们需要一个，"),a("strong",[v._v("注册中心")]),v._v("（服务注册与发现）： nacos，（其他的比如 eruka（不维护）, zookeeper（cp），etcd(golang 开发的)... 等等）；")]),v._v(" "),a("blockquote",[a("p",[v._v("使用，首先 pom.xml 中引入 spring-cloud-starter-alibaba-nacos-discovery 依赖，yml 中进行 nacos 的服务配置，主启动类加上 @EnableDiscoveryClient 注解， 当服务启动的时候就会请求 post:xx/ns/instance 将服务地址自动注册到配置中心，这时候我们可以通过调用注册中心的 get:xx/ns/instance/list 来获取服务列表")]),v._v(" "),a("p",[v._v("（注意的 yml 配置项： ephemeral [ɪˈfemərəl]: false # 如果是持久化存储，要求我们的 nacos 必须是集群对外服务，这时候使用 raft 协议 进行服务的管理）")])]),v._v(" "),a("p",[v._v("服务调用：然后，服务与服务之间需要调用，一个服务往往不止一个实例，这时候我们用了 ribbon（集成了 feign），来进行客户端的负载均衡；")]),v._v(" "),a("blockquote",[a("p",[v._v("使用就是 从服务中心通过 get:xx/ns/instance/list 来获取服务列表，按照一定的负载均衡策略（比如 RoundRobin、Random、最小响应时间、加权、哈希等），对服务进行调用；")]),v._v(" "),a("p",[v._v("也可以自定义负载均衡策略；")])]),v._v(" "),a("p",[v._v("网关：全局性统一服务（认证与鉴权、跨域配置、业务规则和参数校验、路由与负载均衡、灰度策略）、稳定与安全（全局性和服务级别流控、防止 web 攻击、黑白 IP 名单等）")]),v._v(" "),a("blockquote",[a("p",[v._v("三大概念：路由、断言、过滤器")]),v._v(" "),a("p",[v._v("集成 nacos 自动进行路由转发")]),v._v(" "),a("p",[v._v("集成 sentinel 进行流控配置（滑动窗口算法）")])]),v._v(" "),a("p",[v._v("流控： Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。")]),v._v(" "),a("blockquote",[a("p",[v._v("三种模式：原始模式（内存存储->重启失效）；pull 模式（RDS 数据库、文件等规则中心拉取->不保证一致性，不保证高可用）；push 模式（规则中心统一推送，如 nacos，zookeeper 等，生产环境推荐）")]),v._v(" "),a("p",[v._v("注意：当前版本的 sentinel 控制台修改的规则只会应用于内存，不会同步到 nacos 持久化存储")])]),v._v(" "),a("p",[v._v("分布式事务：Seata 为用户提供了 "),a("strong",[v._v("AT、TCC、SAGA 和 XA")]),v._v(" 事务模式，为用户打造一站式的分布式解决方案")]),v._v(" "),a("blockquote",[a("p",[v._v("2PC 的问题：过于依赖"),a("strong",[v._v("可靠的网络")]),v._v("和"),a("strong",[v._v("事务管理器的高可用")]),v._v("；存在同步阻塞，单点故障，数据不一致等问题")]),v._v(" "),a("p",[v._v("AT 模式：无侵入；仅支持满足 ACID 事务特性的关系型数据库")]),v._v(" "),a("blockquote",[a("p",[v._v("一阶段预处理: seata 拦截业务 sql，生成并保存 before image 和 after image(redo 、undo log)，执行但不提交")]),v._v(" "),a("p",[v._v("二阶段提交：执行 sql 提交操作，删除 before image、after image、行锁")]),v._v(" "),a("p",[v._v("二阶段回滚：还原数据，删除 before image、after image、行锁")])]),v._v(" "),a("p",[v._v("TCC 模式：用户根据自己的业务场景实现 Try、Confirm、Cancel 三个操作")]),v._v(" "),a("blockquote",[a("p",[a("strong",[v._v("TCC 与 AT 的对比")])]),v._v(" "),a("p",[v._v("TCC 业务侵入性较强，并且需要自己实现相关的事务控制逻辑")]),v._v(" "),a("p",[v._v("TCC 没有锁，性能更好")])])]),v._v(" "),a("p",[v._v("链路追踪：SkyWalking：基于"),a("strong",[v._v("字节码注入")]),v._v("的调用链分析；")]),v._v(" "),a("blockquote",[a("p",[v._v("oapservice 集群：负责处理监控数据；接收 agent 回传，响应前端查询")]),v._v(" "),a("p",[v._v("agent：与业务系统绑定在一起，负责收集各种监控数据")]),v._v(" "),a("p",[v._v("webapp：前端页面，用于展示数据")])]),v._v(" "),a("h4",{attrs:{id:"认证是怎么设计的-jwt-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认证是怎么设计的-jwt-是什么"}},[v._v("#")]),v._v(" 认证是怎么设计的？jwt 是什么？")]),v._v(" "),a("p",[v._v("session + cookie 的方案；弊端：本地保存 sessionId，本地服务端保存 session 内容，服务端存储有限，重启内存丢失，切换机器访问后登录失效；")]),v._v(" "),a("p",[v._v("session 共享：集中式存储（redis）可以解决上面的问题；但是 cookie 不能跨域，这时候产生了 token 的方案；")]),v._v(" "),a("p",[v._v("token 也需要额外的存储；")]),v._v(" "),a("p",[v._v("有没有不需要额外存储空间的？-》 JWT 的方案")]),v._v(" "),a("blockquote",[a("p",[v._v("三部分：header + payload + signature；签名算法，用户信息（不要存没有加密的敏感信息），签名（检验数据包是否篡改）")])]),v._v(" "),a("p",[v._v("缺点：签发出去的 Token 没法撤销（登出、修改密码场景，前端删除），没有解决续签问题（使用两个过期时间，一个一天，一个 30 天实现续签）")]),v._v(" "),a("h4",{attrs:{id:"权限是怎么设计的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#权限是怎么设计的"}},[v._v("#")]),v._v(" 权限是怎么设计的？")]),v._v(" "),a("p",[v._v("基于 RBAC 设计，用户、角色、权限")]),v._v(" "),a("p",[v._v("权限区分：功能权限、数据权限")]),v._v(" "),a("h4",{attrs:{id:"项目用的权限框架是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目用的权限框架是什么"}},[v._v("#")]),v._v(" 项目用的权限框架是什么？")]),v._v(" "),a("p",[v._v("shiro, spring security")]),v._v(" "),a("h4",{attrs:{id:"分布式事务是怎么处理的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务是怎么处理的"}},[v._v("#")]),v._v(" 分布式事务是怎么处理的？")]),v._v(" "),a("p",[v._v("Seata")]),v._v(" "),a("p",[v._v("2PC 二阶段提交")]),v._v(" "),a("p",[v._v("AT 模式，只适用于 ACID 属性的关系型数据库；")]),v._v(" "),a("p",[v._v("TCC 模式：业务自定义 TCC，更加灵活")]),v._v(" "),a("p",[v._v("本地消息表+最大努力通知：")]),v._v(" "),a("p",[v._v("（消息队列，消息中继器订阅消息表）")]),v._v(" "),a("p",[v._v("好处: 没有锁，性能高")]),v._v(" "),a("h4",{attrs:{id:"tcc-二阶段提交-有没有基于-tcc-的一些其他解决方案-比如说最大努力通知-基于消息队列来说"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcc-二阶段提交-有没有基于-tcc-的一些其他解决方案-比如说最大努力通知-基于消息队列来说"}},[v._v("#")]),v._v(" tcc 二阶段提交 有没有基于 tcc 的一些其他解决方案；比如说最大努力通知(基于消息队列来说)？")]),v._v(" "),a("h4",{attrs:{id:"kafka-用过吗-怎么保证消息可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-用过吗-怎么保证消息可靠性"}},[v._v("#")]),v._v(" Kafka 用过吗？怎么保证消息可靠性")]),v._v(" "),a("p",[v._v("生产者：副本机制，ack，isr，")]),v._v(" "),a("p",[v._v("有遇到 consumer 收不到消息的情况吗")]),v._v(" "),a("h4",{attrs:{id:"更新数据库-redis-缓存数据怎么去更新-双写一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新数据库-redis-缓存数据怎么去更新-双写一致性"}},[v._v("#")]),v._v(" 更新数据库 redis 缓存数据怎么去更新(双写一致性)？")]),v._v(" "),a("p",[v._v("Cache aside pattern")]),v._v(" "),a("h4",{attrs:{id:"redis-除了做缓存你们还做其他东西吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-除了做缓存你们还做其他东西吗"}},[v._v("#")]),v._v(" redis 除了做缓存你们还做其他东西吗？")]),v._v(" "),a("h4",{attrs:{id:"redis-有没有用它做分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-有没有用它做分布式锁"}},[v._v("#")]),v._v(" redis 有没有用它做分布式锁？")]),v._v(" "),a("h4",{attrs:{id:"zookeeper-是怎么去实现分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-是怎么去实现分布式锁"}},[v._v("#")]),v._v(" zookeeper 是怎么去实现分布式锁？")]),v._v(" "),a("p",[v._v("临时顺序节点 + watch 机制")]),v._v(" "),a("h4",{attrs:{id:"redis-缓存和我们框架项目去做缓存-有什么其他区别-比如用-map-做缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-缓存和我们框架项目去做缓存-有什么其他区别-比如用-map-做缓存"}},[v._v("#")]),v._v(" redis 缓存和我们框架项目去做缓存，有什么其他区别(比如用 map 做缓存)？")]),v._v(" "),a("p",[v._v("全局的")]),v._v(" "),a("h4",{attrs:{id:"数据库优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库优化"}},[v._v("#")]),v._v(" 数据库优化？")]),v._v(" "),a("h4",{attrs:{id:"有没有用过相关命令去查看-sql-执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有没有用过相关命令去查看-sql-执行"}},[v._v("#")]),v._v(" 有没有用过相关命令去查看 sql 执行？")]),v._v(" "),a("p",[v._v("explain")]),v._v(" "),a("p",[v._v("show processlist")]),v._v(" "),a("h4",{attrs:{id:"分表-分好以后怎么去确认数据在那张表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分表-分好以后怎么去确认数据在那张表"}},[v._v("#")]),v._v(" 分表！分好以后怎么去确认数据在那张表？")]),v._v(" "),a("p",[v._v("map")]),v._v(" "),a("p",[v._v("基因法")]),v._v(" "),a("h4",{attrs:{id:"分表策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分表策略"}},[v._v("#")]),v._v(" 分表策略？")]),v._v(" "),a("p",[v._v("range")]),v._v(" "),a("p",[v._v("hash")]),v._v(" "),a("h4",{attrs:{id:"分表以后查询一个范围但跨表了-怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分表以后查询一个范围但跨表了-怎么办"}},[v._v("#")]),v._v(" 分表以后查询一个范围但跨表了？怎么办？")]),v._v(" "),a("p",[v._v("Map")]),v._v(" "),a("p",[v._v("宽表")]),v._v(" "),a("h4",{attrs:{id:"union-和-unionall-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#union-和-unionall-区别"}},[v._v("#")]),v._v(" union 和 unionall 区别？")]),v._v(" "),a("h4",{attrs:{id:"索引有去了解他的底层吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引有去了解他的底层吗"}},[v._v("#")]),v._v(" 索引有去了解他的底层吗")])])}),[],!1,null,null,null);a.default=t.exports}}]);