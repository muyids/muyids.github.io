(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{640:function(_,v,t){"use strict";t.r(v);var e=t(14),r=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h3",{attrs:{id:"分布式-id-系统设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式-id-系统设计"}},[_._v("#")]),_._v(" 分布式 ID 系统设计")]),_._v(" "),v("p",[_._v("当我们的业务量很小，数据存储在单库或者单表的时候，我们可以用数据库自动生成的 id 作为主键，随着业务规模的扩大，我们的数据可能面临分库分表，我们需要自己生成业务主键，这时候需要引入单独的服务或者组件来生成我们的业务主键 id；业内已经有了很多分布式 id 的生产方案，比如雪花算法，基于 zookeeper 等方案，本篇介绍一下这些方案的实现方式以及优缺点。")]),_._v(" "),v("h3",{attrs:{id:"思维导图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思维导图"}},[_._v("#")]),_._v(" 思维导图")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/5ed85e2ce0b34d4139fc4c57.png",alt:"分布式ID系统设计-思维导图"}})]),_._v(" "),v("h2",{attrs:{id:"业务场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#业务场景"}},[_._v("#")]),_._v(" 业务场景")]),_._v(" "),v("p",[_._v("业务系统对于 ID 的要求有哪些？")]),_._v(" "),v("ul",[v("li",[_._v("全局唯一性：不能出现重复的 ID 号，既然是唯一标识，这是最基本的要求。")]),_._v(" "),v("li",[_._v("趋势递增：在"),v("code",[_._v("MySQL InnoDB")]),_._v("引擎中使用的是 "),v("strong",[_._v("聚集索引")]),_._v("，由于多数"),v("code",[_._v("RDBMS")]),_._v("使用"),v("code",[_._v("B-tree")]),_._v("的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用"),v("strong",[_._v("有序的主键")]),_._v("保证写入性能。")]),_._v(" "),v("li",[_._v("单调递增：保证下一个 ID 大于上一个 ID，例如事务版本号、IM 增量消息、排序等特殊需求。")]),_._v(" "),v("li",[_._v("信息安全：如果 ID 是连续的，恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定 URL 即可；如果是订单号就更危险了，竞对可以直接知道我们一天的单量。所以在一些应用场景下，会需要 ID 无规则、不规则。")])]),_._v(" "),v("h2",{attrs:{id:"性能要求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#性能要求"}},[_._v("#")]),_._v(" 性能要求")]),_._v(" "),v("p",[_._v("如果 ID 生成系统瘫痪，整个系统的无法获取新生成 ID 号，业务系统会面临崩溃")]),_._v(" "),v("p",[_._v("因此 ID 系统在保证 "),v("strong",[_._v("ID 号码满足自身的要求")]),_._v(" 同时，还需要满足以下性能要求")]),_._v(" "),v("ol",[v("li",[_._v("平均延迟和 TP999 延迟都要尽可能低")]),_._v(" "),v("li",[_._v("可用性 5 个 9")]),_._v(" "),v("li",[_._v("高 QPS")])]),_._v(" "),v("h2",{attrs:{id:"业内方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#业内方案"}},[_._v("#")]),_._v(" 业内方案")]),_._v(" "),v("p",[_._v("9 种分布式 ID 解决方案：")]),_._v(" "),v("ol",[v("li",[_._v("数据库自增 ID\n"),v("ul",[v("li",[_._v("读写瓶颈")]),_._v(" "),v("li",[_._v("单点故障风险大")])])]),_._v(" "),v("li",[_._v("UUID 随机数\n"),v("ul",[v("li",[_._v("长度过长")]),_._v(" "),v("li",[_._v("无序性")])])]),_._v(" "),v("li",[_._v("雪花算法（SnowFlake）\n"),v("ul",[v("li",[_._v("时钟回拨问题")]),_._v(" "),v("li",[_._v("workId 相同造成 id 冲突")])])]),_._v(" "),v("li",[_._v("数据库多主模式\n"),v("ul",[v("li",[_._v("集群的扩展问题")]),_._v(" "),v("li",[_._v("未从根本上解决高并发的性能问题")])])]),_._v(" "),v("li",[_._v("号段模式\n"),v("ul",[v("li",[_._v("通过预分配号段的方式，减小了 DB 的压力，解决了并发场景的性能问题")]),_._v(" "),v("li",[_._v("采用版本号乐观锁的方式更新，保证了并发场景下数据的准确性")])])]),_._v(" "),v("li",[_._v("Redis\n"),v("ul",[v("li",[_._v("通过 incr 命令实现 ID 的原子性自增")]),_._v(" "),v("li",[_._v("redis 持久化问题\n"),v("ul",[v("li",[_._v("RDB：持久化不及时，重启后出现 ID 重复")]),_._v(" "),v("li",[_._v("AOF：重启恢复数据时间过长")])])])])]),_._v(" "),v("li",[_._v("滴滴出品（TinyID）\n"),v("ul",[v("li",[_._v("基于号段模式")])])]),_._v(" "),v("li",[_._v("百度 （Uidgenerator）\n"),v("ul",[v("li",[_._v("支持自定义时间戳、工作机器 ID 和序列号等各部分的位数")]),_._v(" "),v("li",[_._v("支持用户自定义 workId 的生成策略，应用每次启动消费一个 workId")])])]),_._v(" "),v("li",[_._v("美团（Leaf）\n"),v("ul",[v("li",[_._v("同时支持号段模式和 snowflake 算法模式")]),_._v(" "),v("li",[_._v("snowflake 模式依赖 ZooKeeper 解决了时钟回拨问题\n我们主要讲下前三种，以及外研基于"),v("code",[_._v("号段模式")]),_._v("实现的分布式 ID 系统")])])])]),_._v(" "),v("h2",{attrs:{id:"数据库自增-id"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库自增-id"}},[_._v("#")]),_._v(" 数据库自增 ID")]),_._v(" "),v("p",[_._v("以 MySQL 举例，利用给字段设置"),v("code",[_._v("auto_increment_increment")]),_._v("和"),v("code",[_._v("auto_increment_offset")]),_._v("来保证 ID 自增。")]),_._v(" "),v("h3",{attrs:{id:"优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[_._v("#")]),_._v(" 优点")]),_._v(" "),v("ul",[v("li",[_._v("非常简单，利用现有数据库系统的功能实现，成本小，有 DBA 专业维护。")]),_._v(" "),v("li",[_._v("ID 号单调自增，可以实现一些对 ID 有特殊要求的业务。")])]),_._v(" "),v("h3",{attrs:{id:"缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[_._v("#")]),_._v(" 缺点")]),_._v(" "),v("ul",[v("li",[_._v("强依赖 DB，当 DB 异常时整个系统不可用，属于致命问题。\n"),v("ul",[v("li",[_._v("配置主从复制可以尽可能的增加可用性，但是数据一致性在特殊情况下难以保证。")]),_._v(" "),v("li",[_._v("主从切换时的不一致可能会导致重复发号。")])])]),_._v(" "),v("li",[_._v("ID 发号性能瓶颈限制在单台 MySQL 的读写性能。\n对于 MySQL 性能问题，可用如下方案解决：")])]),_._v(" "),v("p",[_._v("在分布式系统中我们可以多部署几台机器，每台机器设置不同的初始值，且步长和机器数相等。\n比如有两台机器，设置步长 step 为 2，TicketServer1 的初始值为 1（1，3，5，7，9，11…）、TicketServer2 的初始值为 2（2，4，6，8，10…）")]),_._v(" "),v("h2",{attrs:{id:"uuid"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[_._v("#")]),_._v(" UUID")]),_._v(" "),v("p",[v("code",[_._v("UUID(Universally Unique Identifier)")]),_._v("的标准型式包含 32 个 16 进制数字，以连字号分为五段，形式为 8-4-4-4-12 的 36 个字符")]),_._v(" "),v("p",[_._v("示例："),v("code",[_._v("550e8400-e29b-41d4-a716-446655440000")])]),_._v(" "),v("p",[_._v("优点：")]),_._v(" "),v("ul",[v("li",[_._v("性能非常高：本地生成，没有网络消耗。")])]),_._v(" "),v("p",[_._v("缺点：")]),_._v(" "),v("ul",[v("li",[_._v("不易于存储：UUID 太长，16 字节 128 位，通常以 36 长度的字符串表示，很多场景不适用。")]),_._v(" "),v("li",[_._v("信息不安全：基于 MAC 地址生成 UUID 的算法可能会造成 MAC 地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。")]),_._v(" "),v("li",[_._v("ID 作为主键时在特定的环境会存在一些问题，比如做 DB 主键的场景下，UUID 就非常不适用：")])]),_._v(" "),v("p",[v("strong",[_._v("MySQL 官方有明确的建议主键要尽量越短越好，36 个字符长度的 UUID 不符合要求。")])]),_._v(" "),v("h3",{attrs:{id:"优点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[_._v("#")]),_._v(" 优点")]),_._v(" "),v("ul",[v("li",[_._v("性能非常高：本地生成，没有网络消耗。")])]),_._v(" "),v("h3",{attrs:{id:"缺点-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[_._v("#")]),_._v(" 缺点")]),_._v(" "),v("ul",[v("li",[_._v("不易于存储：UUID 太长，16 字节 128 位，通常以 36 长度的字符串表示，很多场景不适用。")]),_._v(" "),v("li",[_._v("信息不安全：基于 MAC 地址生成 UUID 的算法可能会造成 MAC 地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。")]),_._v(" "),v("li",[_._v("ID 作为主键时在特定的环境会存在一些问题，比如做 DB 主键的场景下，UUID 就非常不适用：")])]),_._v(" "),v("h2",{attrs:{id:"雪花算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#雪花算法"}},[_._v("#")]),_._v(" 雪花算法")]),_._v(" "),v("p",[_._v("自然界中并不存在两片完全一样的雪花")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/snow-flake-bc.jpg",alt:"自然界中并不存在两片完全一样的雪花"}})]),_._v(" "),v("p",[v("code",[_._v("雪花算法")]),_._v("正如其名字，表示生成的 ID 如雪花般独一无二")]),_._v(" "),v("h3",{attrs:{id:"工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[_._v("#")]),_._v(" 工作原理")]),_._v(" "),v("p",[_._v("是一种以划分命名空间（UUID 也算，由于比较常见，所以单独分析）来生成 ID 的一种算法")]),_._v(" "),v("p",[_._v("以"),v("code",[_._v("Twitter Snowflake")]),_._v("为例，生成的数据为 64bit 的 long 型数据，在数据库中应该用大于等于 64bit 的数字类型的字段来保存该值，比如在 MySQL 中应该使用 BIGINT。")]),_._v(" "),v("h3",{attrs:{id:"snowflake-id-结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#snowflake-id-结构"}},[_._v("#")]),_._v(" Snowflake-ID 结构")]),_._v(" "),v("p",[v("code",[_._v("Twitter Snowflake")]),_._v("的"),v("code",[_._v("64-bit")]),_._v("结构")]),_._v(" "),v("ul",[v("li",[_._v("E1-bit reserved，1bit，置为 0；")]),_._v(" "),v("li",[_._v("E41-bit timestamp，41bit，表示从系统初始时间到现在的毫秒数, 可以用大概 69 年；"),v("code",[_._v("2 ^ 41 / 365 / 24 / 3600 / 1000 = 69.73")]),_._v("；")]),_._v(" "),v("li",[_._v("E10-bit machine id，10bit，这个机器 id 每个业务要唯一; "),v("a",{attrs:{href:"#%E6%9C%BA%E5%99%A8id%E8%8E%B7%E5%8F%96%E7%9A%84%E7%AD%96%E7%95%A5"}},[_._v("机器 id 获取的策略后面会详述")]),_._v(";")]),_._v(" "),v("li",[_._v("E12-bit sequence，12bit，每台机器每毫秒最多产生 4096 个 id，超过这个数的话会等到下一毫秒\n"),v("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/snow-flake-64-bit.jpg",alt:"雪花算法"}})])]),_._v(" "),v("h3",{attrs:{id:"优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[_._v("#")]),_._v(" 优势")]),_._v(" "),v("ul",[v("li",[_._v("毫秒数在高位，自增序列在低位，整个 ID 都是趋势递增的。")]),_._v(" "),v("li",[_._v("不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成 ID 的性能也是非常高的。")]),_._v(" "),v("li",[_._v("可以根据自身业务特性分配 bit 位，非常灵活。")])]),_._v(" "),v("h3",{attrs:{id:"弊端"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#弊端"}},[_._v("#")]),_._v(" 弊端")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("依赖机器时钟")]),_._v("，如果机器 "),v("strong",[_._v("时钟回拨")]),_._v(" ，会导致发号重复或者服务会处于不可用状态。（严重缺陷）")]),_._v(" "),v("li",[_._v("不能在一台服务器上部署多个分布式 ID 服务；(算不上缺陷，可以避免)")])]),_._v(" "),v("h3",{attrs:{id:"应用举例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应用举例"}},[_._v("#")]),_._v(" 应用举例")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/method/ObjectId/#description",target:"_blank",rel:"noopener noreferrer"}},[_._v("MongoDB 官方文档 ObjectID"),v("OutboundLink")],1),_._v(" "),v("ul",[v("li",[_._v("24 长度的十六进制字符："),v("strong",[_._v("时间+机器码+pid+inc")]),_._v("（4+3+2+3）共 12 个字节")])])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://github.com/apache/shardingsphere#shardingsphere-jdbc",target:"_blank",rel:"noopener noreferrer"}},[_._v("shardingsphere-jdbc"),v("OutboundLink")],1),_._v(" "),v("ul",[v("li",[_._v("基于雪花算法实现，未解决"),v("code",[_._v("时钟回拨")]),_._v("问题")])])]),_._v(" "),v("li",[v("a",{attrs:{href:"https://github.com/baidu/uid-generator",target:"_blank",rel:"noopener noreferrer"}},[_._v("百度自研 uid-generator"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"}},[_._v("美团自研 Leaf"),v("OutboundLink")],1)])]),_._v(" "),v("h3",{attrs:{id:"实际业务场景案例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实际业务场景案例"}},[_._v("#")]),_._v(" 实际业务场景案例")]),_._v(" "),v("p",[v("strong",[_._v("雪花算法二次改造案例")]),_._v("，引自"),v("code",[_._v("58沈剑《架构师之路》系列")])]),_._v(" "),v("p",[_._v("假设某公司 ID 生成器服务的需求如下：")]),_._v(" "),v("ol",[v("li",[_._v("单机高峰并发量小于 1W，预计未来 5 年单机高峰并发量小于 10W")]),_._v(" "),v("li",[_._v("有两个机房，预计未来 5 年机房数量小于 4 个")]),_._v(" "),v("li",[_._v("每个机房机器数小于 100 台")]),_._v(" "),v("li",[_._v("目前有 5 个业务线有 ID 生成需求，预计未来业务线数量小于 10 个")]),_._v(" "),v("li",[_._v("。。。")])]),_._v(" "),v("p",[_._v("分析过程如下：")]),_._v(" "),v("ul",[v("li",[_._v("高位取从"),v("strong",[_._v("系统 ID 生成器服务上线")]),_._v("到现在的毫秒数，假设系统至少运行 10 年，那至少需要 10 年"),v("em",[_._v("365 天")]),_._v("24 小时"),v("em",[_._v("3600 秒")]),_._v("1000 毫秒=320*10^9，差不多预留 39bit 给毫秒数")]),_._v(" "),v("li",[_._v("每秒的单机高峰并发量小于 10W，即平均每毫秒的单机高峰并发量小于 100，差不多预留 7bit 给每毫秒内序列号")]),_._v(" "),v("li",[_._v("5 年内机房数小于 4 个，预留 2bit 给机房标识")]),_._v(" "),v("li",[_._v("每个机房小于 100 台机器，预留 7bit 给每个机房内的服务器标识")]),_._v(" "),v("li",[_._v("业务线小于 10 个，预留 4bit 给业务线标识")])]),_._v(" "),v("p",[_._v("这样设计的 64bit 标识，可以保证：")]),_._v(" "),v("ul",[v("li",[_._v("每个业务线、每个机房、每个机器生成的 ID 都是不同的")]),_._v(" "),v("li",[_._v("同一个机器，每个毫秒内生成的 ID 都是不同的")]),_._v(" "),v("li",[_._v("同一个机器，同一个毫秒内，以序列号区区分保证生成的 ID 是不同的")]),_._v(" "),v("li",[_._v("将毫秒数放在最高位，保证生成的 ID 是趋势递增的")]),_._v(" "),v("li")]),_._v(" "),v("h2",{attrs:{id:"参考文档"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[_._v("#")]),_._v(" 参考文档")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://github.com/twitter-archive/snowflake",target:"_blank",rel:"noopener noreferrer"}},[_._v("snowflake"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://www.ietf.org/rfc/rfc4122.txt",target:"_blank",rel:"noopener noreferrer"}},[_._v("A Universally Unique IDentifier (UUID) URN Namespace"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"http://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Ticket Servers: Distributed Unique Primary Keys on the Cheap"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"}},[_._v("Leaf"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);