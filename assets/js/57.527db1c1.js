(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{333:function(v,_,t){"use strict";t.r(_);var e=t(14),r=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h4",{attrs:{id:"一、分布式系统的挑战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、分布式系统的挑战"}},[v._v("#")]),v._v(" "),_("strong",[v._v("一、分布式系统的挑战")])]),v._v(" "),_("p",[v._v("时序性 Timing")]),v._v(" "),_("p",[v._v("并发性 Concurrency")]),v._v(" "),_("p",[v._v("健壮性 Robustness")]),v._v(" "),_("p",[v._v("一致性 Consistency")]),v._v(" "),_("h4",{attrs:{id:"二、分布式共识-consensus"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、分布式共识-consensus"}},[v._v("#")]),v._v(" **二、分布式共识 Consensus **")]),v._v(" "),_("p",[v._v("分布式系统中多个节点之间，彼此对某个状态达成一致结果的过程")]),v._v(" "),_("h4",{attrs:{id:"三、分布式共识的应用-application-of-consensus"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、分布式共识的应用-application-of-consensus"}},[v._v("#")]),v._v(" "),_("strong",[v._v("三、分布式共识的应用 Application of consensus")])]),v._v(" "),_("p",[v._v("<1> 逻辑时间的共识，决定事件发生的顺序")]),v._v(" "),_("p",[v._v("<2> 互斥性的共识，决定谁拥有访问的资源")]),v._v(" "),_("p",[v._v("<3> 协调者的共识，谁是 leader")]),v._v(" "),_("p",[_("strong",[v._v("数据一致性模型")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("强一致性")])]),v._v(" "),_("li",[_("p",[v._v("弱一致性")]),v._v(" "),_("ul",[_("li",[v._v("不承诺可以立即读到最新写入的值，也不会承诺具体多久之后可以读到；-> 不一致窗口")])])]),v._v(" "),_("li",[_("p",[v._v("最终一致性")]),v._v(" "),_("ul",[_("li",[v._v("弱一致性的特例")]),v._v(" "),_("li",[v._v("不一致窗口：主要受通信延迟，系统负载和副本个数的影响\n"),_("strong",[v._v("写一致性级别")])])])]),v._v(" "),_("li",[_("p",[v._v("Any： 所有节点都没写成功，如果请求成功保存到了"),_("strong",[v._v("失败重传")]),v._v("的缓存队列中，也算成功。any 是最弱的写一致性级别。")])]),v._v(" "),_("li",[_("p",[v._v("One：必须写成功一个节点；任何一个节点写入成功后，立即返回成功给客户端")])]),v._v(" "),_("li",[_("p",[v._v("Quorum：多数节点写入成功后")])]),v._v(" "),_("li",[_("p",[v._v("All：所有节点都写入成功后，返回成功\n"),_("strong",[v._v("Quorum NWR 算法")])])])]),v._v(" "),_("p",[v._v("三要素：")]),v._v(" "),_("ul",[_("li",[v._v("N 副本数")]),v._v(" "),_("li",[v._v("W 写一致性级别 ： 完成 W 个副本更新，才完成写操作")]),v._v(" "),_("li",[v._v("R 读一致性级别 ： 读取 R 个副本，选最新的日志作为最新数据")])]),v._v(" "),_("p",[v._v("一致性效果：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("W+R>N，强一致性")])]),v._v(" "),_("li",[_("p",[v._v("W+R<=N，最终一致性\n实际场景选择：")])]),v._v(" "),_("li",[_("p",[v._v("N 表示副本的冗余备份能力")])]),v._v(" "),_("li",[_("p",[v._v("W=N 时，读性能比较好（读一个就成功了）")])]),v._v(" "),_("li",[_("p",[v._v("R=N 时，写性能比较好（写一个就成功了）")])]),v._v(" "),_("li",[_("p",[v._v("W=R=(N+1)/2 时，容错能力比较好，能容忍（N-1）/2 的故障")])])]),v._v(" "),_("h4",{attrs:{id:"cap-理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap-理论"}},[v._v("#")]),v._v(" "),_("strong",[v._v("cap 理论")])]),v._v(" "),_("p",[v._v("一致性，可用性，分区容错 -- 三角不可能")]),v._v(" "),_("p",[v._v("分布式环境，必定存在网络分区，所以分区容错性必须满足，只能选择两种模型：")]),v._v(" "),_("ul",[_("li",[v._v("cp")]),v._v(" "),_("li",[v._v("ap")])]),v._v(" "),_("h4",{attrs:{id:"base-理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base-理论"}},[v._v("#")]),v._v(" "),_("strong",[v._v("base 理论")])]),v._v(" "),_("p",[v._v("cap 理论的一种妥协，降低了发生分区容错时，对可用性和一致性的要求")]),v._v(" "),_("ul",[_("li",[v._v("基本可用：允许可用性降低")]),v._v(" "),_("li",[v._v("软状态：允许系统中数据存在中间状态")]),v._v(" "),_("li",[v._v("最终一致性：允许数据同步存在时延")])]),v._v(" "),_("p",[v._v("实现基本可用的方法：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("流量削峰、延迟响应、体验降级、过载保护")])]),v._v(" "),_("li",[_("p",[v._v("故障隔离")])]),v._v(" "),_("li",[_("p",[v._v("弹性扩容")])])]),v._v(" "),_("p",[_("strong",[v._v("paxos 共识算法")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("分布式系统如何就某个值达成一致")])]),v._v(" "),_("li",[_("p",[v._v("一种理论思想\n"),_("strong",[v._v("basic paxos")])])]),v._v(" "),_("li",[_("p",[v._v("提案 ： [n, v]，n 为提案编号，v 为提议值")])]),v._v(" "),_("li",[_("p",[v._v("prepare 准备请求")])]),v._v(" "),_("li",[_("p",[v._v("accept 接受请求")])])]),v._v(" "),_("p",[v._v("三种角色")]),v._v(" "),_("ul",[_("li",[v._v("proposer (提议者)：提议一个值，用于投票表决")]),v._v(" "),_("li",[v._v("acceptor（接受者）：对每个提议的值进行投票，并存储接受的值")]),v._v(" "),_("li",[v._v("learner（记录员）：被告知投票的结果，接受达成共识的值，存储保存，不参与投票的过程。")])]),v._v(" "),_("p",[v._v("两个阶段：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("准备阶段（prepare）")]),v._v(" "),_("p",[v._v("(a) Proposer 选择一个"),_("strong",[v._v("提案编号 N")]),v._v("，然后向"),_("strong",[v._v("半数以上")]),v._v("的 Acceptor 发送编号为 N 的"),_("strong",[v._v("Prepare 请求")]),v._v("。")]),v._v(" "),_("p",[v._v("(b) Acceptor 收到一个编号为 N 的 Prepare 请求，且 N"),_("strong",[v._v("大于")]),v._v("该 Acceptor 已经"),_("strong",[v._v("响应过的")]),v._v("所有"),_("strong",[v._v("Prepare 请求")]),v._v("的编号")]),v._v(" "),_("p",[v._v("那么它就会将它已经"),_("strong",[v._v("接受过的编号最大的提案（如果有的话）"),_("strong",[v._v("作为响应反馈给 Proposer，同时该 Acceptor 承诺")]),v._v("不再接受")]),v._v("任何"),_("strong",[v._v("编号小于 N 的提案")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("接受阶段（accept)")]),v._v(" "),_("p",[v._v("(a) 如果 Proposer 收到"),_("strong",[v._v("半数以上")]),v._v("Acceptor 对其发出的编号为 N 的 Prepare 请求的"),_("strong",[v._v("响应")]),v._v("，那么它就会发送一个针对**[N,V]提案"),_("strong",[v._v("的")]),v._v("Accept 请求"),_("strong",[v._v("给")]),v._v("半数以上"),_("strong",[v._v("的 Acceptor。注意：V 就是收到的")]),v._v("响应"),_("strong",[v._v("中")]),v._v("编号最大的提案的 value**，如果响应中"),_("strong",[v._v("不包含任何提案")]),v._v("，那么 V 就由 Proposer"),_("strong",[v._v("自己决定")]),v._v("。")]),v._v(" "),_("p",[v._v("(b) 如果 Acceptor 收到一个针对编号为 N 的提案的 Accept 请求，只要该 Acceptor"),_("strong",[v._v("没有")]),v._v("对编号"),_("strong",[v._v("大于 N")]),v._v("的"),_("strong",[v._v("Prepare 请求")]),v._v("做出过"),_("strong",[v._v("响应")]),v._v("，它就"),_("strong",[v._v("接受该提案")]),v._v("。")])])]),v._v(" "),_("p",[v._v("总结：")]),v._v(" "),_("ul",[_("li",[v._v("二阶段提交")]),v._v(" "),_("li",[v._v("容错能力：超过半数通过")]),v._v(" "),_("li",[v._v("提案编号的大小代表着优先级，通过的最大编号的提案信息")])]),v._v(" "),_("p",[_("strong",[v._v("数据一致性与 paxos 算法")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("保持数据的一致性的原则：在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行"),_("strong",[v._v("相同的操作序列")]),v._v("，那么他们最后能得到一个"),_("strong",[v._v("一致的状态")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("Paxos 算法"),_("strong",[v._v("顺序一致性")]),v._v("保证：")]),v._v(" "),_("p",[v._v("master 维护一个全局写队列，所有写操作都必须放入这个队列"),_("strong",[v._v("编号")]),v._v("，就能保证顺序一致性")])]),v._v(" "),_("li",[_("p",[v._v("master 挂了怎么办？")]),v._v(" "),_("ol",[_("li",[v._v("同一时刻，只有一个写操作被批准，同时并发的写操作要去争取选票")]),v._v(" "),_("li",[v._v("只有获得过半数选票的写操作才会被批准（所以永远只会有一个写操作得到批准），其他的写操作竞争失败只好再发起一轮投票")]),v._v(" "),_("li",[v._v("投票中，所有写操作都被严格编号排序，编号严格递增。")]),v._v(" "),_("li",[v._v("当一个节点接受了一个编号为 100 的写操作，之后又接受到编号为 99 的写操作（因为网络延迟等很多不可预见原因），它马上能意识到自己 数据不一致了，自动停止对外服务并重启同步过程。")]),v._v(" "),_("li",[v._v("任何一个节点挂掉都不会影响整个集群的数据一致性（总"),_("code",[v._v("2n+1")]),v._v("台，除非挂掉大于 n 台）。")])])])]),v._v(" "),_("p",[_("strong",[v._v("Multi-Paxos")])]),v._v(" "),_("ul",[_("li",[v._v("是一种思想，不是算法")]),v._v(" "),_("li",[v._v("选举领导者")]),v._v(" "),_("li",[v._v("优化机制：当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段，优化了"),_("code",[v._v("basic paxos")])]),v._v(" "),_("li",[v._v("不推荐设计和实现新的 Multi-Paxos 算法，而是建议优先考虑 "),_("strong",[v._v("Raft 算法")])])]),v._v(" "),_("h4",{attrs:{id:"raft"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#raft"}},[v._v("#")]),v._v(" "),_("strong",[v._v("Raft")])]),v._v(" "),_("p",[v._v("可视化 raft 模型")]),v._v(" "),_("p",[v._v("http://thesecretlivesofdata.com/raft/")]),v._v(" "),_("p",[_("strong",[v._v("新特性 novel features")])]),v._v(" "),_("p",[v._v("① Strong leader 强领导者模型")]),v._v(" "),_("p",[v._v("增强了领导者的作用，比如日志只能从 leader rc 到其他的 server")]),v._v(" "),_("p",[v._v("② Leader election 领导者选举")]),v._v(" "),_("p",[v._v("随机计时器，在任何一致性算法都需要的 heartbeats 上增加了少量机制，同时能快速地解决冲突，比如选票瓜分")]),v._v(" "),_("p",[v._v("③ Membership changes 成员变更")]),v._v(" "),_("p",[_("strong",[v._v("复制状态机 Replicated state machines")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/1752522-b2e0dc4401aefd3d.png",alt:"1752522-b2e0dc4401aefd3d"}})]),v._v(" "),_("h4",{attrs:{id:"_3-subproblems"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-subproblems"}},[v._v("#")]),v._v(" 3 subproblems")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Leader election: a new leader must be chosen when an existing leader fails")])]),v._v(" "),_("li",[_("p",[v._v("Log replication: the leader must accept log entries from clients and replicate them across the cluster,")])])]),v._v(" "),_("p",[v._v("forcing the other logs to agree with its own")]),v._v(" "),_("ul",[_("li",[v._v("members change :")])]),v._v(" "),_("h4",{attrs:{id:"算法设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法设计"}},[v._v("#")]),v._v(" 算法设计")]),v._v(" "),_("p",[v._v("一、状态 State")]),v._v(" "),_("p",[v._v("<1> 所有服务器上的持久化状态")]),v._v(" "),_("p",[v._v("currentTerm 当前任期")]),v._v(" "),_("p",[v._v("votedFor 投票给的 candidatedId")]),v._v(" "),_("p",[v._v("Log[] 状态机指令，当 log entry 被 leader 确认后还包含 Term")]),v._v(" "),_("p",[v._v("<2> 所有服务器上的不稳定状态")]),v._v(" "),_("p",[v._v("commitIndex : 被提交的最高 log")]),v._v(" "),_("p",[v._v("lastApplied: 应用到状态机的最高 log entry")]),v._v(" "),_("p",[v._v("<3>leader 上的不稳定状态")]),v._v(" "),_("p",[v._v("(竞选成功后 重新初始化)")]),v._v(" "),_("p",[v._v("nextIndex[] ：servers 向服务器发送的下一条 log entry 数据")]),v._v(" "),_("p",[v._v("matchIndex[] ：每一台服务器复制了 leader 的日志记录列表")]),v._v(" "),_("p",[v._v("二、RequestVote RPC")]),v._v(" "),_("p",[v._v("候选人调用来收集选票")]),v._v(" "),_("p",[v._v("请求")]),v._v(" "),_("p",[v._v("term ： 候选人任期")]),v._v(" "),_("p",[v._v("candidateId ： 候选人 id")]),v._v(" "),_("p",[v._v("lastLogIndex : 候选人最新的")]),v._v(" "),_("p",[v._v("lastLogTerm : 候选人最新的 log entry 的 term")]),v._v(" "),_("p",[v._v("三、AppendEntries RPC")]),v._v(" "),_("p",[v._v("Leader 调用去复制 log entry; 也被用来作为心跳")]),v._v(" "),_("p",[_("strong",[v._v("领导者选举")])]),v._v(" "),_("p",[v._v("两个超时机制")]),v._v(" "),_("p",[v._v("<1>竞选超时 election timeout")]),v._v(" "),_("p",[v._v("<2>心跳超时")]),v._v(" "),_("p",[v._v("关于超时时间")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("集群刚启动的时候，心跳会超时，这时候 follower 是直接成为 candidator 么？还是还要在心跳超时的基础上等待一个竞选超时才变成 candidator？")]),v._v(" "),_("p",[v._v("心跳超时后，Follower "),_("strong",[v._v("等待自身竞选超时")]),v._v("后成为 Candidate 身份并发起选举；")]),v._v(" "),_("p",[v._v("一般是 150~300ms，使每个 server 的超时时间不一样，这样就避免了多个 Candidate 同时发起选举的问题；")])]),v._v(" "),_("li",[_("p",[v._v("成为 candidator 并且发送投票请求给 follower，这个 candidator 这时候本身等待投票是有个超时的，这个超时也是竞选超时么？")]),v._v(" "),_("p",[v._v("不是，选举也有时限，规定时间内没有获取到足够多的票数，则当前 Leader 选举竞选失败；但这个时限不是 election timeout ，election timeout 是指心跳超时后发起竞选的时限。")])]),v._v(" "),_("li",[_("p",[v._v("心跳超时和竞选超时哪个大？心跳超时一般设置为多少？")]),v._v(" "),_("p",[v._v("心跳超时可以自己配置，看你自己的网络规模和拓扑；竞选超时是随机的，大概在几十到几百毫秒；通常情况下，心跳超时比竞选超时长得多，心跳是秒级，竞选是毫秒级。")])])]),v._v(" "),_("p",[_("strong",[v._v("日志复制 Log Replication")])]),v._v(" "),_("p",[v._v("服务器节点 log entry 可能出现的情况")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/1752522-fc1352afc54b5ce7.png",alt:"1752522-fc1352afc54b5ce7"}})]),v._v(" "),_("p",[v._v("How to replication?")]),v._v(" "),_("h5",{attrs:{id:"网络分区-network-partition"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络分区-network-partition"}},[v._v("#")]),v._v(" 网络分区 network partition")]),v._v(" "),_("hr"),v._v(" "),_("h5",{attrs:{id:"in-search-of-an-understandable-consensus-algorithm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#in-search-of-an-understandable-consensus-algorithm"}},[v._v("#")]),v._v(" "),_("strong",[v._v("In Search of an Understandable Consensus Algorithm")])]),v._v(" "),_("p",[v._v("翻译版本")]),v._v(" "),_("p",[v._v("https://www.cnblogs.com/linbingdong/p/6442673.html")]),v._v(" "),_("p",[_("strong",[v._v("最小选举超时")]),v._v("。在分布式系统中，有时候需要对集群中的成员数量进行更新的操作。对于被删除的服务器而言，如果它们没有及时关闭，那么它们将不会接收到心跳信息和日志信息，从而不断发生超时，最后导致任期不断增加（高于集群中所有成员的任期），然后不断向集群中发送请求投票消息。集群中的 Leader 将变为 Follower，集群中将不断开始新的选举，从而扰乱集群的正常运行。")]),v._v(" "),_("p",[v._v("解决方案：Raft 引入了一个最小选举超时时间，意思是如果集群中存在 Leader 时，并且接收到心跳信息之后在最小选举超时时间内接受到请求投票消息，那么将会忽略掉该投票消息。")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("https://raft.github.io/")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("Raft 协议的博士论文 CONSENSUS: BRIDGING THEORY AND PRACTICE;")]),v._v(" "),_("p",[v._v("用 raft 协议构建一个复制状态机")])])}),[],!1,null,null,null);_.default=r.exports}}]);